--- python-openzwave-20120508.orig/openzwave.pyx	2012-08-27 23:35:39.000000000 +0200
+++ python-openzwave-20120508/openzwave.pyx	2012-08-28 02:55:17.000000000 +0200
@@ -13,6 +13,7 @@
     void free(void* ptr)
 
 ctypedef unsigned int uint32
+ctypedef unsigned long uint64
 ctypedef int int32
 ctypedef int int16
 ctypedef unsigned char uint8
@@ -32,46 +33,55 @@
 
 cdef extern from "Notification.h" namespace "OpenZWave::Notification":
 
-    cdef enum NotificationType:
-        Type_ValueAdded = 0
-        Type_ValueRemoved = 1
-        Type_ValueChanged = 2
-        Type_Group = 3
-        Type_NodeNew = 4
-        Type_NodeAdded = 5
-        Type_NodeRemoved = 6
-        Type_NodeProtocolInfo = 7
-        Type_NodeNaming = 8
-        Type_NodeEvent = 9
-        Type_PollingDisabled = 10
-        Type_PollingEnabled = 11
-        Type_DriverReady = 12
-        Type_DriverReset = 13
-        Type_MsgComplete = 14
-        Type_NodeQueriesComplete = 15
-        Type_AwakeNodesQueried = 16
-        Type_AllNodesQueried = 17
+   cdef enum NotificationType:
+        Type_ValueAdded = 0                     # A new node value has been added to OpenZWave's list. These notifications occur after a node has been discovered, and details of its command classes have been received.  Each command class may generate one or more values depending on the complexity of the item being represented.
+        Type_ValueRemoved = 1                   # A node value has been removed from OpenZWave's list.  This only occurs when a node is removed.
+        Type_ValueChanged = 2                   # A node value has been updated from the Z-Wave network and it is different from the previous value.
+        Type_ValueRefreshed = 3                 # A node value has been updated from the Z-Wave network.
+        Type_Group = 4                          # The associations for the node have changed. The application should rebuild any group information it holds about the node.
+        Type_NodeNew = 5                        # A new node has been found (not already stored in zwcfg*.xml file)
+        Type_NodeAdded = 6                      # A new node has been added to OpenZWave's list.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself.
+        Type_NodeRemoved = 7                    # A node has been removed from OpenZWave's list.  This may be due to a device being removed from the Z-Wave network, or because the application is closing.
+        Type_NodeProtocolInfo = 8               # Basic node information has been receievd, such as whether the node is a listening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description.
+        Type_NodeNaming = 9                     # One of the node names has changed (name, manufacturer, product).
+        Type_NodeEvent = 10                     # A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification.
+        Type_PollingDisabled = 11               # Polling of a node has been successfully turned off by a call to Manager::DisablePoll
+        Type_PollingEnabled = 12                # Polling of a node has been successfully turned on by a call to Manager::EnablePoll
+        Type_CreateButton = 13                  # Handheld controller button event created 
+        Type_DeleteButton = 14                  # Handheld controller button event deleted 
+        Type_ButtonOn = 15                      # Handheld controller button on pressed event
+        Type_ButtonOff = 16                     # Handheld controller button off pressed event 
+        Type_DriverReady = 17                   # A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods.
+        Type_DriverFailed = 18                  # Driver failed to load
+        Type_DriverReset = 19                   # All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications.
+        Type_MsgComplete = 20                   # The last message that was sent is now complete.
+        Type_EssentialNodeQueriesComplete = 21  # The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages.
+        Type_NodeQueriesComplete = 22           # All the initialisation queries on a node have been completed.
+        Type_AwakeNodesQueried = 23             # All awake nodes have been queried, so client application can expected complete data for these nodes.
+        Type_AllNodesQueried = 24               # All nodes have been queried, so client application can expected complete data.
+        Type_Error = 25                         # An error has occured that we need to report.
+
 
 cdef extern from "ValueID.h" namespace "OpenZWave":
 
     cdef enum ValueGenre:
-        ValueGenre_Basic = 0
-        ValueGenre_User = 1
-        ValueGenre_Config = 2
-        ValueGenre_System = 3
-        ValueGenre_Count = 4
+        ValueGenre_Basic = 0                # The 'level' as controlled by basic commands.  Usually duplicated by another command class.
+        ValueGenre_User = 1                 # Basic values an ordinary user would be interested in. 
+        ValueGenre_Config = 2               # Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead.
+        ValueGenre_System = 3               # Values of significance only to users who understand the Z-Wave protocol.
+        ValueGenre_Count = 4                # A count of the number of genres defined.  Not to be used as a genre itself.
 
     cdef enum ValueType:
-        ValueType_Bool = 0
-        ValueType_Byte = 1
-        ValueType_Decimal = 2
-        ValueType_Int = 3
-        ValueType_List = 4
-        ValueType_Schedule = 5
-        ValueType_Short = 6
-        ValueType_String = 7
-        ValueType_Button = 8
-        ValueType_Max = ValueType_Button
+        ValueType_Bool = 0                  # Boolean, true or false
+        ValueType_Byte = 1                  # 8-bit unsigned value
+        ValueType_Decimal = 2               # Represents a non-integer value as a string, to avoid floating point accuracy issues.
+        ValueType_Int = 3                   # 32-bit signed value
+        ValueType_List = 4                  # List from which one item can be selected
+        ValueType_Schedule = 5              # Complex type used with the Climate Control Schedule command class
+        ValueType_Short = 6                 # 16-bit signed value
+        ValueType_String = 7                # Text string
+        ValueType_Button = 8                # A write-only value that is the equivalent of pressing a button to send a command to a device
+        ValueType_Max = ValueType_Button    # The highest-number type defined.  Not to be used as a type itself.
 
     cdef cppclass ValueID:
         uint32 GetHomeId()
@@ -81,7 +91,7 @@
         uint8 GetInstance()
         uint8 GetIndex()
         ValueType GetType()
-        uint32 GetId()
+        uint64 GetId()
 
 cdef extern from "Notification.h" namespace "OpenZWave":
 
@@ -92,6 +102,8 @@
         ValueID& GetValueID()
         uint8 GetGroupIdx()
         uint8 GetEvent()
+        uint8 GetButtonId()
+        uint8 GetErrorCode()
         uint8 GetByte()
 
 ctypedef void (*pfnOnNotification_t)(const_notification _pNotification, void* _context )
@@ -111,17 +123,24 @@
         bint IsBridgeController(uint32 homeid)
         string GetLibraryVersion(uint32 homeid)
         string GetLibraryTypeName(uint32 homeid)
+        int32 GetSendQueueCount( uint32 homeId )
+        void LogDriverStatistics( uint32 homeId )
         # // Polling
         uint32 GetPollInterval()
         void SetPollInterval(uint32 milliseconds, bint bIntervalBetweenPolls)
-        bint EnablePoll(ValueID& valueId)
+        bint EnablePoll(ValueID& valueId, uint8 intensity)
         bint DisablePoll(ValueID& valueId)
         bint isPolled(ValueID& valueId)
+        void SetPollIntensity( ValueID& valueId, intensity = 1 )
         # // Node Information
         bint RefreshNodeInfo(uint32 homeid, uint8 nodeid)
         void RequestNodeState(uint32 homeid, uint8 nodeid)
+        void RequestNodeDynamic( uint32 homeId, uint8 nodeId )
         bint IsNodeListeningDevice(uint32 homeid, uint8 nodeid)
+        bint IsNodeFrequentListeningDevice( uint32 homeId, uint8 nodeId )
+        bint IsNodeBeamingDevice( uint32 homeId, uint8 nodeId )
         bint IsNodeRoutingDevice(uint32 homeid, uint8 nodeid)
+        bint IsNodeSecurityDevice( uint32 homeId, uint8 nodeId )
         uint32 GetNodeMaxBaudRate(uint32 homeid, uint8 nodeid)
         uint8 GetNodeVersion(uint32 homeid, uint8 nodeid)
         uint8 GetNodeSecurity(uint32 homeid, uint8 nodeid)
@@ -157,6 +176,7 @@
         uint32 GetValueMax(ValueID& valueid)
         bint IsValueReadOnly(ValueID& valueid)
         bint IsValueSet(ValueID& valueid)
+        bint IsValuePolled( ValueID& valueid )
         bint GetValueAsBool(ValueID& valueid, bint* o_value)
         bint GetValueAsByte(ValueID& valueid, uint8* o_value)
         bint GetValueAsFloat(ValueID& valueid, float* o_value)
@@ -173,10 +193,12 @@
         bint SetValue(ValueID& valueid, int16 value)
         bint SetValue(ValueID& valueid, string value)
         bint SetValueListSelection(ValueID& valueid, string selecteditem)
+        bint RefreshValue(ValueID& valueid)
+        void SetChangeVerified(ValueID& valueid, bint verify)
         bint PressButton(ValueID& valueid)
         bint ReleaseButton(ValueID& valueid)
-        uint8 GetNumSwitchPoints(ValueID& valueid)
         # // Climate Control
+        uint8 GetNumSwitchPoints(ValueID& valueid)
         bint SetSwitchPoint(ValueID& valueid, uint8 hours, uint8 minutes, uint8 setback)
         bint RemoveSwitchPoint(ValueID& valueid, uint8 hours, uint8 minutes)
         bint ClearSwitchPoints(ValueID& valueid)
@@ -185,7 +207,7 @@
         void SwitchAllOn(uint32 homeid)
         void SwitchAllOff(uint32 homeid)
         # // Configuration Parameters
-        bint SetConfigParam(uint32 homeid, uint8 nodeid, uint8 param, uint32 value)
+        bint SetConfigParam(uint32 homeid, uint8 nodeid, uint8 param, uint32 value, uint8 size = 2)
         void RequestConfigParam(uint32 homeid, uint8 nodeid, uint8 aram)
         void RequestAllConfigParams(uint32 homeid, uint8 nodeid)
         # // Groups
@@ -202,6 +224,42 @@
         void SoftReset(uint32 homeid)
         #bint BeginControllerCommand(uint32 homeid, Driver::ControllerCommand _command, Driver::pfnControllerCallback_t _callback = NULL, void* _context = NULL, bool _highPower = false, uint8 _nodeId = 0xff )
         bint CancelControllerCommand(uint32 homeid)
+        # // Scene commands
+        uint8 GetNumScenes()
+        uint8 GetAllScenes(uint8** sceneIds)
+        uint8 CreateScene()
+        bint RemoveScene(uint8 sceneId)
+        bint AddSceneValue(uint8 sceneId, ValueID& valueId, bint value)
+        bint AddSceneValue(uint8 sceneId, ValueID& valueId, bint value)
+        bint AddSceneValue( uint8 sceneId, ValueID& valueId, float value )
+        bint AddSceneValue( uint8 sceneId, ValueID& valueId, int32 value )
+        bint AddSceneValue( uint8 sceneId, ValueID& valueId, int16 value )
+        bint AddSceneValue( uint8 sceneId, ValueID& valueId, string value )
+        bint AddSceneValueListSelection( uint8 sceneId, ValueID& valueId, string value )
+        bint AddSceneValueListSelection( uint8 sceneId, ValueID& valueId, int32 value )
+        bint RemoveSceneValue( uint8 sceneId, ValueID& valueId )
+        #int SceneGetValues( uint8 sceneId, vector<ValueID>* o_value )
+        bint SceneGetValueAsBool( uint8 sceneId, ValueID& valueId, bint value )
+        bint SceneGetValueAsByte( uint8 sceneId, ValueID& valueId, uint8* o_value )
+        bint SceneGetValueAsFloat( uint8 sceneId, ValueID& valueId, float* o_value )
+        bint SceneGetValueAsInt( uint8 sceneId, ValueID& valueId, int32* o_value )
+        bint SceneGetValueAsShort( uint8 sceneId, ValueID& valueId, int16* o_value )
+        bint SceneGetValueAsString( uint8 sceneId, ValueID& valueId, string* o_value )
+        bint SceneGetValueListSelection( uint8 sceneId, ValueID& valueId, string* o_value )
+        bint SceneGetValueListSelection( uint8 sceneId, ValueID& valueId, int32* o_value )
+        bint SetSceneValue( uint8 sceneId, ValueID& valueId, bint value )
+        bint SetSceneValue( uint8 sceneId, ValueID& valueId, uint8 value )
+        bint SetSceneValue( uint8 sceneId, ValueID& valueId, float value )
+        bint SetSceneValue( uint8 sceneId, ValueID& valueId, int32 value )
+        bint SetSceneValue( uint8 sceneId, ValueID& valueId, int16 value )
+        bint SetSceneValue( uint8 sceneId, ValueID& valueId, string value )
+        bint SetSceneValueListSelection( uint8 sceneId, ValueID& valueId, string value )
+        bint SetSceneValueListSelection( uint8 sceneId, ValueID& valueId, int32 value )
+        string GetSceneLabel( uint8 sceneId )
+        void SetSceneLabel( uint8 sceneId, string value )
+        bint SceneExists( uint8 sceneId )
+        bint ActivateScene( uint8 sceneId )
+        
 
 cdef extern from "Manager.h" namespace "OpenZWave::Manager":
     Manager* Create()
@@ -223,40 +281,31 @@
 
 PyNotifications = [
     EnumWithDoc('ValueAdded').setDoc("A new node value has been added to OpenZWave's list. These notifications occur after a node has been discovered, and details of its command classes have been received.  Each command class may generate one or more values depending on the complexity of the item being represented."),
-    EnumWithDoc('ValueRemoved').setDoc(
-                         "A node value has been removed from OpenZWave's list.  This only occurs when a node is removed."),
-    EnumWithDoc('ValueChanged').setDoc(
-                         "A node value has been updated from the Z-Wave network."),
-    EnumWithDoc('Group').setDoc(
-                         "The associations for the node have changed. The application should rebuild any group information it holds about the node."),
-    EnumWithDoc('NodeNew').setDoc(
-                         "A new node has been found (not already stored in zwcfg*.xml file)"),
-    EnumWithDoc('NodeAdded').setDoc(
-                         "A new node has been added to OpenZWave's list.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),
-    EnumWithDoc('NodeRemoved').setDoc(
-                         "A node has been removed from OpenZWave's list.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),
-    EnumWithDoc('NodeProtocolInfo').setDoc(
-                         "Basic node information has been receievd, such as whether the node is a listening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),
-    EnumWithDoc('NodeNaming').setDoc(
-                         "One of the node names has changed (name, manufacturer, product)."),
-    EnumWithDoc('NodeEvent').setDoc(
-                         "A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),
-    EnumWithDoc('PollingDisabled').setDoc(
-                         "Polling of a node has been successfully turned off by a call to Manager::DisablePoll"),
-    EnumWithDoc('PollingEnabled').setDoc(
-                         "Polling of a node has been successfully turned on by a call to Manager::EnablePoll"),
-    EnumWithDoc('DriverReady').setDoc(
-                         "A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),
-    EnumWithDoc('DriverReset').setDoc(
-                         "All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),
-    EnumWithDoc('MsgComplete').setDoc(
-                         "The last message that was sent is now complete."),
-    EnumWithDoc('NodeQueriesComplete').setDoc(
-                         "The initialisation queries on a node have been completed."),
-    EnumWithDoc('AwakeNodesQueried').setDoc(
-                         "All awake nodes have been queried, so client application can expected complete data for these nodes."),
-    EnumWithDoc('AllNodesQueried').setDoc(
-                         "All nodes have been queried, so client application can expected complete data."),
+    EnumWithDoc('ValueRemoved').setDoc("A node value has been removed from OpenZWave's list.  This only occurs when a node is removed."),
+    EnumWithDoc('ValueChanged').setDoc("A node value has been updated from the Z-Wave network and it is different from the previous value."),
+    EnumWithDoc('ValueRefreshed').setDoc("A node value has been updated from the Z-Wave network."),
+    EnumWithDoc('Group').setDoc("The associations for the node have changed. The application should rebuild any group information it holds about the node."),
+    EnumWithDoc('NodeNew').setDoc("A new node has been found (not already stored in zwcfg*.xml file)."),
+    EnumWithDoc('NodeAdded').setDoc("A new node has been added to OpenZWave's list.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),
+    EnumWithDoc('NodeRemoved').setDoc("A node has been removed from OpenZWave's list.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),
+    EnumWithDoc('NodeProtocolInfo').setDoc("Basic node information has been receievd, such as whether the node is a listening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),
+    EnumWithDoc('NodeNaming').setDoc("One of the node names has changed (name, manufacturer, product)."),
+    EnumWithDoc('NodeEvent').setDoc("A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),
+    EnumWithDoc('PollingDisabled').setDoc("Polling of a node has been successfully turned off by a call to Manager::DisablePoll."),
+    EnumWithDoc('PollingEnabled').setDoc("Polling of a node has been successfully turned on by a call to Manager::EnablePoll."),
+    EnumWithDoc('CreateButton').setDoc("Handheld controller button event created."),
+    EnumWithDoc('DeleteButton').setDoc("Handheld controller button event deleted."),
+    EnumWithDoc('ButtonOn').setDoc("Handheld controller button on pressed event."),
+    EnumWithDoc('ButtonOff').setDoc("Handheld controller button off pressed event."),
+    EnumWithDoc('DriverReady').setDoc("A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),
+    EnumWithDoc('DriverFailed').setDoc("Driver failed to load."),
+    EnumWithDoc('riverReset').setDoc("All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),
+    EnumWithDoc('MsgComplete').setDoc("The last message that was sent is now complete."),
+    EnumWithDoc('EssentialNodeQueriesComplete').setDoc("The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages."),
+    EnumWithDoc('NodeQueriesComplete').setDoc("All the initialisation queries on a node have been completed."),
+    EnumWithDoc('AwakeNodesQueried').setDoc("All awake nodes have been queried, so client application can expected complete data for these nodes."),
+    EnumWithDoc('AllNodesQueried').setDoc("All nodes have been queried, so client application can expected complete data."),
+    EnumWithDoc('Error').setDoc("An error has occured that we need to report."),
     ]
 
 PyGenres = [
@@ -632,6 +681,25 @@
         '''
         cdef string c_string = self.manager.GetLibraryTypeName(homeid)
         return c_string.c_str()
+
+    def getSendQueueCount(self, homeid):
+        '''
+Get count of messages in the outgoing send queue.
+
+@param homeId The Home ID of the Z-Wave controller.
+@return a integer message count
+        '''
+        return self.manager.GetSendQueueCount(homeid)
+
+    def logDriverStatistics(self, homeid):
+        '''
+Send current driver statistics to the log file.
+
+@param homeId The Home ID of the Z-Wave controller.
+@return a integer message count
+        '''
+        self.manager.LogDriverStatistics(homeid)
+
 #
 # -----------------------------------------------------------------------------
 # Polling Z-Wave devices
@@ -1469,3 +1537,67 @@
 @see beginControllerCommand
         '''
         return self.manager.CancelControllerCommand(homeid)
+
+    def getNumScenes(self):
+        '''
+Gets the number of scenes that have been defined
+
+@return The number of scenes.
+@see GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
+       '''
+        return self.manager.GetNumScenes()
+
+    def getNumScenes(self):
+        '''
+Gets the number of scenes that have been defined
+
+@return The number of scenes.
+@see GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
+       '''
+        return self.manager.GetNumScenes()
+
+    def getAllScenes(self):
+        '''
+Gets a list of all the SceneIds
+
+@return A tuple containing neighboring scene IDs
+@see GetNumScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
+        '''
+        retval = None
+        # TODO: proper initialization of this pointer.  Underlying code creates new uint8[] at this address, but segfaults if passed in value is null.  Boy, is my C rusty.
+        cdef uint8** dbuf = <uint8**>malloc(sizeof(uint8))
+        # return value is pointer to uint8[]
+        cdef uint32 count = self.manager.GetAllScenes(dbuf)
+        cdef uint8* p
+        if count:
+            try:
+                data = set()
+                p = dbuf[0] # p is now pointing at first element of array
+                for i in range(0, count):
+                    data.add(p[0])
+                    p += 1
+                retval = tuple(data)
+            finally:
+                # TODO: caller is responsible for deleting returned array via call to delete()
+                pass
+        return retval
+        
+    def createScene(self):
+        '''
+Create a new Scene passing in Scene ID
+
+@return Scene ID used to reference the scene. 0 is failure result.
+@see GetNumScenes, GetAllScenes, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
+       '''
+        return self.manager.CreateScene()
+
+    def removeScene(self, homeid):
+        '''
+Remove an existing Scene.
+
+@param sceneId is an integer representing the unique Scene ID to be removed.
+@return True if scene was removed.
+@see GetNumScenes, GetAllScenes, CreateScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
+        '''
+        return self.manager.RemoveScene(homeid)
+
