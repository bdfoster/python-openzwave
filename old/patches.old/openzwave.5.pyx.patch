--- python-openzwave-20120828.orig/openzwave.pyx	2012-08-30 15:51:07.000000000 +0200
+++ python-openzwave-20120828//openzwave.pyx	2012-08-30 17:32:34.000000000 +0200
@@ -1203,6 +1203,10 @@
 if the Z-Wave message actually failed to get through.  Notification callbacks will be sent in both cases.
 @param id the ID of a value.
 @param value the value to set
+@return an integer representing the result of the operation 
+	0 : The C method fails
+	1 : The C method succeed
+	2 : Can't find id in the map
         '''
         cdef float type_float
         cdef bint type_bool
@@ -1211,29 +1215,33 @@
         cdef int16 type_short
         cdef string type_string
 
+        cret = 2
+		
         if values_map.find(id) != values_map.end(): 
             datatype = PyValueTypes[values_map.at(id).GetType()]
             
             if datatype == "Bool":
                 type_bool = value
-                self.manager.SetValue(values_map.at(id), type_bool)
+                cret = self.manager.SetValue(values_map.at(id), type_bool)
             elif datatype == "Byte":
                 type_byte = value
-                self.manager.SetValue(values_map.at(id), type_byte)            
+                cret = self.manager.SetValue(values_map.at(id), type_byte)            
             elif datatype == "Decimal":
                 type_float = value
-                self.manager.SetValue(values_map.at(id), type_float)
+                cret = self.manager.SetValue(values_map.at(id), type_float)
             # TODO: this gives me an "ambiguous overloaded method", I don't understand why.
             #elif datatype == "Int":
             #    type_int = value
-            #    self.manager.SetValue(values_map.at(id), type_int)
+            #    cret = self.manager.SetValue(values_map.at(id), int32(type_int))
             #elif datatype == "Short":
             #    type_short = value
-            #    self.manager.SetValue(values_map.at(id), type_short)
+            #    cret = self.manager.SetValue(values_map.at(id), type_short)
             elif datatype == "String":
                 type_string = string(value)
-                self.manager.SetValue(values_map.at(id), type_string)
-                
+                cret = self.manager.SetValue(values_map.at(id), type_string)
+
+        return cret
+         
 #        string GetValueLabel(ValueID& valueid)
 #        void SetValueLabel(ValueID& valueid, string value)
 #        string GetValueUnits(ValueID& valueid)
@@ -1255,7 +1263,7 @@
 #        bint GetValueListItems(ValueID& valueid, vector<string>* o_value)
 #        bint SetValue(ValueID& valueid, uint8 value)
 #        bint SetValue(ValueID& valueid, float value)
-#        bint SetValue(ValueID& valueid, uint32 value)
+#        bint SetValue(ValueID& valueid, uint16 value)
 #        bint SetValue(ValueID& valueid, uint32 value)
 #        bint SetValue(ValueID& valueid, string value)
 #        bint SetValueListSelection(ValueID& valueid, string selecteditem)
