--- python-openzwave-20120828.orig/openzwave.pyx	2012-08-31 12:17:32.000000000 +0200
+++ python-openzwave-20120828//openzwave.pyx	2012-08-31 16:25:30.000000000 +0200
@@ -1,3 +1,26 @@
+""" This file is part of B{py-openzwave} project (U{https://github.com/maartendamen/py-openzwave}).
+
+License
+=======
+
+B{py-openzwave} is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+B{py-openzwave} is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with py-openzwave. If not, see U{http://www.gnu.org/licenses}.
+
+@author: maartendamen
+@author: bibi21000 <bibi21000@gmail.com>
+@license: GPL(v3)
+"""
+
 from cython.operator cimport dereference as deref
 from libcpp.map cimport map, pair
 
@@ -133,7 +156,7 @@
         bint EnablePoll(ValueID& valueId, uint8 intensity)
         bint DisablePoll(ValueID& valueId)
         bint isPolled(ValueID& valueId)
-        void SetPollIntensity( ValueID& valueId, intensity = 1 )
+        void SetPollIntensity( ValueID& valueId, uint8 intensity)
         # // Node Information
         bint RefreshNodeInfo(uint32 homeid, uint8 nodeid)
         void RequestNodeState(uint32 homeid, uint8 nodeid)
@@ -231,8 +254,8 @@
         uint8 GetAllScenes(uint8** sceneIds)
         uint8 CreateScene()
         bint RemoveScene(uint8 sceneId)
-        bint AddSceneValue(uint8 sceneId, ValueID& valueId, bint value)
-        bint AddSceneValue(uint8 sceneId, ValueID& valueId, uint8 value)
+        bint AddSceneValue( uint8 sceneId, ValueID& valueId, bint value)
+        bint AddSceneValue( uint8 sceneId, ValueID& valueId, uint8 value)
         bint AddSceneValue( uint8 sceneId, ValueID& valueId, float value )
         bint AddSceneValue( uint8 sceneId, ValueID& valueId, int32 value )
         bint AddSceneValue( uint8 sceneId, ValueID& valueId, int16 value )
@@ -261,7 +284,6 @@
         void SetSceneLabel( uint8 sceneId, string value )
         bint SceneExists( uint8 sceneId )
         bint ActivateScene( uint8 sceneId )
-        
 
 cdef extern from "Manager.h" namespace "OpenZWave::Manager":
     Manager* Create()
@@ -719,7 +741,9 @@
 # detect status changes.
 #
     def getPollInterval(self):
-        '''Get the time period between polls of a nodes state'''
+        '''
+Get the time period between polls of a nodes state
+        '''
         return self.manager.GetPollInterval()
 
     def setPollInterval(self, milliseconds, bIntervalBetweenPolls ):
@@ -740,9 +764,54 @@
         '''
         self.manager.SetPollInterval(milliseconds, bIntervalBetweenPolls)
 
-#        bint EnablePoll(ValueID& valueId)
-#        bint DisablePoll(ValueID& valueId)
-#        bint isPolled(ValueID& valueId)
+    def enablePoll(self, id, intensity):
+        '''
+Enable the polling of a device's state.
+
+@param id the ID of a value.
+@param intensity the intensity of the poll
+@return True if polling was enabled.
+        '''
+        if values_map.find(id) != values_map.end(): 
+            return self.manager.EnablePoll(values_map.at(id), intensity)
+        else :
+            return False
+
+    def disablePoll(self, id):
+        '''
+Disable the polling of a device's state.
+
+@param id the ID of a value.
+@return True if polling was disabled.
+        '''
+        if values_map.find(id) != values_map.end(): 
+            return self.manager.DisablePoll(values_map.at(id))
+        else :
+            return False
+
+    def isPolled(self, id):
+        '''
+Determine the polling of a device's state.
+
+@param id the ID of a value.
+@return True if polling is active.
+        '''
+        if values_map.find(id) != values_map.end(): 
+            return self.manager.isPolled(values_map.at(id))
+        else :
+            return False
+
+    def setPollIntensity(self, id, intensity):
+        '''
+Set the frequency of polling (0=none, 1=every time through the list, 2-every other time, etc)
+
+@param id the ID of a value.
+@param intensity the intensity of the poll
+@return True if polling is active.
+        '''
+        if values_map.find(id) != values_map.end(): 
+            self.manager.SetPollIntensity(values_map.at(id), intensity)
+
 #
 # -----------------------------------------------------------------------------
 # Node information
@@ -875,6 +944,7 @@
         '''
 Retrieve a list of neighbor node ids
 
+
 @param homeId The Home ID of the Z-Wave controller that manages the node.
 @param nodeId The ID of the node to query.
 @return A tuple containing neighboring node IDs
@@ -885,11 +955,12 @@
         # return value is pointer to uint8[]
         cdef uint32 count = self.manager.GetNodeNeighbors(homeid, nodeid, dbuf)
         cdef uint8* p
+        cdef uint32 start = 0
         if count:
             try:
                 data = set()
                 p = dbuf[0] # p is now pointing at first element of array
-                for i in range(0, count):
+                for i in range(start, count):
                     data.add(p[0])
                     p += 1
                 retval = tuple(data)
@@ -1427,11 +1498,12 @@
         # return value is pointer to uint8[]
         cdef uint32 count = self.manager.GetAssociations(homeid, nodeid, groupidx, dbuf)
         cdef uint8* p
+        cdef uint32 start = 0
         if count:
             try:
                 data = set()
                 p = dbuf[0] # p is now pointing at first element of array
-                for i in range(0, count):
+                for i in range(start, count):
                     data.add(p[0])
                     p += 1
                 retval = tuple(data)
@@ -1579,15 +1651,6 @@
        '''
         return self.manager.GetNumScenes()
 
-    def getNumScenes(self):
-        '''
-Gets the number of scenes that have been defined
-
-@return The number of scenes.
-@see GetAllScenes, CreateScene, RemoveScene, AddSceneValue, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
-       '''
-        return self.manager.GetNumScenes()
-
     def getAllScenes(self):
         '''
 Gets a list of all the SceneIds
@@ -1601,11 +1664,12 @@
         # return value is pointer to uint8[]
         cdef uint32 count = self.manager.GetAllScenes(dbuf)
         cdef uint8* p
+        cdef uint32 start = 0
         if count:
             try:
                 data = set()
                 p = dbuf[0] # p is now pointing at first element of array
-                for i in range(0, count):
+                for i in range(start, count):
                     data.add(p[0])
                     p += 1
                 retval = tuple(data)
@@ -1633,3 +1697,143 @@
         '''
         return self.manager.RemoveScene(homeid)
 
+    def addSceneValue(self, uint8 sceneid, id, value):
+        '''
+Add a ValueID of value to an existing scene.
+
+Actually I don't know how to use it. So do nothing.
+
+@param sceneId the ID of a scene.
+@param valueId the ID of a value.
+@param value the value to set
+@return an integer representing the result of the operation 
+    0 : The C method fails
+    1 : The C method succeed
+    2 : Can't find id in the map
+@see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
+        '''
+        cdef float type_float
+        cdef bint type_bool
+        cdef uint8 type_byte
+        cdef int32 type_int
+        cdef int16 type_short
+        cdef string type_string
+        ret = 2
+        if values_map.find(id) != values_map.end(): 
+            datatype = PyValueTypes[values_map.at(id).GetType()]            
+            if datatype == "Bool":
+                type_bool = value
+                cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_bool)
+                ret = 1 if cret else 0
+            elif datatype == "Byte":
+                type_byte = value
+                cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_byte)            
+                ret = 1 if cret else 0
+            elif datatype == "Decimal":
+                type_float = value
+                cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_float)
+                ret = 1 if cret else 0
+            elif datatype == "Int":
+                type_int = value
+                cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_int)
+                ret = 1 if cret else 0
+            elif datatype == "Short":
+                type_short = value
+                cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_short)
+                ret = 1 if cret else 0
+            elif datatype == "String":
+                type_string = string(value)
+                cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_string)
+                ret = 1 if cret else 0
+        return ret
+        
+    def setSceneValue(self, uint8 sceneid, id, value):
+        '''
+Set a value to an existing scene's ValueID.
+
+@param sceneId the ID of a scene.
+@param id the ID of a value.
+@param value the value to set
+@return an integer representing the result of the operation 
+    0 : The C method fails
+    1 : The C method succeed
+    2 : Can't find id in the map
+@see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
+        '''
+        cdef float type_float
+        cdef bint type_bool
+        cdef uint8 type_byte
+        cdef int32 type_int
+        cdef int16 type_short
+        cdef string type_string
+        ret = 2
+        if values_map.find(id) != values_map.end(): 
+            datatype = PyValueTypes[values_map.at(id).GetType()]            
+            if datatype == "Bool":
+                type_bool = value
+                cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_bool)
+                ret = 1 if cret else 0
+            elif datatype == "Byte":
+                type_byte = value
+                cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_byte)            
+                ret = 1 if cret else 0
+            elif datatype == "Decimal":
+                type_float = value
+                cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_float)
+                ret = 1 if cret else 0
+            elif datatype == "Int":
+                type_int = value
+                cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_int)
+                ret = 1 if cret else 0
+            elif datatype == "Short":
+                type_short = value
+                cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_short)
+                ret = 1 if cret else 0
+            elif datatype == "String":
+                type_string = string(value)
+                cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_string)
+                ret = 1 if cret else 0
+        return ret
+
+    def getSceneLabel(self, sceneid):
+        '''
+Returns a label for the particular scene.
+
+@param sceneId the ID of a scene.
+@param value the value to set
+@return The label string.
+@see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
+        '''
+        cdef string c_string = self.manager.GetSceneLabel(sceneid)
+        return c_string.c_str()
+
+    def setSceneLabel(self, sceneid, char *label):
+        '''
+Sets a label for the particular scene.
+
+@param sceneId the ID of a scene.
+@param value The new value of the label.
+@see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
+        '''
+        self.manager.SetSceneLabel(sceneid, string(label))
+        
+    def sceneExists(self, sceneid):
+        '''
+Check if a Scene ID is defined.
+
+@param sceneId the ID of a scene.
+@return true if Scene ID exists.
+@see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
+        '''
+        return self.manager.SceneExists(sceneid)
+
+    def activateScene(self, sceneid):
+        '''
+Activate given scene to perform all its actions.
+
+@param sceneId the ID of a scene.
+@return true if it is successful.
+@see GetNumScenes, GetAllScenes, CreateScene, RemoveScene, RemoveSceneValue, SceneGetValues, SceneGetValueAsBool, SceneGetValueAsByte, SceneGetValueAsFloat, SceneGetValueAsInt, SceneGetValueAsShort, SceneGetValueAsString, SetSceneValue, GetSceneLabel, SetSceneLabel, SceneExists, ActivateScene
+        '''
+        return self.manager.ActivateScene(sceneid)
+
