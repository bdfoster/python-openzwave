--- python-openzwave-20120828.orig/openzwave.pyx	2012-09-01 02:47:08.000000000 +0200
+++ python-openzwave-20120828/openzwave.pyx	2012-09-01 18:11:39.000000000 +0200
@@ -23,12 +23,265 @@
 
 from cython.operator cimport dereference as deref
 from libcpp.map cimport map, pair
-from libc.stdint import int8_t, int16_t, int32_t, uint8_t, uint32_t, uint64_t
-cimport mylibc
-cimport libopenzwave
+from libcppcimport import bool
+#from libc.stdint import int8_t, int16_t, int32_t, uint8_t, uint32_t, uint64_t
+from mylibc cimport string, malloc, free
 
 PYLIBRARY = 0.1
 
+ctypedef unsigned int uint32_t
+ctypedef unsigned int uint64_t
+ctypedef int int32_t
+ctypedef long int16_t
+ctypedef char int8_t
+ctypedef unsigned char uint8_t
+ctypedef signed char sint8_t
+
+cdef extern from "Options.h" namespace "OpenZWave":
+    cdef cppclass Options:
+        bint Lock()
+
+cdef extern from "Python.h":
+    void PyEval_InitThreads()
+
+cdef extern from "Options.h" namespace "OpenZWave::Options":
+    Options* Create(string a, string b, string c)
+
+cdef extern from *:
+    ctypedef char* const_notification "OpenZWave::Notification const*"
+
+cdef extern from "Notification.h" namespace "OpenZWave::Notification":
+
+   cdef enum NotificationType:
+        Type_ValueAdded = 0                     # A new node value has been added to OpenZWave's list. These notifications occur after a node has been discovered, and details of its command classes have been received.  Each command class may generate one or more values depending on the complexity of the item being represented.
+        Type_ValueRemoved = 1                   # A node value has been removed from OpenZWave's list.  This only occurs when a node is removed.
+        Type_ValueChanged = 2                   # A node value has been updated from the Z-Wave network and it is different from the previous value.
+        Type_ValueRefreshed = 3                 # A node value has been updated from the Z-Wave network.
+        Type_Group = 4                          # The associations for the node have changed. The application should rebuild any group information it holds about the node.
+        Type_NodeNew = 5                        # A new node has been found (not already stored in zwcfg*.xml file)
+        Type_NodeAdded = 6                      # A new node has been added to OpenZWave's list.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself.
+        Type_NodeRemoved = 7                    # A node has been removed from OpenZWave's list.  This may be due to a device being removed from the Z-Wave network, or because the application is closing.
+        Type_NodeProtocolInfo = 8               # Basic node information has been receievd, such as whether the node is a listening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description.
+        Type_NodeNaming = 9                     # One of the node names has changed (name, manufacturer, product).
+        Type_NodeEvent = 10                     # A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification.
+        Type_PollingDisabled = 11               # Polling of a node has been successfully turned off by a call to Manager::DisablePoll
+        Type_PollingEnabled = 12                # Polling of a node has been successfully turned on by a call to Manager::EnablePoll
+        Type_CreateButton = 13                  # Handheld controller button event created 
+        Type_DeleteButton = 14                  # Handheld controller button event deleted 
+        Type_ButtonOn = 15                      # Handheld controller button on pressed event
+        Type_ButtonOff = 16                     # Handheld controller button off pressed event 
+        Type_DriverReady = 17                   # A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods.
+        Type_DriverFailed = 18                  # Driver failed to load
+        Type_DriverReset = 19                   # All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications.
+        Type_MsgComplete = 20                   # The last message that was sent is now complete.
+        Type_EssentialNodeQueriesComplete = 21  # The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages.
+        Type_NodeQueriesComplete = 22           # All the initialisation queries on a node have been completed.
+        Type_AwakeNodesQueried = 23             # All awake nodes have been queried, so client application can expected complete data for these nodes.
+        Type_AllNodesQueried = 24               # All nodes have been queried, so client application can expected complete data.
+        Type_Error = 25                         # An error has occured that we need to report.
+
+cdef extern from "ValueID.h" namespace "OpenZWave":
+
+    cdef enum ValueGenre:
+        ValueGenre_Basic = 0                # The 'level' as controlled by basic commands.  Usually duplicated by another command class.
+        ValueGenre_User = 1                 # Basic values an ordinary user would be interested in. 
+        ValueGenre_Config = 2               # Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead.
+        ValueGenre_System = 3               # Values of significance only to users who understand the Z-Wave protocol.
+        ValueGenre_Count = 4                # A count of the number of genres defined.  Not to be used as a genre itself.
+
+    cdef enum ValueType:
+        ValueType_Bool = 0                  # Boolean, true or false
+        ValueType_Byte = 1                  # 8-bit unsigned value
+        ValueType_Decimal = 2               # Represents a non-integer value as a string, to avoid floating point accuracy issues.
+        ValueType_Int = 3                   # 32-bit signed value
+        ValueType_List = 4                  # List from which one item can be selected
+        ValueType_Schedule = 5              # Complex type used with the Climate Control Schedule command class
+        ValueType_Short = 6                 # 16-bit signed value
+        ValueType_String = 7                # Text string
+        ValueType_Button = 8                # A write-only value that is the equivalent of pressing a button to send a command to a device
+        ValueType_Max = ValueType_Button    # The highest-number type defined.  Not to be used as a type itself.
+
+    cdef cppclass ValueID:
+        uint32_t GetHomeId()
+        uint8_t GetNodeId()
+        ValueGenre GetGenre()
+        uint8_t GetCommandClassId()
+        uint8_t GetInstance()
+        uint8_t GetIndex()
+        ValueType GetType()
+        uint64_t GetId()
+
+cdef extern from "Notification.h" namespace "OpenZWave":
+
+    cdef cppclass Notification:
+        NotificationType GetType()
+        uint32_t GetHomeId()
+        uint8_t GetNodeId()
+        ValueID& GetValueID()
+        uint8_t GetGroupIdx()
+        uint8_t GetEvent()
+        uint8_t GetButtonId()
+        uint8_t GetErrorCode()
+        uint8_t GetByte()
+
+ctypedef void (*pfnOnNotification_t)(const_notification _pNotification, void* _context )
+
+cdef extern from "Manager.h" namespace "OpenZWave":
+
+    cdef cppclass Manager:
+        # // Configuration
+        void WriteConfig(uint32_t homeid)
+        # Options* GetOptions()
+        # // Drivers
+        bint AddDriver(string serialport)
+        bint RemoveDriver(string controllerPath)
+        uint8_t GetControllerNodeId(uint32_t homeid)
+        bint IsPrimaryController(uint32_t homeid)
+        bint IsStaticUpdateController(uint32_t homeid)
+        bint IsBridgeController(uint32_t homeid)
+        string GetLibraryVersion(uint32_t homeid)
+        string GetLibraryTypeName(uint32_t homeid)
+        int32_t GetSendQueueCount( uint32_t homeId )
+        void LogDriverStatistics( uint32_t homeId )
+        # // Polling
+        uint32_t GetPollInterval()
+        void SetPollInterval(uint32_t milliseconds, bint bIntervalBetweenPolls)
+        bint EnablePoll(ValueID& valueId, uint8_t intensity)
+        bint DisablePoll(ValueID& valueId)
+        bint isPolled(ValueID& valueId)
+        void SetPollIntensity( ValueID& valueId, uint8_t intensity)
+        # // Node Information
+        bint RefreshNodeInfo(uint32_t homeid, uint8_t nodeid)
+        void RequestNodeState(uint32_t homeid, uint8_t nodeid)
+        void RequestNodeDynamic( uint32_t homeId, uint8_t nodeId )
+        bint IsNodeListeningDevice(uint32_t homeid, uint8_t nodeid)
+        bint IsNodeFrequentListeningDevice( uint32_t homeId, uint8_t nodeId )
+        bint IsNodeBeamingDevice( uint32_t homeId, uint8_t nodeId )
+        bint IsNodeRoutingDevice(uint32_t homeid, uint8_t nodeid)
+        bint IsNodeSecurityDevice( uint32_t homeId, uint8_t nodeId )
+        uint32_t GetNodeMaxBaudRate(uint32_t homeid, uint8_t nodeid)
+        uint8_t GetNodeVersion(uint32_t homeid, uint8_t nodeid)
+        uint8_t GetNodeSecurity(uint32_t homeid, uint8_t nodeid)
+        uint8_t GetNodeBasic(uint32_t homeid, uint8_t nodeid)
+        uint8_t GetNodeGeneric(uint32_t homeid, uint8_t nodeid)
+        uint8_t GetNodeSpecific(uint32_t homeid, uint8_t nodeid)
+        string GetNodeType(uint32_t homeid, uint8_t nodeid)
+        uint32_t GetNodeNeighbors(uint32_t homeid, uint8_t nodeid, uint8_t** nodeNeighbors)
+        string GetNodeManufacturerName(uint32_t homeid, uint8_t nodeid)
+        string GetNodeProductName(uint32_t homeid, uint8_t nodeid)
+        string GetNodeName(uint32_t homeid, uint8_t nodeid)
+        string GetNodeLocation(uint32_t homeid, uint8_t nodeid)
+        string GetNodeManufacturerId(uint32_t homeid, uint8_t nodeid)
+        string GetNodeProductType(uint32_t homeid, uint8_t nodeid)
+        string GetNodeProductId(uint32_t homeid, uint8_t nodeid)
+        void SetNodeManufacturerName(uint32_t homeid, uint8_t nodeid, string manufacturerName)
+        void SetNodeProductName(uint32_t homeid, uint8_t nodeid, string productName)
+        void SetNodeName(uint32_t homeid, uint8_t nodeid, string productName)
+        void SetNodeLocation(uint32_t homeid, uint8_t nodeid, string location)
+        void SetNodeOn(uint32_t homeid, uint8_t nodeid)
+        void SetNodeOff(uint32_t homeid, uint8_t nodeid)
+        void SetNodeLevel(uint32_t homeid, uint8_t nodeid, uint8_t level)
+        bint IsNodeInfoReceived(uint32_t homeid, uint8_t nodeid)
+        bint GetNodeClassInformation(uint32_t homeid, uint8_t nodeid, uint8_t commandClassId, string className = NULL, uint8_t *classVersion = NULL)
+        # // Values
+        string GetValueLabel(ValueID& valueid)
+        void SetValueLabel(ValueID& valueid, string value)
+        string GetValueUnits(ValueID& valueid)
+        void SetValueUnits(ValueID& valueid, string value)
+        string GetValueHelp(ValueID& valueid)
+        void SetValueHelp(ValueID& valueid, string value)
+        uint32_t GetValueMin(ValueID& valueid)
+        uint32_t GetValueMax(ValueID& valueid)
+        bint IsValueReadOnly(ValueID& valueid)
+        bint IsValueWriteOnly(ValueID& valueid)
+        bint IsValueSet(ValueID& valueid)
+        bint IsValuePolled( ValueID& valueid )
+        bint GetValueAsBool(ValueID& valueid, bint* o_value)
+        bint GetValueAsByte(ValueID& valueid, uint8_t* o_value)
+        bint GetValueAsFloat(ValueID& valueid, float* o_value)
+        bint GetValueAsInt(ValueID& valueid, uint32_t* o_value)
+        bint GetValueAsShort(ValueID& valueid, uint32_t* o_value)
+        bint GetValueAsString(ValueID& valueid, string* o_value)
+        bint GetValueListSelection(ValueID& valueid, string* o_value)
+        bint GetValueListSelection(ValueID& valueid, uint32_t* o_value)
+        #bint GetValueListItems(ValueID& valueid, vector<string>* o_value)
+        bint SetValue(ValueID& valueid, bint value)
+        bint SetValue(ValueID& valueid, uint8_t value)
+        bint SetValue(ValueID& valueid, float value)
+        bint SetValue(ValueID& valueid, int32_t value)
+        bint SetValue(ValueID& valueid, int16_t value)
+        bint SetValue(ValueID& valueid, string value)
+        bint SetValueListSelection(ValueID& valueid, string selecteditem)
+        bint RefreshValue(ValueID& valueid)
+        void SetChangeVerified(ValueID& valueid, bint verify)
+        bint PressButton(ValueID& valueid)
+        bint ReleaseButton(ValueID& valueid)
+        # // Climate Control
+        uint8_t GetNumSwitchPoints(ValueID& valueid)
+        bint SetSwitchPoint(ValueID& valueid, uint8_t hours, uint8_t minutes, uint8_t setback)
+        bint RemoveSwitchPoint(ValueID& valueid, uint8_t hours, uint8_t minutes)
+        bint ClearSwitchPoints(ValueID& valueid)
+        bint GetSwitchPoint(ValueID& valueid, uint8_t idx, uint8_t* o_hours, uint8_t* o_minutes, int8_t* o_setback)
+        # // SwitchAll
+        void SwitchAllOn(uint32_t homeid)
+        void SwitchAllOff(uint32_t homeid)
+        # // Configuration Parameters
+        bint SetConfigParam(uint32_t homeid, uint8_t nodeid, uint8_t param, uint32_t value, uint8_t size = 2)
+        void RequestConfigParam(uint32_t homeid, uint8_t nodeid, uint8_t aram)
+        void RequestAllConfigParams(uint32_t homeid, uint8_t nodeid)
+        # // Groups
+        uint8_t GetNumGroups(uint32_t homeid, uint8_t nodeid)
+        uint32_t GetAssociations(uint32_t homeid, uint8_t nodeid, uint8_t groupidx, uint8_t** o_associations)
+        uint8_t GetMaxAssociations(uint32_t homeid, uint8_t nodeid, uint8_t groupidx)
+        string GetGroupLabel(uint32_t homeid, uint8_t nodeid, uint8_t groupidx)
+        void AddAssociation(uint32_t homeid, uint8_t nodeid, uint8_t groupidx, uint8_t targetnodeid)
+        void RemoveAssociation(uint32_t homeid, uint8_t nodeid, uint8_t groupidx, uint8_t targetnodeid)
+        bint AddWatcher(pfnOnNotification_t notification, void* context)
+        bint RemoveWatcher(pfnOnNotification_t notification, void* context)
+        # // Controller Commands
+        void ResetController(uint32_t homeid)
+        void SoftReset(uint32_t homeid)
+        #bint BeginControllerCommand(uint32_t homeid, Driver::ControllerCommand _command, Driver::pfnControllerCallback_t _callback = NULL, void* _context = NULL, bool _highPower = false, uint8_t _nodeId = 0xff )
+        bint CancelControllerCommand(uint32_t homeid)
+        # // Scene commands
+        uint8_t GetNumScenes()
+        uint8_t GetAllScenes(uint8_t** sceneIds)
+        uint8_t CreateScene()
+        bint RemoveScene(uint8_t sceneId)
+        bint AddSceneValue( uint8_t sceneId, ValueID& valueId, bint value)
+        bint AddSceneValue( uint8_t sceneId, ValueID& valueId, uint8_t value)
+        bint AddSceneValue( uint8_t sceneId, ValueID& valueId, float value )
+        bint AddSceneValue( uint8_t sceneId, ValueID& valueId, int32_t value )
+        bint AddSceneValue( uint8_t sceneId, ValueID& valueId, int16_t value )
+        bint AddSceneValue( uint8_t sceneId, ValueID& valueId, string value )
+        bint AddSceneValueListSelection( uint8_t sceneId, ValueID& valueId, string value )
+        bint AddSceneValueListSelection( uint8_t sceneId, ValueID& valueId, int32_t value )
+        bint RemoveSceneValue( uint8_t sceneId, ValueID& valueId )
+        #int SceneGetValues( uint8_t sceneId, vector<ValueID>* o_value )
+        bint SceneGetValueAsBool( uint8_t sceneId, ValueID& valueId, bint value )
+        bint SceneGetValueAsByte( uint8_t sceneId, ValueID& valueId, uint8_t* o_value )
+        bint SceneGetValueAsFloat( uint8_t sceneId, ValueID& valueId, float* o_value )
+        bint SceneGetValueAsInt( uint8_t sceneId, ValueID& valueId, int32_t* o_value )
+        bint SceneGetValueAsShort( uint8_t sceneId, ValueID& valueId, int16_t* o_value )
+        bint SceneGetValueAsString( uint8_t sceneId, ValueID& valueId, string* o_value )
+        bint SceneGetValueListSelection( uint8_t sceneId, ValueID& valueId, string* o_value )
+        bint SceneGetValueListSelection( uint8_t sceneId, ValueID& valueId, int32_t* o_value )
+        bint SetSceneValue( uint8_t sceneId, ValueID& valueId, bint value )
+        bint SetSceneValue( uint8_t sceneId, ValueID& valueId, uint8_t value )
+        bint SetSceneValue( uint8_t sceneId, ValueID& valueId, float value )
+        bint SetSceneValue( uint8_t sceneId, ValueID& valueId, int32_t value )
+        bint SetSceneValue( uint8_t sceneId, ValueID& valueId, int16_t value )
+        bint SetSceneValue( uint8_t sceneId, ValueID& valueId, string value )
+        bint SetSceneValueListSelection( uint8_t sceneId, ValueID& valueId, string value )
+        bint SetSceneValueListSelection( uint8_t sceneId, ValueID& valueId, int32_t value )
+        string GetSceneLabel( uint8_t sceneId )
+        void SetSceneLabel( uint8_t sceneId, string value )
+        bint SceneExists( uint8_t sceneId )
+        bint ActivateScene( uint8_t sceneId )
+
+cdef extern from "Manager.h" namespace "OpenZWave::Manager":
+    Manager* Create()
+    Manager* Get()
 
 cdef class PyOptions:
     cdef Options *options
