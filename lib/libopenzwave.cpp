/* Generated by Cython 0.14.1 on Mon Sep 10 05:14:24 2012 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#else

#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
  #define PyDict_Contains(d,o)   PySequence_Contains(d,o)
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   PyInt_AsLong(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif

#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)

#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#ifdef __cplusplus
#define __PYX_EXTERN_C extern "C"
#else
#define __PYX_EXTERN_C extern
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE_API__libopenzwave
#include <utility>
#include <map>
#include <string>
#include "stdlib.h"
#include <new>
#include "Driver.h"
#include "ValueID.h"
#include "Notification.h"
#include "Options.h"
#include "Manager.h"

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || defined(__INTEL_COMPILER)
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
/* Test for GCC > 2.95 */
#if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
#define likely(x)   __builtin_expect(!!(x), 1)
#define unlikely(x) __builtin_expect(!!(x), 0)
#else /* __GNUC__ > 2 ... */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "libopenzwave.pyx",
};

typedef unsigned int __pyx_t_6mylibc_uint32;

typedef unsigned long __pyx_t_6mylibc_uint64;

typedef int __pyx_t_6mylibc_int32;

typedef short __pyx_t_6mylibc_int16;

typedef unsigned char __pyx_t_6mylibc_uint8;

typedef signed char __pyx_t_6mylibc_int8;

/* Type declarations */

typedef struct OpenZWave::Driver::DriverData __pyx_t_6driver_DriverData_t;

typedef void (*__pyx_t_12notification_pfnOnNotification_t)(OpenZWave::Notification const*, void *);

/* "libopenzwave.pyx":346
 *     cdef DriverData data
 * 
 * cdef class PyManager:             # <<<<<<<<<<<<<<
 *     '''
 * The main public interface to OpenZWave.
 */

struct __pyx_obj_12libopenzwave_PyManager {
  PyObject_HEAD
  OpenZWave::Manager *manager;
  PyObject *_watcherCallback;
};

/* "libopenzwave.pyx":203
 *     Manager* Get()
 * 
 * cdef class PyOptions:             # <<<<<<<<<<<<<<
 *     cdef Options *options
 * 
 */

struct __pyx_obj_12libopenzwave_PyOptions {
  PyObject_HEAD
  OpenZWave::Options *options;
};

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif

#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct * __Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
  end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
  }
  #define __Pyx_RefNannySetupContext(name)           void *__pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
  #define __Pyx_RefNannyFinishContext()           __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r) __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r) __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r) __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XDECREF(r) do { if((r) != NULL) {__Pyx_DECREF(r);} } while(0)
#else
  #define __Pyx_RefNannySetupContext(name)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);} } while(0)
#define __Pyx_XGOTREF(r) do { if((r) != NULL) {__Pyx_GOTREF(r);} } while(0)

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,     const char* function_name); /*proto*/


static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}


#define __Pyx_GetItemInt_List(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_List_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
            PyObject *r = PyList_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyList_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyList_GET_ITEM(o, PyList_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

#define __Pyx_GetItemInt_Tuple(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Tuple_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyTuple_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyTuple_GET_ITEM(o, PyTuple_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}


#define __Pyx_GetItemInt(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i) {
    PyObject *r;
    if (PyList_CheckExact(o) && ((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (PyTuple_CheckExact(o) && ((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (Py_TYPE(o)->tp_as_sequence && Py_TYPE(o)->tp_as_sequence->sq_item && (likely(i >= 0))) {
        r = PySequence_GetItem(o, i);
    }
    else {
        r = __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
    }
    return r;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list); /*proto*/

static PyObject *__Pyx_FindPy2Metaclass(PyObject *bases); /*proto*/

static PyObject *__Pyx_CreateClass(PyObject *bases, PyObject *dict, PyObject *name,
                                   PyObject *modname); /*proto*/

#define __pyx_binding_PyCFunctionType_USED 1

typedef struct {
    PyCFunctionObject func;
} __pyx_binding_PyCFunctionType_object;

static PyTypeObject __pyx_binding_PyCFunctionType_type;
static PyTypeObject *__pyx_binding_PyCFunctionType = NULL;

static PyObject *__pyx_binding_PyCFunctionType_NewEx(PyMethodDef *ml, PyObject *self, PyObject *module); /* proto */
#define __pyx_binding_PyCFunctionType_New(ml, self) __pyx_binding_PyCFunctionType_NewEx(ml, self, NULL)

static int __pyx_binding_PyCFunctionType_init(void); /* proto */

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

#ifndef __PYX_FORCE_INIT_THREADS
  #if PY_VERSION_HEX < 0x02040200
    #define __PYX_FORCE_INIT_THREADS 1
  #else
    #define __PYX_FORCE_INIT_THREADS 0
  #endif
#endif

static void __Pyx_WriteUnraisable(const char *name); /*proto*/

static void __Pyx_AddTraceback(const char *funcname); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/
/* Module declarations from libcpp.utility */

/* Module declarations from libcpp.map */

/* Module declarations from libcpp */

/* Module declarations from mylibc */

/* Module declarations from driver */

/* Module declarations from values */

/* Module declarations from notification */

/* Module declarations from options */

/* Module declarations from libopenzwave */

static PyTypeObject *__pyx_ptype_12libopenzwave_PyOptions = 0;
static PyTypeObject *__pyx_ptype_12libopenzwave_PyManager = 0;
static std::map<__pyx_t_6mylibc_uint64,OpenZWave::ValueID> __pyx_v_12libopenzwave_values_map;
static PyObject *__pyx_f_12libopenzwave_getValueFromType(OpenZWave::Manager *, PyObject *); /*proto*/
static PyObject *__pyx_f_12libopenzwave_addValueId(OpenZWave::ValueID, PyObject *); /*proto*/
static void __pyx_f_12libopenzwave_callback(OpenZWave::Notification const*, void *); /*proto*/
static PyObject *__pyx_f_12libopenzwave_driverData(int __pyx_skip_dispatch); /*proto*/
#define __Pyx_MODULE_NAME "libopenzwave"
static int __pyx_module_is_main_libopenzwave = 0;

/* Implementation of libopenzwave */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ValueError;
static char __pyx_k_1[] = "IsStaticUpdateController";
static char __pyx_k_2[] = "/usr";
static char __pyx_k_3[] = "OZWAVE_CONFIG_DIRECTORY";
static char __pyx_k_4[] = "/usr/local";
static char __pyx_k_5[] = "s_controllerWriteCnt";
static char __pyx_k_6[] = "bIntervalBetweenPolls";
static char __pyx_k_7[] = "IsNodeListeningDevice";
static char __pyx_k_8[] = "IsNodeFrequentListeningDevice";
static char __pyx_k_9[] = "IsNodeSecurityDevice";
static char __pyx_k_10[] = "GetNodeManufacturerName";
static char __pyx_k_11[] = "GetNodeManufacturerId";
static char __pyx_k_12[] = "SetNodeManufacturerName";
static char __pyx_k_13[] = "GetNodeClassInformation";
static char __pyx_k_14[] = "RequestAllConfigParams";
static char __pyx_k_15[] = "call to AddWatcher failed";
static char __pyx_k_17[] = "CancelControllerCommand";
static char __pyx_k_18[] = "\n.. module:: libopenzwave\n\nThis file is part of **py-openzwave** project https://github.com/maartendamen/py-openzwave.\n    :platform: Unix, Windows\n    :sinopsis: openzwave wrapper\n\n.. moduleauthor:: maartendamen\n.. moduleauthor:: bibi21000 aka S\303\251bastien GALLET <bibi21000@gmail.com>\n\nLicense : GPL(v3)\n\n**py-openzwave** is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\n**py-openzwave** is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU General Public License for more details.\nYou should have received a copy of the GNU General Public License\nalong with py-openzwave. If not, see http://www.gnu.org/licenses.\n\n";
static char __pyx_k_19[] = "0.2.1";
static char __pyx_k_20[] = "share/python-openzwave/config";
static char __pyx_k_22[] = "A new node value has been added to OpenZWave's list. These notifications occur after a node has been discovered, and details of its command classes have been received.  Each command class may generate one or more values depending on the complexity of the item being represented.";
static char __pyx_k_25[] = "A node value has been removed from OpenZWave's list.  This only occurs when a node is removed.";
static char __pyx_k_28[] = "A node value has been updated from the Z-Wave network and it is different from the previous value.";
static char __pyx_k_31[] = "A node value has been updated from the Z-Wave network.";
static char __pyx_k_34[] = "The associations for the node have changed. The application should rebuild any group information it holds about the node.";
static char __pyx_k_37[] = "A new node has been found (not already stored in zwcfg*.xml file).";
static char __pyx_k_40[] = "A new node has been added to OpenZWave's list.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself.";
static char __pyx_k_43[] = "A node has been removed from OpenZWave's list.  This may be due to a device being removed from the Z-Wave network, or because the application is closing.";
static char __pyx_k_46[] = "Basic node information has been receievd, such as whether the node is a listening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description.";
static char __pyx_k_49[] = "One of the node names has changed (name, manufacturer, product).";
static char __pyx_k_52[] = "A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification.";
static char __pyx_k_55[] = "Polling of a node has been successfully turned off by a call to Manager::DisablePoll.";
static char __pyx_k_58[] = "Polling of a node has been successfully turned on by a call to Manager::EnablePoll.";
static char __pyx_k_61[] = "Handheld controller button event created.";
static char __pyx_k_64[] = "Handheld controller button event deleted.";
static char __pyx_k_67[] = "Handheld controller button on pressed event.";
static char __pyx_k_70[] = "Handheld controller button off pressed event.";
static char __pyx_k_73[] = "A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods.";
static char __pyx_k_76[] = "Driver failed to load.";
static char __pyx_k_79[] = "All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications.";
static char __pyx_k_82[] = "The last message that was sent is now complete.";
static char __pyx_k_84[] = "EssentialNodeQueriesComplete";
static char __pyx_k_86[] = "The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages.";
static char __pyx_k_89[] = "All the initialisation queries on a node have been completed.";
static char __pyx_k_92[] = "All awake nodes have been queried, so client application can expected complete data for these nodes.";
static char __pyx_k_95[] = "All nodes have been queried, so client application can expected complete data.";
static char __pyx_k_98[] = "An error has occured that we need to report.";
static char __pyx_k__a[] = "a";
static char __pyx_k__b[] = "b";
static char __pyx_k__c[] = "c";
static char __pyx_k_101[] = "The 'level' as controlled by basic commands.  Usually duplicated by another command class.";
static char __pyx_k_104[] = "Basic values an ordinary user would be interested in.";
static char __pyx_k_107[] = "Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead.";
static char __pyx_k_110[] = "Values of significance only to users who understand the Z-Wave protocol";
static char __pyx_k_113[] = "Boolean, true or false";
static char __pyx_k_116[] = "8-bit unsigned value";
static char __pyx_k_119[] = "Represents a non-integer value as a string, to avoid floating point accuracy issues.";
static char __pyx_k_122[] = "32-bit signed value";
static char __pyx_k_125[] = "List from which one item can be selected";
static char __pyx_k_128[] = "Complex type used with the Climate Control Schedule command class";
static char __pyx_k_131[] = "16-bit signed value";
static char __pyx_k_134[] = "Text string";
static char __pyx_k_137[] = "A write-only value that is the equivalent of pressing a button to send a command to a device";
static char __pyx_k_139[] = "COMMAND_CLASS_NO_OPERATION";
static char __pyx_k_140[] = "COMMAND_CLASS_CONTROLLER_REPLICATION";
static char __pyx_k_141[] = "COMMAND_CLASS_APPLICATION_STATUS";
static char __pyx_k_142[] = "COMMAND_CLASS_ZIP_SERVICES";
static char __pyx_k_143[] = "COMMAND_CLASS_ZIP_SERVER";
static char __pyx_k_144[] = "COMMAND_CLASS_SWITCH_BINARY";
static char __pyx_k_145[] = "COMMAND_CLASS_SWITCH_MULTILEVEL";
static char __pyx_k_146[] = "COMMAND_CLASS_SWITCH_ALL";
static char __pyx_k_147[] = "COMMAND_CLASS_SWITCH_TOGGLE_BINARY";
static char __pyx_k_148[] = "COMMAND_CLASS_SWITCH_TOGGLE_MULTILEVEL";
static char __pyx_k_149[] = "COMMAND_CLASS_CHIMNEY_FAN";
static char __pyx_k_150[] = "COMMAND_CLASS_SCENE_ACTIVATION";
static char __pyx_k_151[] = "COMMAND_CLASS_SCENE_ACTUATOR_CONF";
static char __pyx_k_152[] = "COMMAND_CLASS_SCENE_CONTROLLER_CONF";
static char __pyx_k_153[] = "COMMAND_CLASS_ZIP_CLIENT";
static char __pyx_k_154[] = "COMMAND_CLASS_ZIP_ADV_SERVICES";
static char __pyx_k_155[] = "COMMAND_CLASS_SENSOR_BINARY";
static char __pyx_k_156[] = "COMMAND_CLASS_SENSOR_MULTILEVEL";
static char __pyx_k_157[] = "COMMAND_CLASS_ZIP_ADV_SERVER";
static char __pyx_k_158[] = "COMMAND_CLASS_ZIP_ADV_CLIENT";
static char __pyx_k_159[] = "COMMAND_CLASS_METER_PULSE";
static char __pyx_k_160[] = "COMMAND_CLASS_METER_TBL_CONFIG";
static char __pyx_k_161[] = "COMMAND_CLASS_METER_TBL_MONITOR";
static char __pyx_k_162[] = "COMMAND_CLASS_METER_TBL_PUSH";
static char __pyx_k_163[] = "COMMAND_CLASS_THERMOSTAT_HEATING";
static char __pyx_k_164[] = "COMMAND_CLASS_THERMOSTAT_MODE";
static char __pyx_k_165[] = "COMMAND_CLASS_THERMOSTAT_OPERATING_STATE";
static char __pyx_k_166[] = "COMMAND_CLASS_THERMOSTAT_SETPOINT";
static char __pyx_k_167[] = "COMMAND_CLASS_THERMOSTAT_FAN_MODE";
static char __pyx_k_168[] = "COMMAND_CLASS_THERMOSTAT_FAN_STATE";
static char __pyx_k_169[] = "COMMAND_CLASS_CLIMATE_CONTROL_SCHEDULE";
static char __pyx_k_170[] = "COMMAND_CLASS_THERMOSTAT_SETBACK";
static char __pyx_k_171[] = "COMMAND_CLASS_DOOR_LOCK_LOGGING";
static char __pyx_k_172[] = "COMMAND_CLASS_SCHEDULE_ENTRY_LOCK";
static char __pyx_k_173[] = "COMMAND_CLASS_BASIC_WINDOW_COVERING";
static char __pyx_k_174[] = "COMMAND_CLASS_MTP_WINDOW_COVERING";
static char __pyx_k_175[] = "COMMAND_CLASS_MULTI_CHANNEL_V2";
static char __pyx_k_176[] = "COMMAND_CLASS_DOOR_LOCK";
static char __pyx_k_177[] = "COMMAND_CLASS_USER_CODE";
static char __pyx_k_178[] = "COMMAND_CLASS_CONFIGURATION";
static char __pyx_k_179[] = "COMMAND_CLASS_MANUFACTURER_SPECIFIC";
static char __pyx_k_180[] = "COMMAND_CLASS_POWERLEVEL";
static char __pyx_k_181[] = "COMMAND_CLASS_PROTECTION";
static char __pyx_k_182[] = "COMMAND_CLASS_NODE_NAMING";
static char __pyx_k_183[] = "COMMAND_CLASS_FIRMWARE_UPDATE_MD";
static char __pyx_k_184[] = "COMMAND_CLASS_GROUPING_NAME";
static char __pyx_k_185[] = "COMMAND_CLASS_REMOTE_ASSOCIATION_ACTIVATE";
static char __pyx_k_186[] = "COMMAND_CLASS_REMOTE_ASSOCIATION";
static char __pyx_k_187[] = "COMMAND_CLASS_BATTERY";
static char __pyx_k_188[] = "COMMAND_CLASS_WAKE_UP";
static char __pyx_k_189[] = "COMMAND_CLASS_ASSOCIATION";
static char __pyx_k_190[] = "COMMAND_CLASS_VERSION";
static char __pyx_k_191[] = "COMMAND_CLASS_INDICATOR";
static char __pyx_k_192[] = "COMMAND_CLASS_PROPRIETARY";
static char __pyx_k_193[] = "COMMAND_CLASS_LANGUAGE";
static char __pyx_k_194[] = "COMMAND_CLASS_TIME_PARAMETERS";
static char __pyx_k_195[] = "COMMAND_CLASS_GEOGRAPHIC_LOCATION";
static char __pyx_k_196[] = "COMMAND_CLASS_COMPOSITE";
static char __pyx_k_197[] = "COMMAND_CLASS_MULTI_INSTANCE_ASSOCIATION";
static char __pyx_k_198[] = "COMMAND_CLASS_MULTI_CMD";
static char __pyx_k_199[] = "COMMAND_CLASS_ENERGY_PRODUCTION";
static char __pyx_k_200[] = "COMMAND_CLASS_MANUFACTURER_PROPRIETARY";
static char __pyx_k_201[] = "COMMAND_CLASS_SCREEN_MD";
static char __pyx_k_202[] = "COMMAND_CLASS_SCREEN_ATTRIBUTES";
static char __pyx_k_203[] = "COMMAND_CLASS_SIMPLE_AV_CONTROL";
static char __pyx_k_204[] = "COMMAND_CLASS_AV_CONTENT_DIRECTORY_MD";
static char __pyx_k_205[] = "COMMAND_CLASS_AV_RENDERER_STATUS";
static char __pyx_k_206[] = "COMMAND_CLASS_AV_CONTENT_SEARCH_MD";
static char __pyx_k_207[] = "COMMAND_CLASS_SECURITY";
static char __pyx_k_208[] = "COMMAND_CLASS_AV_TAGGING_MD";
static char __pyx_k_209[] = "COMMAND_CLASS_IP_CONFIGURATION";
static char __pyx_k_210[] = "COMMAND_CLASS_ASSOCIATION_COMMAND_CONFIGURATION";
static char __pyx_k_211[] = "COMMAND_CLASS_SENSOR_ALARM";
static char __pyx_k_212[] = "COMMAND_CLASS_SILENCE_ALARM";
static char __pyx_k_213[] = "COMMAND_CLASS_SENSOR_CONFIGURATION";
static char __pyx_k_214[] = "COMMAND_CLASS_NON_INTEROPERABLE";
static char __pyx_k_215[] = "value added";
static char __pyx_k_216[] = "value removed";
static char __pyx_k_217[] = "value changed";
static char __pyx_k_218[] = "groups changed";
static char __pyx_k_219[] = "new node";
static char __pyx_k_220[] = "node added";
static char __pyx_k_221[] = "node removed";
static char __pyx_k_222[] = "node protocol info";
static char __pyx_k_223[] = "node naming";
static char __pyx_k_224[] = "node event";
static char __pyx_k_225[] = "polling disabled";
static char __pyx_k_226[] = "polling enabled";
static char __pyx_k_227[] = "driver ready";
static char __pyx_k_228[] = "driver reset";
static char __pyx_k_229[] = "message complete";
static char __pyx_k_230[] = "node queries complete";
static char __pyx_k_231[] = "awake nodes queried";
static char __pyx_k_232[] = "all nodes queried";
static char __pyx_k__at[] = "at";
static char __pyx_k__id[] = "id";
static char __pyx_k__os[] = "os";
static char __pyx_k__Int[] = "Int";
static char __pyx_k__add[] = "add";
static char __pyx_k__doc[] = "doc";
static char __pyx_k__end[] = "end";
static char __pyx_k__idx[] = "idx";
static char __pyx_k__Bool[] = "Bool";
static char __pyx_k__Byte[] = "Byte";
static char __pyx_k__List[] = "List";
static char __pyx_k__Lock[] = "Lock";
static char __pyx_k__User[] = "User";
static char __pyx_k__find[] = "find";
static char __pyx_k__help[] = "help";
static char __pyx_k__join[] = "join";
static char __pyx_k__name[] = "name";
static char __pyx_k__path[] = "path";
static char __pyx_k__self[] = "self";
static char __pyx_k__type[] = "type";
static char __pyx_k__unit[] = "unit";
static char __pyx_k__Basic[] = "Basic";
static char __pyx_k__Error[] = "Error";
static char __pyx_k__GetId[] = "GetId";
static char __pyx_k__Group[] = "Group";
static char __pyx_k__Short[] = "Short";
static char __pyx_k__c_str[] = "c_str";
static char __pyx_k__event[] = "event";
static char __pyx_k__genre[] = "genre";
static char __pyx_k__hours[] = "hours";
static char __pyx_k__index[] = "index";
static char __pyx_k__label[] = "label";
static char __pyx_k__level[] = "level";
static char __pyx_k__param[] = "param";
static char __pyx_k__range[] = "range";
static char __pyx_k__units[] = "units";
static char __pyx_k__value[] = "value";
static char __pyx_k__Button[] = "Button";
static char __pyx_k__Config[] = "Config";
static char __pyx_k__String[] = "String";
static char __pyx_k__System[] = "System";
static char __pyx_k__exists[] = "exists";
static char __pyx_k__homeId[] = "homeId";
static char __pyx_k__homeid[] = "homeid";
static char __pyx_k__insert[] = "insert";
static char __pyx_k__nodeId[] = "nodeId";
static char __pyx_k__nodeid[] = "nodeid";
static char __pyx_k__setDoc[] = "setDoc";
static char __pyx_k__Decimal[] = "Decimal";
static char __pyx_k__GetType[] = "GetType";
static char __pyx_k__NodeNew[] = "NodeNew";
static char __pyx_k____doc__[] = "__doc__";
static char __pyx_k__manager[] = "manager";
static char __pyx_k__minutes[] = "minutes";
static char __pyx_k__options[] = "options";
static char __pyx_k__sceneid[] = "sceneid";
static char __pyx_k__setback[] = "setback";
static char __pyx_k__valueId[] = "valueId";
static char __pyx_k__ButtonOn[] = "ButtonOn";
static char __pyx_k__GetEvent[] = "GetEvent";
static char __pyx_k__GetGenre[] = "GetGenre";
static char __pyx_k__GetIndex[] = "GetIndex";
static char __pyx_k__PyGenres[] = "PyGenres";
static char __pyx_k__Schedule[] = "Schedule";
static char __pyx_k__SetValue[] = "SetValue";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__groupIdx[] = "groupIdx";
static char __pyx_k__groupidx[] = "groupidx";
static char __pyx_k__instance[] = "instance";
static char __pyx_k__isPolled[] = "isPolled";
static char __pyx_k__location[] = "location";
static char __pyx_k__readOnly[] = "readOnly";
static char __pyx_k__s_ACKCnt[] = "s_ACKCnt";
static char __pyx_k__s_CANCnt[] = "s_CANCnt";
static char __pyx_k__s_NAKCnt[] = "s_NAKCnt";
static char __pyx_k__s_OOFCnt[] = "s_OOFCnt";
static char __pyx_k__s_SOFCnt[] = "s_SOFCnt";
static char __pyx_k__AddDriver[] = "AddDriver";
static char __pyx_k__ButtonOff[] = "ButtonOff";
static char __pyx_k__GetHomeId[] = "GetHomeId";
static char __pyx_k__GetNodeId[] = "GetNodeId";
static char __pyx_k__NodeAdded[] = "NodeAdded";
static char __pyx_k__NodeEvent[] = "NodeEvent";
static char __pyx_k__PYLIBRARY[] = "PYLIBRARY";
static char __pyx_k__SetNodeOn[] = "SetNodeOn";
static char __pyx_k__SoftReset[] = "SoftReset";
static char __pyx_k__className[] = "className";
static char __pyx_k__intensity[] = "intensity";
static char __pyx_k__s_dropped[] = "s_dropped";
static char __pyx_k__s_readCnt[] = "s_readCnt";
static char __pyx_k__s_retries[] = "s_retries";
static char __pyx_k__AddWatcher[] = "AddWatcher";
static char __pyx_k__EnablePoll[] = "EnablePoll";
static char __pyx_k__GetValueID[] = "GetValueID";
static char __pyx_k__IsValueSet[] = "IsValueSet";
static char __pyx_k__NodeNaming[] = "NodeNaming";
static char __pyx_k__SetNodeOff[] = "SetNodeOff";
static char __pyx_k__ValueAdded[] = "ValueAdded";
static char __pyx_k__ValueError[] = "ValueError";
static char __pyx_k__riverReset[] = "riverReset";
static char __pyx_k__s_writeCnt[] = "s_writeCnt";
static char __pyx_k__CreateScene[] = "CreateScene";
static char __pyx_k__DisablePoll[] = "DisablePoll";
static char __pyx_k__DriverReady[] = "DriverReady";
static char __pyx_k__EnumWithDoc[] = "EnumWithDoc";
static char __pyx_k__GetGroupIdx[] = "GetGroupIdx";
static char __pyx_k__GetInstance[] = "GetInstance";
static char __pyx_k__GetNodeName[] = "GetNodeName";
static char __pyx_k__GetNodeType[] = "GetNodeType";
static char __pyx_k__GetValueMax[] = "GetValueMax";
static char __pyx_k__GetValueMin[] = "GetValueMin";
static char __pyx_k__MsgComplete[] = "MsgComplete";
static char __pyx_k__NodeRemoved[] = "NodeRemoved";
static char __pyx_k__PressButton[] = "PressButton";
static char __pyx_k__RemoveScene[] = "RemoveScene";
static char __pyx_k__SceneExists[] = "SceneExists";
static char __pyx_k__SetNodeName[] = "SetNodeName";
static char __pyx_k__SwitchAllOn[] = "SwitchAllOn";
static char __pyx_k__WriteConfig[] = "WriteConfig";
static char __pyx_k__productName[] = "productName";
static char __pyx_k__CreateButton[] = "CreateButton";
static char __pyx_k__DeleteButton[] = "DeleteButton";
static char __pyx_k__DriverFailed[] = "DriverFailed";
static char __pyx_k__GetAllScenes[] = "GetAllScenes";
static char __pyx_k__GetNodeBasic[] = "GetNodeBasic";
static char __pyx_k__GetNumGroups[] = "GetNumGroups";
static char __pyx_k__GetNumScenes[] = "GetNumScenes";
static char __pyx_k__GetValueHelp[] = "GetValueHelp";
static char __pyx_k__PyValueTypes[] = "PyValueTypes";
static char __pyx_k__RefreshValue[] = "RefreshValue";
static char __pyx_k__RemoveDriver[] = "RemoveDriver";
static char __pyx_k__SetNodeLevel[] = "SetNodeLevel";
static char __pyx_k__SetValueHelp[] = "SetValueHelp";
static char __pyx_k__SwitchAllOff[] = "SwitchAllOff";
static char __pyx_k__ValueChanged[] = "ValueChanged";
static char __pyx_k__ValueRemoved[] = "ValueRemoved";
static char __pyx_k__classVersion[] = "classVersion";
static char __pyx_k__commandClass[] = "commandClass";
static char __pyx_k__libopenzwave[] = "libopenzwave";
static char __pyx_k__milliseconds[] = "milliseconds";
static char __pyx_k__s_ACKWaiting[] = "s_ACKWaiting";
static char __pyx_k__s_readAborts[] = "s_readAborts";
static char __pyx_k__targetnodeid[] = "targetnodeid";
static char __pyx_k__ActivateScene[] = "ActivateScene";
static char __pyx_k__AddSceneValue[] = "AddSceneValue";
static char __pyx_k__CALLBACK_DESC[] = "CALLBACK_DESC";
static char __pyx_k__GetGroupLabel[] = "GetGroupLabel";
static char __pyx_k__GetSceneLabel[] = "GetSceneLabel";
static char __pyx_k__GetValueAsInt[] = "GetValueAsInt";
static char __pyx_k__GetValueLabel[] = "GetValueLabel";
static char __pyx_k__GetValueUnits[] = "GetValueUnits";
static char __pyx_k__ReleaseButton[] = "ReleaseButton";
static char __pyx_k__SetSceneLabel[] = "SetSceneLabel";
static char __pyx_k__SetSceneValue[] = "SetSceneValue";
static char __pyx_k__SetValueLabel[] = "SetValueLabel";
static char __pyx_k__SetValueUnits[] = "SetValueUnits";
static char __pyx_k__s_badChecksum[] = "s_badChecksum";
static char __pyx_k__AddAssociation[] = "AddAssociation";
static char __pyx_k__GetNodeGeneric[] = "GetNodeGeneric";
static char __pyx_k__GetNodeVersion[] = "GetNodeVersion";
static char __pyx_k__GetSwitchPoint[] = "GetSwitchPoint";
static char __pyx_k__GetValueAsBool[] = "GetValueAsBool";
static char __pyx_k__GetValueAsByte[] = "GetValueAsByte";
static char __pyx_k__PollingEnabled[] = "PollingEnabled";
static char __pyx_k__SetConfigParam[] = "SetConfigParam";
static char __pyx_k__SetSwitchPoint[] = "SetSwitchPoint";
static char __pyx_k__ValueRefreshed[] = "ValueRefreshed";
static char __pyx_k__commandClassId[] = "commandClassId";
static char __pyx_k__AllNodesQueried[] = "AllNodesQueried";
static char __pyx_k__GetAssociations[] = "GetAssociations";
static char __pyx_k__GetNodeLocation[] = "GetNodeLocation";
static char __pyx_k__GetNodeSecurity[] = "GetNodeSecurity";
static char __pyx_k__GetNodeSpecific[] = "GetNodeSpecific";
static char __pyx_k__GetPollInterval[] = "GetPollInterval";
static char __pyx_k__GetValueAsFloat[] = "GetValueAsFloat";
static char __pyx_k__GetValueAsShort[] = "GetValueAsShort";
static char __pyx_k__IsValueReadOnly[] = "IsValueReadOnly";
static char __pyx_k__PollingDisabled[] = "PollingDisabled";
static char __pyx_k__PyNotifications[] = "PyNotifications";
static char __pyx_k__RefreshNodeInfo[] = "RefreshNodeInfo";
static char __pyx_k__ResetController[] = "ResetController";
static char __pyx_k__SetNodeLocation[] = "SetNodeLocation";
static char __pyx_k__SetPollInterval[] = "SetPollInterval";
static char __pyx_k__GetNodeNeighbors[] = "GetNodeNeighbors";
static char __pyx_k__GetNodeProductId[] = "GetNodeProductId";
static char __pyx_k__GetValueAsString[] = "GetValueAsString";
static char __pyx_k__IsValueWriteOnly[] = "IsValueWriteOnly";
static char __pyx_k__NodeProtocolInfo[] = "NodeProtocolInfo";
static char __pyx_k__RequestNodeState[] = "RequestNodeState";
static char __pyx_k__SetPollIntensity[] = "SetPollIntensity";
static char __pyx_k___watcherCallback[] = "_watcherCallback";
static char __pyx_k__manufacturerName[] = "manufacturerName";
static char __pyx_k__notificationType[] = "notificationType";
static char __pyx_k__AwakeNodesQueried[] = "AwakeNodesQueried";
static char __pyx_k__ClearSwitchPoints[] = "ClearSwitchPoints";
static char __pyx_k__GetCommandClassId[] = "GetCommandClassId";
static char __pyx_k__GetLibraryVersion[] = "GetLibraryVersion";
static char __pyx_k__GetSendQueueCount[] = "GetSendQueueCount";
static char __pyx_k__RemoveSwitchPoint[] = "RemoveSwitchPoint";
static char __pyx_k__COMMAND_CLASS_DESC[] = "COMMAND_CLASS_DESC";
static char __pyx_k__COMMAND_CLASS_HAIL[] = "COMMAND_CLASS_HAIL";
static char __pyx_k__COMMAND_CLASS_LOCK[] = "COMMAND_CLASS_LOCK";
static char __pyx_k__COMMAND_CLASS_MARK[] = "COMMAND_CLASS_MARK";
static char __pyx_k__COMMAND_CLASS_TIME[] = "COMMAND_CLASS_TIME";
static char __pyx_k__GetLibraryTypeName[] = "GetLibraryTypeName";
static char __pyx_k__GetMaxAssociations[] = "GetMaxAssociations";
static char __pyx_k__GetNodeMaxBaudRate[] = "GetNodeMaxBaudRate";
static char __pyx_k__GetNodeProductName[] = "GetNodeProductName";
static char __pyx_k__GetNodeProductType[] = "GetNodeProductType";
static char __pyx_k__GetNumSwitchPoints[] = "GetNumSwitchPoints";
static char __pyx_k__IsBridgeController[] = "IsBridgeController";
static char __pyx_k__IsNodeInfoReceived[] = "IsNodeInfoReceived";
static char __pyx_k__RequestConfigParam[] = "RequestConfigParam";
static char __pyx_k__RequestNodeDynamic[] = "RequestNodeDynamic";
static char __pyx_k__SetNodeProductName[] = "SetNodeProductName";
static char __pyx_k__COMMAND_CLASS_ALARM[] = "COMMAND_CLASS_ALARM";
static char __pyx_k__COMMAND_CLASS_BASIC[] = "COMMAND_CLASS_BASIC";
static char __pyx_k__COMMAND_CLASS_CLOCK[] = "COMMAND_CLASS_CLOCK";
static char __pyx_k__COMMAND_CLASS_METER[] = "COMMAND_CLASS_METER";
static char __pyx_k__GetControllerNodeId[] = "GetControllerNodeId";
static char __pyx_k__GetDriverStatistics[] = "GetDriverStatistics";
static char __pyx_k__IsNodeBeamingDevice[] = "IsNodeBeamingDevice";
static char __pyx_k__IsNodeRoutingDevice[] = "IsNodeRoutingDevice";
static char __pyx_k__IsPrimaryController[] = "IsPrimaryController";
static char __pyx_k__LogDriverStatistics[] = "LogDriverStatistics";
static char __pyx_k__NodeQueriesComplete[] = "NodeQueriesComplete";
static char __pyx_k__s_controllerReadCnt[] = "s_controllerReadCnt";
static PyObject *__pyx_n_s_1;
static PyObject *__pyx_n_s_10;
static PyObject *__pyx_kp_s_101;
static PyObject *__pyx_kp_s_104;
static PyObject *__pyx_kp_s_107;
static PyObject *__pyx_n_s_11;
static PyObject *__pyx_kp_s_110;
static PyObject *__pyx_kp_s_113;
static PyObject *__pyx_kp_s_116;
static PyObject *__pyx_kp_s_119;
static PyObject *__pyx_n_s_12;
static PyObject *__pyx_kp_s_122;
static PyObject *__pyx_kp_s_125;
static PyObject *__pyx_kp_s_128;
static PyObject *__pyx_n_s_13;
static PyObject *__pyx_kp_s_131;
static PyObject *__pyx_kp_s_134;
static PyObject *__pyx_kp_s_137;
static PyObject *__pyx_n_s_139;
static PyObject *__pyx_n_s_14;
static PyObject *__pyx_n_s_140;
static PyObject *__pyx_n_s_141;
static PyObject *__pyx_n_s_142;
static PyObject *__pyx_n_s_143;
static PyObject *__pyx_n_s_144;
static PyObject *__pyx_n_s_145;
static PyObject *__pyx_n_s_146;
static PyObject *__pyx_n_s_147;
static PyObject *__pyx_n_s_148;
static PyObject *__pyx_n_s_149;
static PyObject *__pyx_kp_s_15;
static PyObject *__pyx_n_s_150;
static PyObject *__pyx_n_s_151;
static PyObject *__pyx_n_s_152;
static PyObject *__pyx_n_s_153;
static PyObject *__pyx_n_s_154;
static PyObject *__pyx_n_s_155;
static PyObject *__pyx_n_s_156;
static PyObject *__pyx_n_s_157;
static PyObject *__pyx_n_s_158;
static PyObject *__pyx_n_s_159;
static PyObject *__pyx_n_s_160;
static PyObject *__pyx_n_s_161;
static PyObject *__pyx_n_s_162;
static PyObject *__pyx_n_s_163;
static PyObject *__pyx_n_s_164;
static PyObject *__pyx_n_s_165;
static PyObject *__pyx_n_s_166;
static PyObject *__pyx_n_s_167;
static PyObject *__pyx_n_s_168;
static PyObject *__pyx_n_s_169;
static PyObject *__pyx_n_s_17;
static PyObject *__pyx_n_s_170;
static PyObject *__pyx_n_s_171;
static PyObject *__pyx_n_s_172;
static PyObject *__pyx_n_s_173;
static PyObject *__pyx_n_s_174;
static PyObject *__pyx_n_s_175;
static PyObject *__pyx_n_s_176;
static PyObject *__pyx_n_s_177;
static PyObject *__pyx_n_s_178;
static PyObject *__pyx_n_s_179;
static PyObject *__pyx_n_s_180;
static PyObject *__pyx_n_s_181;
static PyObject *__pyx_n_s_182;
static PyObject *__pyx_n_s_183;
static PyObject *__pyx_n_s_184;
static PyObject *__pyx_n_s_185;
static PyObject *__pyx_n_s_186;
static PyObject *__pyx_n_s_187;
static PyObject *__pyx_n_s_188;
static PyObject *__pyx_n_s_189;
static PyObject *__pyx_kp_s_19;
static PyObject *__pyx_n_s_190;
static PyObject *__pyx_n_s_191;
static PyObject *__pyx_n_s_192;
static PyObject *__pyx_n_s_193;
static PyObject *__pyx_n_s_194;
static PyObject *__pyx_n_s_195;
static PyObject *__pyx_n_s_196;
static PyObject *__pyx_n_s_197;
static PyObject *__pyx_n_s_198;
static PyObject *__pyx_n_s_199;
static PyObject *__pyx_kp_s_2;
static PyObject *__pyx_kp_s_20;
static PyObject *__pyx_n_s_200;
static PyObject *__pyx_n_s_201;
static PyObject *__pyx_n_s_202;
static PyObject *__pyx_n_s_203;
static PyObject *__pyx_n_s_204;
static PyObject *__pyx_n_s_205;
static PyObject *__pyx_n_s_206;
static PyObject *__pyx_n_s_207;
static PyObject *__pyx_n_s_208;
static PyObject *__pyx_n_s_209;
static PyObject *__pyx_n_s_210;
static PyObject *__pyx_n_s_211;
static PyObject *__pyx_n_s_212;
static PyObject *__pyx_n_s_213;
static PyObject *__pyx_n_s_214;
static PyObject *__pyx_kp_s_215;
static PyObject *__pyx_kp_s_216;
static PyObject *__pyx_kp_s_217;
static PyObject *__pyx_kp_s_218;
static PyObject *__pyx_kp_s_219;
static PyObject *__pyx_kp_s_22;
static PyObject *__pyx_kp_s_220;
static PyObject *__pyx_kp_s_221;
static PyObject *__pyx_kp_s_222;
static PyObject *__pyx_kp_s_223;
static PyObject *__pyx_kp_s_224;
static PyObject *__pyx_kp_s_225;
static PyObject *__pyx_kp_s_226;
static PyObject *__pyx_kp_s_227;
static PyObject *__pyx_kp_s_228;
static PyObject *__pyx_kp_s_229;
static PyObject *__pyx_kp_s_230;
static PyObject *__pyx_kp_s_231;
static PyObject *__pyx_kp_s_232;
static PyObject *__pyx_kp_s_25;
static PyObject *__pyx_kp_s_28;
static PyObject *__pyx_n_s_3;
static PyObject *__pyx_kp_s_31;
static PyObject *__pyx_kp_s_34;
static PyObject *__pyx_kp_s_37;
static PyObject *__pyx_kp_s_4;
static PyObject *__pyx_kp_s_40;
static PyObject *__pyx_kp_s_43;
static PyObject *__pyx_kp_s_46;
static PyObject *__pyx_kp_s_49;
static PyObject *__pyx_n_s_5;
static PyObject *__pyx_kp_s_52;
static PyObject *__pyx_kp_s_55;
static PyObject *__pyx_kp_s_58;
static PyObject *__pyx_n_s_6;
static PyObject *__pyx_kp_s_61;
static PyObject *__pyx_kp_s_64;
static PyObject *__pyx_kp_s_67;
static PyObject *__pyx_n_s_7;
static PyObject *__pyx_kp_s_70;
static PyObject *__pyx_kp_s_73;
static PyObject *__pyx_kp_s_76;
static PyObject *__pyx_kp_s_79;
static PyObject *__pyx_n_s_8;
static PyObject *__pyx_kp_s_82;
static PyObject *__pyx_n_s_84;
static PyObject *__pyx_kp_s_86;
static PyObject *__pyx_kp_s_89;
static PyObject *__pyx_n_s_9;
static PyObject *__pyx_kp_s_92;
static PyObject *__pyx_kp_s_95;
static PyObject *__pyx_kp_s_98;
static PyObject *__pyx_n_s__ActivateScene;
static PyObject *__pyx_n_s__AddAssociation;
static PyObject *__pyx_n_s__AddDriver;
static PyObject *__pyx_n_s__AddSceneValue;
static PyObject *__pyx_n_s__AddWatcher;
static PyObject *__pyx_n_s__AllNodesQueried;
static PyObject *__pyx_n_s__AwakeNodesQueried;
static PyObject *__pyx_n_s__Basic;
static PyObject *__pyx_n_s__Bool;
static PyObject *__pyx_n_s__Button;
static PyObject *__pyx_n_s__ButtonOff;
static PyObject *__pyx_n_s__ButtonOn;
static PyObject *__pyx_n_s__Byte;
static PyObject *__pyx_n_s__CALLBACK_DESC;
static PyObject *__pyx_n_s__COMMAND_CLASS_ALARM;
static PyObject *__pyx_n_s__COMMAND_CLASS_BASIC;
static PyObject *__pyx_n_s__COMMAND_CLASS_CLOCK;
static PyObject *__pyx_n_s__COMMAND_CLASS_DESC;
static PyObject *__pyx_n_s__COMMAND_CLASS_HAIL;
static PyObject *__pyx_n_s__COMMAND_CLASS_LOCK;
static PyObject *__pyx_n_s__COMMAND_CLASS_MARK;
static PyObject *__pyx_n_s__COMMAND_CLASS_METER;
static PyObject *__pyx_n_s__COMMAND_CLASS_TIME;
static PyObject *__pyx_n_s__ClearSwitchPoints;
static PyObject *__pyx_n_s__Config;
static PyObject *__pyx_n_s__CreateButton;
static PyObject *__pyx_n_s__CreateScene;
static PyObject *__pyx_n_s__Decimal;
static PyObject *__pyx_n_s__DeleteButton;
static PyObject *__pyx_n_s__DisablePoll;
static PyObject *__pyx_n_s__DriverFailed;
static PyObject *__pyx_n_s__DriverReady;
static PyObject *__pyx_n_s__EnablePoll;
static PyObject *__pyx_n_s__EnumWithDoc;
static PyObject *__pyx_n_s__Error;
static PyObject *__pyx_n_s__GetAllScenes;
static PyObject *__pyx_n_s__GetAssociations;
static PyObject *__pyx_n_s__GetCommandClassId;
static PyObject *__pyx_n_s__GetControllerNodeId;
static PyObject *__pyx_n_s__GetDriverStatistics;
static PyObject *__pyx_n_s__GetEvent;
static PyObject *__pyx_n_s__GetGenre;
static PyObject *__pyx_n_s__GetGroupIdx;
static PyObject *__pyx_n_s__GetGroupLabel;
static PyObject *__pyx_n_s__GetHomeId;
static PyObject *__pyx_n_s__GetId;
static PyObject *__pyx_n_s__GetIndex;
static PyObject *__pyx_n_s__GetInstance;
static PyObject *__pyx_n_s__GetLibraryTypeName;
static PyObject *__pyx_n_s__GetLibraryVersion;
static PyObject *__pyx_n_s__GetMaxAssociations;
static PyObject *__pyx_n_s__GetNodeBasic;
static PyObject *__pyx_n_s__GetNodeGeneric;
static PyObject *__pyx_n_s__GetNodeId;
static PyObject *__pyx_n_s__GetNodeLocation;
static PyObject *__pyx_n_s__GetNodeMaxBaudRate;
static PyObject *__pyx_n_s__GetNodeName;
static PyObject *__pyx_n_s__GetNodeNeighbors;
static PyObject *__pyx_n_s__GetNodeProductId;
static PyObject *__pyx_n_s__GetNodeProductName;
static PyObject *__pyx_n_s__GetNodeProductType;
static PyObject *__pyx_n_s__GetNodeSecurity;
static PyObject *__pyx_n_s__GetNodeSpecific;
static PyObject *__pyx_n_s__GetNodeType;
static PyObject *__pyx_n_s__GetNodeVersion;
static PyObject *__pyx_n_s__GetNumGroups;
static PyObject *__pyx_n_s__GetNumScenes;
static PyObject *__pyx_n_s__GetNumSwitchPoints;
static PyObject *__pyx_n_s__GetPollInterval;
static PyObject *__pyx_n_s__GetSceneLabel;
static PyObject *__pyx_n_s__GetSendQueueCount;
static PyObject *__pyx_n_s__GetSwitchPoint;
static PyObject *__pyx_n_s__GetType;
static PyObject *__pyx_n_s__GetValueAsBool;
static PyObject *__pyx_n_s__GetValueAsByte;
static PyObject *__pyx_n_s__GetValueAsFloat;
static PyObject *__pyx_n_s__GetValueAsInt;
static PyObject *__pyx_n_s__GetValueAsShort;
static PyObject *__pyx_n_s__GetValueAsString;
static PyObject *__pyx_n_s__GetValueHelp;
static PyObject *__pyx_n_s__GetValueID;
static PyObject *__pyx_n_s__GetValueLabel;
static PyObject *__pyx_n_s__GetValueMax;
static PyObject *__pyx_n_s__GetValueMin;
static PyObject *__pyx_n_s__GetValueUnits;
static PyObject *__pyx_n_s__Group;
static PyObject *__pyx_n_s__Int;
static PyObject *__pyx_n_s__IsBridgeController;
static PyObject *__pyx_n_s__IsNodeBeamingDevice;
static PyObject *__pyx_n_s__IsNodeInfoReceived;
static PyObject *__pyx_n_s__IsNodeRoutingDevice;
static PyObject *__pyx_n_s__IsPrimaryController;
static PyObject *__pyx_n_s__IsValueReadOnly;
static PyObject *__pyx_n_s__IsValueSet;
static PyObject *__pyx_n_s__IsValueWriteOnly;
static PyObject *__pyx_n_s__List;
static PyObject *__pyx_n_s__Lock;
static PyObject *__pyx_n_s__LogDriverStatistics;
static PyObject *__pyx_n_s__MsgComplete;
static PyObject *__pyx_n_s__NodeAdded;
static PyObject *__pyx_n_s__NodeEvent;
static PyObject *__pyx_n_s__NodeNaming;
static PyObject *__pyx_n_s__NodeNew;
static PyObject *__pyx_n_s__NodeProtocolInfo;
static PyObject *__pyx_n_s__NodeQueriesComplete;
static PyObject *__pyx_n_s__NodeRemoved;
static PyObject *__pyx_n_s__PYLIBRARY;
static PyObject *__pyx_n_s__PollingDisabled;
static PyObject *__pyx_n_s__PollingEnabled;
static PyObject *__pyx_n_s__PressButton;
static PyObject *__pyx_n_s__PyGenres;
static PyObject *__pyx_n_s__PyNotifications;
static PyObject *__pyx_n_s__PyValueTypes;
static PyObject *__pyx_n_s__RefreshNodeInfo;
static PyObject *__pyx_n_s__RefreshValue;
static PyObject *__pyx_n_s__ReleaseButton;
static PyObject *__pyx_n_s__RemoveDriver;
static PyObject *__pyx_n_s__RemoveScene;
static PyObject *__pyx_n_s__RemoveSwitchPoint;
static PyObject *__pyx_n_s__RequestConfigParam;
static PyObject *__pyx_n_s__RequestNodeDynamic;
static PyObject *__pyx_n_s__RequestNodeState;
static PyObject *__pyx_n_s__ResetController;
static PyObject *__pyx_n_s__SceneExists;
static PyObject *__pyx_n_s__Schedule;
static PyObject *__pyx_n_s__SetConfigParam;
static PyObject *__pyx_n_s__SetNodeLevel;
static PyObject *__pyx_n_s__SetNodeLocation;
static PyObject *__pyx_n_s__SetNodeName;
static PyObject *__pyx_n_s__SetNodeOff;
static PyObject *__pyx_n_s__SetNodeOn;
static PyObject *__pyx_n_s__SetNodeProductName;
static PyObject *__pyx_n_s__SetPollIntensity;
static PyObject *__pyx_n_s__SetPollInterval;
static PyObject *__pyx_n_s__SetSceneLabel;
static PyObject *__pyx_n_s__SetSceneValue;
static PyObject *__pyx_n_s__SetSwitchPoint;
static PyObject *__pyx_n_s__SetValue;
static PyObject *__pyx_n_s__SetValueHelp;
static PyObject *__pyx_n_s__SetValueLabel;
static PyObject *__pyx_n_s__SetValueUnits;
static PyObject *__pyx_n_s__Short;
static PyObject *__pyx_n_s__SoftReset;
static PyObject *__pyx_n_s__String;
static PyObject *__pyx_n_s__SwitchAllOff;
static PyObject *__pyx_n_s__SwitchAllOn;
static PyObject *__pyx_n_s__System;
static PyObject *__pyx_n_s__User;
static PyObject *__pyx_n_s__ValueAdded;
static PyObject *__pyx_n_s__ValueChanged;
static PyObject *__pyx_n_s__ValueError;
static PyObject *__pyx_n_s__ValueRefreshed;
static PyObject *__pyx_n_s__ValueRemoved;
static PyObject *__pyx_n_s__WriteConfig;
static PyObject *__pyx_n_s____doc__;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s___watcherCallback;
static PyObject *__pyx_n_s__a;
static PyObject *__pyx_n_s__add;
static PyObject *__pyx_n_s__at;
static PyObject *__pyx_n_s__b;
static PyObject *__pyx_n_s__c;
static PyObject *__pyx_n_s__c_str;
static PyObject *__pyx_n_s__className;
static PyObject *__pyx_n_s__classVersion;
static PyObject *__pyx_n_s__commandClass;
static PyObject *__pyx_n_s__commandClassId;
static PyObject *__pyx_n_s__doc;
static PyObject *__pyx_n_s__end;
static PyObject *__pyx_n_s__event;
static PyObject *__pyx_n_s__exists;
static PyObject *__pyx_n_s__find;
static PyObject *__pyx_n_s__genre;
static PyObject *__pyx_n_s__groupIdx;
static PyObject *__pyx_n_s__groupidx;
static PyObject *__pyx_n_s__help;
static PyObject *__pyx_n_s__homeId;
static PyObject *__pyx_n_s__homeid;
static PyObject *__pyx_n_s__hours;
static PyObject *__pyx_n_s__id;
static PyObject *__pyx_n_s__idx;
static PyObject *__pyx_n_s__index;
static PyObject *__pyx_n_s__insert;
static PyObject *__pyx_n_s__instance;
static PyObject *__pyx_n_s__intensity;
static PyObject *__pyx_n_s__isPolled;
static PyObject *__pyx_n_s__join;
static PyObject *__pyx_n_s__label;
static PyObject *__pyx_n_s__level;
static PyObject *__pyx_n_s__libopenzwave;
static PyObject *__pyx_n_s__location;
static PyObject *__pyx_n_s__manager;
static PyObject *__pyx_n_s__manufacturerName;
static PyObject *__pyx_n_s__milliseconds;
static PyObject *__pyx_n_s__minutes;
static PyObject *__pyx_n_s__name;
static PyObject *__pyx_n_s__nodeId;
static PyObject *__pyx_n_s__nodeid;
static PyObject *__pyx_n_s__notificationType;
static PyObject *__pyx_n_s__options;
static PyObject *__pyx_n_s__os;
static PyObject *__pyx_n_s__param;
static PyObject *__pyx_n_s__path;
static PyObject *__pyx_n_s__productName;
static PyObject *__pyx_n_s__range;
static PyObject *__pyx_n_s__readOnly;
static PyObject *__pyx_n_s__riverReset;
static PyObject *__pyx_n_s__s_ACKCnt;
static PyObject *__pyx_n_s__s_ACKWaiting;
static PyObject *__pyx_n_s__s_CANCnt;
static PyObject *__pyx_n_s__s_NAKCnt;
static PyObject *__pyx_n_s__s_OOFCnt;
static PyObject *__pyx_n_s__s_SOFCnt;
static PyObject *__pyx_n_s__s_badChecksum;
static PyObject *__pyx_n_s__s_controllerReadCnt;
static PyObject *__pyx_n_s__s_dropped;
static PyObject *__pyx_n_s__s_readAborts;
static PyObject *__pyx_n_s__s_readCnt;
static PyObject *__pyx_n_s__s_retries;
static PyObject *__pyx_n_s__s_writeCnt;
static PyObject *__pyx_n_s__sceneid;
static PyObject *__pyx_n_s__self;
static PyObject *__pyx_n_s__setDoc;
static PyObject *__pyx_n_s__setback;
static PyObject *__pyx_n_s__targetnodeid;
static PyObject *__pyx_n_s__type;
static PyObject *__pyx_n_s__unit;
static PyObject *__pyx_n_s__units;
static PyObject *__pyx_n_s__value;
static PyObject *__pyx_n_s__valueId;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_32;
static PyObject *__pyx_int_33;
static PyObject *__pyx_int_34;
static PyObject *__pyx_int_35;
static PyObject *__pyx_int_36;
static PyObject *__pyx_int_37;
static PyObject *__pyx_int_38;
static PyObject *__pyx_int_39;
static PyObject *__pyx_int_40;
static PyObject *__pyx_int_41;
static PyObject *__pyx_int_42;
static PyObject *__pyx_int_43;
static PyObject *__pyx_int_44;
static PyObject *__pyx_int_45;
static PyObject *__pyx_int_46;
static PyObject *__pyx_int_47;
static PyObject *__pyx_int_48;
static PyObject *__pyx_int_49;
static PyObject *__pyx_int_50;
static PyObject *__pyx_int_51;
static PyObject *__pyx_int_52;
static PyObject *__pyx_int_53;
static PyObject *__pyx_int_56;
static PyObject *__pyx_int_60;
static PyObject *__pyx_int_61;
static PyObject *__pyx_int_62;
static PyObject *__pyx_int_64;
static PyObject *__pyx_int_66;
static PyObject *__pyx_int_67;
static PyObject *__pyx_int_68;
static PyObject *__pyx_int_69;
static PyObject *__pyx_int_70;
static PyObject *__pyx_int_71;
static PyObject *__pyx_int_76;
static PyObject *__pyx_int_78;
static PyObject *__pyx_int_80;
static PyObject *__pyx_int_81;
static PyObject *__pyx_int_96;
static PyObject *__pyx_int_98;
static PyObject *__pyx_int_99;
static PyObject *__pyx_int_112;
static PyObject *__pyx_int_113;
static PyObject *__pyx_int_114;
static PyObject *__pyx_int_115;
static PyObject *__pyx_int_117;
static PyObject *__pyx_int_118;
static PyObject *__pyx_int_119;
static PyObject *__pyx_int_122;
static PyObject *__pyx_int_123;
static PyObject *__pyx_int_124;
static PyObject *__pyx_int_125;
static PyObject *__pyx_int_128;
static PyObject *__pyx_int_129;
static PyObject *__pyx_int_130;
static PyObject *__pyx_int_132;
static PyObject *__pyx_int_133;
static PyObject *__pyx_int_134;
static PyObject *__pyx_int_135;
static PyObject *__pyx_int_136;
static PyObject *__pyx_int_137;
static PyObject *__pyx_int_138;
static PyObject *__pyx_int_139;
static PyObject *__pyx_int_140;
static PyObject *__pyx_int_141;
static PyObject *__pyx_int_142;
static PyObject *__pyx_int_143;
static PyObject *__pyx_int_144;
static PyObject *__pyx_int_145;
static PyObject *__pyx_int_146;
static PyObject *__pyx_int_147;
static PyObject *__pyx_int_148;
static PyObject *__pyx_int_149;
static PyObject *__pyx_int_150;
static PyObject *__pyx_int_151;
static PyObject *__pyx_int_152;
static PyObject *__pyx_int_153;
static PyObject *__pyx_int_154;
static PyObject *__pyx_int_155;
static PyObject *__pyx_int_156;
static PyObject *__pyx_int_157;
static PyObject *__pyx_int_158;
static PyObject *__pyx_int_239;
static PyObject *__pyx_int_240;
static PyObject *__pyx_k_tuple_16;
static PyObject *__pyx_k_tuple_21;
static PyObject *__pyx_k_tuple_23;
static PyObject *__pyx_k_tuple_24;
static PyObject *__pyx_k_tuple_26;
static PyObject *__pyx_k_tuple_27;
static PyObject *__pyx_k_tuple_29;
static PyObject *__pyx_k_tuple_30;
static PyObject *__pyx_k_tuple_32;
static PyObject *__pyx_k_tuple_33;
static PyObject *__pyx_k_tuple_35;
static PyObject *__pyx_k_tuple_36;
static PyObject *__pyx_k_tuple_38;
static PyObject *__pyx_k_tuple_39;
static PyObject *__pyx_k_tuple_41;
static PyObject *__pyx_k_tuple_42;
static PyObject *__pyx_k_tuple_44;
static PyObject *__pyx_k_tuple_45;
static PyObject *__pyx_k_tuple_47;
static PyObject *__pyx_k_tuple_48;
static PyObject *__pyx_k_tuple_50;
static PyObject *__pyx_k_tuple_51;
static PyObject *__pyx_k_tuple_53;
static PyObject *__pyx_k_tuple_54;
static PyObject *__pyx_k_tuple_56;
static PyObject *__pyx_k_tuple_57;
static PyObject *__pyx_k_tuple_59;
static PyObject *__pyx_k_tuple_60;
static PyObject *__pyx_k_tuple_62;
static PyObject *__pyx_k_tuple_63;
static PyObject *__pyx_k_tuple_65;
static PyObject *__pyx_k_tuple_66;
static PyObject *__pyx_k_tuple_68;
static PyObject *__pyx_k_tuple_69;
static PyObject *__pyx_k_tuple_71;
static PyObject *__pyx_k_tuple_72;
static PyObject *__pyx_k_tuple_74;
static PyObject *__pyx_k_tuple_75;
static PyObject *__pyx_k_tuple_77;
static PyObject *__pyx_k_tuple_78;
static PyObject *__pyx_k_tuple_80;
static PyObject *__pyx_k_tuple_81;
static PyObject *__pyx_k_tuple_83;
static PyObject *__pyx_k_tuple_85;
static PyObject *__pyx_k_tuple_87;
static PyObject *__pyx_k_tuple_88;
static PyObject *__pyx_k_tuple_90;
static PyObject *__pyx_k_tuple_91;
static PyObject *__pyx_k_tuple_93;
static PyObject *__pyx_k_tuple_94;
static PyObject *__pyx_k_tuple_96;
static PyObject *__pyx_k_tuple_97;
static PyObject *__pyx_k_tuple_99;
static PyObject *__pyx_k_tuple_100;
static PyObject *__pyx_k_tuple_102;
static PyObject *__pyx_k_tuple_103;
static PyObject *__pyx_k_tuple_105;
static PyObject *__pyx_k_tuple_106;
static PyObject *__pyx_k_tuple_108;
static PyObject *__pyx_k_tuple_109;
static PyObject *__pyx_k_tuple_111;
static PyObject *__pyx_k_tuple_112;
static PyObject *__pyx_k_tuple_114;
static PyObject *__pyx_k_tuple_115;
static PyObject *__pyx_k_tuple_117;
static PyObject *__pyx_k_tuple_118;
static PyObject *__pyx_k_tuple_120;
static PyObject *__pyx_k_tuple_121;
static PyObject *__pyx_k_tuple_123;
static PyObject *__pyx_k_tuple_124;
static PyObject *__pyx_k_tuple_126;
static PyObject *__pyx_k_tuple_127;
static PyObject *__pyx_k_tuple_129;
static PyObject *__pyx_k_tuple_130;
static PyObject *__pyx_k_tuple_132;
static PyObject *__pyx_k_tuple_133;
static PyObject *__pyx_k_tuple_135;
static PyObject *__pyx_k_tuple_136;
static PyObject *__pyx_k_tuple_138;
static PyObject *__pyx_k_tuple_233;

/* "libopenzwave.pyx":206
 *     cdef Options *options
 * 
 *     def create(self, char *a, char *b, char *c):             # <<<<<<<<<<<<<<
 *         self.options = Create(string(a), string(b), string(c))
 * 
 */

static PyObject *__pyx_pf_12libopenzwave_9PyOptions_create(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_12libopenzwave_9PyOptions_create(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_a;
  char *__pyx_v_b;
  char *__pyx_v_c;
  PyObject *__pyx_r = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__a,&__pyx_n_s__b,&__pyx_n_s__c,0};
  __Pyx_RefNannySetupContext("create");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__a);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__b);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("create", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__c);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("create", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "create") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_a = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_a) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_b = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_b) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_c = PyBytes_AsString(values[2]); if (unlikely((!__pyx_v_c) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_a = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((!__pyx_v_a) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_b = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((!__pyx_v_b) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_c = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((!__pyx_v_c) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("create", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyOptions.create");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":207
 * 
 *     def create(self, char *a, char *b, char *c):
 *         self.options = Create(string(a), string(b), string(c))             # <<<<<<<<<<<<<<
 * 
 *     def lock(self):
 */
  ((struct __pyx_obj_12libopenzwave_PyOptions *)__pyx_v_self)->options = OpenZWave::Options::Create(std::string(__pyx_v_a), std::string(__pyx_v_b), std::string(__pyx_v_c));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":209
 *         self.options = Create(string(a), string(b), string(c))
 * 
 *     def lock(self):             # <<<<<<<<<<<<<<
 *         return self.options.Lock()
 * 
 */

static PyObject *__pyx_pf_12libopenzwave_9PyOptions_1lock(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_12libopenzwave_9PyOptions_1lock(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("lock");

  /* "libopenzwave.pyx":210
 * 
 *     def lock(self):
 *         return self.options.Lock()             # <<<<<<<<<<<<<<
 * 
 * class EnumWithDoc(str):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyOptions *)__pyx_v_self)->options->Lock()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyOptions.lock");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":213
 * 
 * class EnumWithDoc(str):
 *     def setDoc(self, doc):             # <<<<<<<<<<<<<<
 *         self.__doc__ = doc
 *         return self
 */

static PyObject *__pyx_pf_12libopenzwave_11EnumWithDoc_setDoc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_12libopenzwave_11EnumWithDoc_setDoc = {__Pyx_NAMESTR("setDoc"), (PyCFunction)__pyx_pf_12libopenzwave_11EnumWithDoc_setDoc, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pf_12libopenzwave_11EnumWithDoc_setDoc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_doc = 0;
  PyObject *__pyx_r = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__doc,0};
  __Pyx_RefNannySetupContext("setDoc");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__doc);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setDoc", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setDoc") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_self = values[0];
    __pyx_v_doc = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_self = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_doc = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setDoc", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.EnumWithDoc.setDoc");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":214
 * class EnumWithDoc(str):
 *     def setDoc(self, doc):
 *         self.__doc__ = doc             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  if (PyObject_SetAttr(__pyx_v_self, __pyx_n_s____doc__, __pyx_v_doc) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "libopenzwave.pyx":215
 *     def setDoc(self, doc):
 *         self.__doc__ = doc
 *         return self             # <<<<<<<<<<<<<<
 * 
 * PyNotifications = [
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.EnumWithDoc.setDoc");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":268
 * cdef map[uint64, ValueID] values_map
 * 
 * cdef getValueFromType(Manager *manager, valueId):             # <<<<<<<<<<<<<<
 *         cdef float type_float
 *         cdef bool type_bool
 */

static  PyObject *__pyx_f_12libopenzwave_getValueFromType(OpenZWave::Manager *__pyx_v_manager, PyObject *__pyx_v_valueId) {
  float __pyx_v_type_float;
  bool __pyx_v_type_bool;
  __pyx_t_6mylibc_uint8 __pyx_v_type_byte;
  __pyx_t_6mylibc_int32 __pyx_v_type_int;
  __pyx_t_6mylibc_int16 __pyx_v_type_short;
  std::string __pyx_v_type_string;
  PyObject *__pyx_v_ret;
  PyObject *__pyx_v_datatype;
  bool __pyx_v_cret;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("getValueFromType");
  __pyx_v_ret = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_datatype = Py_None; __Pyx_INCREF(Py_None);

  /* "libopenzwave.pyx":275
 *         cdef int16 type_short
 *         cdef string type_string
 *         ret = None             # <<<<<<<<<<<<<<
 *         if values_map.find(valueId) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(valueId).GetType()]
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF(__pyx_v_ret);
  __pyx_v_ret = Py_None;

  /* "libopenzwave.pyx":276
 *         cdef string type_string
 *         ret = None
 *         if values_map.find(valueId) != values_map.end():             # <<<<<<<<<<<<<<
 *             datatype = PyValueTypes[values_map.at(valueId).GetType()]
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":277
 *         ret = None
 *         if values_map.find(valueId) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(valueId).GetType()]             # <<<<<<<<<<<<<<
 * 
 *             if datatype == "Bool":
 */
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__PyValueTypes); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = PyInt_FromLong(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1).GetType()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_GetItem(__pyx_t_3, __pyx_t_4); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_v_datatype);
    __pyx_v_datatype = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "libopenzwave.pyx":279
 *             datatype = PyValueTypes[values_map.at(valueId).GetType()]
 * 
 *             if datatype == "Bool":             # <<<<<<<<<<<<<<
 *                 cret = manager.GetValueAsBool(values_map.at(valueId), &type_bool)
 *                 ret = type_bool if cret else None
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Bool), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":280
 * 
 *             if datatype == "Bool":
 *                 cret = manager.GetValueAsBool(values_map.at(valueId), &type_bool)             # <<<<<<<<<<<<<<
 *                 ret = type_bool if cret else None
 *             elif datatype == "Byte":
 */
      __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_manager->GetValueAsBool(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_bool));

      /* "libopenzwave.pyx":281
 *             if datatype == "Bool":
 *                 cret = manager.GetValueAsBool(values_map.at(valueId), &type_bool)
 *                 ret = type_bool if cret else None             # <<<<<<<<<<<<<<
 *             elif datatype == "Byte":
 *                 cret = manager.GetValueAsByte(values_map.at(valueId), &type_byte)
 */
      if (__pyx_v_cret) {
        __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_type_bool); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __pyx_t_4;
        __pyx_t_4 = 0;
      } else {
        __Pyx_INCREF(Py_None);
        __pyx_t_5 = Py_None;
      }
      __Pyx_DECREF(__pyx_v_ret);
      __pyx_v_ret = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L4;
    }

    /* "libopenzwave.pyx":282
 *                 cret = manager.GetValueAsBool(values_map.at(valueId), &type_bool)
 *                 ret = type_bool if cret else None
 *             elif datatype == "Byte":             # <<<<<<<<<<<<<<
 *                 cret = manager.GetValueAsByte(values_map.at(valueId), &type_byte)
 *                 ret = type_byte if cret else None
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Byte), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":283
 *                 ret = type_bool if cret else None
 *             elif datatype == "Byte":
 *                 cret = manager.GetValueAsByte(values_map.at(valueId), &type_byte)             # <<<<<<<<<<<<<<
 *                 ret = type_byte if cret else None
 *             elif datatype == "Decimal":
 */
      __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_manager->GetValueAsByte(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_byte));

      /* "libopenzwave.pyx":284
 *             elif datatype == "Byte":
 *                 cret = manager.GetValueAsByte(values_map.at(valueId), &type_byte)
 *                 ret = type_byte if cret else None             # <<<<<<<<<<<<<<
 *             elif datatype == "Decimal":
 *                 cret = manager.GetValueAsFloat(values_map.at(valueId), &type_float)
 */
      if (__pyx_v_cret) {
        __pyx_t_4 = PyInt_FromLong(__pyx_v_type_byte); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __pyx_t_4;
        __pyx_t_4 = 0;
      } else {
        __Pyx_INCREF(Py_None);
        __pyx_t_5 = Py_None;
      }
      __Pyx_DECREF(__pyx_v_ret);
      __pyx_v_ret = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L4;
    }

    /* "libopenzwave.pyx":285
 *                 cret = manager.GetValueAsByte(values_map.at(valueId), &type_byte)
 *                 ret = type_byte if cret else None
 *             elif datatype == "Decimal":             # <<<<<<<<<<<<<<
 *                 cret = manager.GetValueAsFloat(values_map.at(valueId), &type_float)
 *                 ret = type_float if cret else None
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Decimal), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":286
 *                 ret = type_byte if cret else None
 *             elif datatype == "Decimal":
 *                 cret = manager.GetValueAsFloat(values_map.at(valueId), &type_float)             # <<<<<<<<<<<<<<
 *                 ret = type_float if cret else None
 *             elif datatype == "Int":
 */
      __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_manager->GetValueAsFloat(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_float));

      /* "libopenzwave.pyx":287
 *             elif datatype == "Decimal":
 *                 cret = manager.GetValueAsFloat(values_map.at(valueId), &type_float)
 *                 ret = type_float if cret else None             # <<<<<<<<<<<<<<
 *             elif datatype == "Int":
 *                 cret = manager.GetValueAsInt(values_map.at(valueId), &type_int)
 */
      if (__pyx_v_cret) {
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_type_float); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __pyx_t_4;
        __pyx_t_4 = 0;
      } else {
        __Pyx_INCREF(Py_None);
        __pyx_t_5 = Py_None;
      }
      __Pyx_DECREF(__pyx_v_ret);
      __pyx_v_ret = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L4;
    }

    /* "libopenzwave.pyx":288
 *                 cret = manager.GetValueAsFloat(values_map.at(valueId), &type_float)
 *                 ret = type_float if cret else None
 *             elif datatype == "Int":             # <<<<<<<<<<<<<<
 *                 cret = manager.GetValueAsInt(values_map.at(valueId), &type_int)
 *                 ret = type_int if cret else None
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Int), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":289
 *                 ret = type_float if cret else None
 *             elif datatype == "Int":
 *                 cret = manager.GetValueAsInt(values_map.at(valueId), &type_int)             # <<<<<<<<<<<<<<
 *                 ret = type_int if cret else None
 *             elif datatype == "Short":
 */
      __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_manager->GetValueAsInt(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_int));

      /* "libopenzwave.pyx":290
 *             elif datatype == "Int":
 *                 cret = manager.GetValueAsInt(values_map.at(valueId), &type_int)
 *                 ret = type_int if cret else None             # <<<<<<<<<<<<<<
 *             elif datatype == "Short":
 *                 cret = manager.GetValueAsShort(values_map.at(valueId), &type_short)
 */
      if (__pyx_v_cret) {
        __pyx_t_4 = PyInt_FromLong(__pyx_v_type_int); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __pyx_t_4;
        __pyx_t_4 = 0;
      } else {
        __Pyx_INCREF(Py_None);
        __pyx_t_5 = Py_None;
      }
      __Pyx_DECREF(__pyx_v_ret);
      __pyx_v_ret = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L4;
    }

    /* "libopenzwave.pyx":291
 *                 cret = manager.GetValueAsInt(values_map.at(valueId), &type_int)
 *                 ret = type_int if cret else None
 *             elif datatype == "Short":             # <<<<<<<<<<<<<<
 *                 cret = manager.GetValueAsShort(values_map.at(valueId), &type_short)
 *                 ret = type_short if cret else None
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Short), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":292
 *                 ret = type_int if cret else None
 *             elif datatype == "Short":
 *                 cret = manager.GetValueAsShort(values_map.at(valueId), &type_short)             # <<<<<<<<<<<<<<
 *                 ret = type_short if cret else None
 *             elif datatype == "String":
 */
      __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_manager->GetValueAsShort(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_short));

      /* "libopenzwave.pyx":293
 *             elif datatype == "Short":
 *                 cret = manager.GetValueAsShort(values_map.at(valueId), &type_short)
 *                 ret = type_short if cret else None             # <<<<<<<<<<<<<<
 *             elif datatype == "String":
 *                 cret = manager.GetValueAsString(values_map.at(valueId), &type_string)
 */
      if (__pyx_v_cret) {
        __pyx_t_4 = PyInt_FromLong(__pyx_v_type_short); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __pyx_t_4;
        __pyx_t_4 = 0;
      } else {
        __Pyx_INCREF(Py_None);
        __pyx_t_5 = Py_None;
      }
      __Pyx_DECREF(__pyx_v_ret);
      __pyx_v_ret = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L4;
    }

    /* "libopenzwave.pyx":294
 *                 cret = manager.GetValueAsShort(values_map.at(valueId), &type_short)
 *                 ret = type_short if cret else None
 *             elif datatype == "String":             # <<<<<<<<<<<<<<
 *                 cret = manager.GetValueAsString(values_map.at(valueId), &type_string)
 *                 ret = type_string.c_str() if cret else None
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__String), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":295
 *                 ret = type_short if cret else None
 *             elif datatype == "String":
 *                 cret = manager.GetValueAsString(values_map.at(valueId), &type_string)             # <<<<<<<<<<<<<<
 *                 ret = type_string.c_str() if cret else None
 *             else :
 */
      __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_manager->GetValueAsString(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_string));

      /* "libopenzwave.pyx":296
 *             elif datatype == "String":
 *                 cret = manager.GetValueAsString(values_map.at(valueId), &type_string)
 *                 ret = type_string.c_str() if cret else None             # <<<<<<<<<<<<<<
 *             else :
 *                 cret = manager.GetValueAsString(values_map.at(valueId), &type_string)
 */
      if (__pyx_v_cret) {
        __pyx_t_4 = PyBytes_FromString(__pyx_v_type_string.c_str()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_4));
        __pyx_t_5 = __pyx_t_4;
        __pyx_t_4 = 0;
      } else {
        __Pyx_INCREF(Py_None);
        __pyx_t_5 = Py_None;
      }
      __Pyx_DECREF(__pyx_v_ret);
      __pyx_v_ret = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L4;
    }
    /*else*/ {

      /* "libopenzwave.pyx":298
 *                 ret = type_string.c_str() if cret else None
 *             else :
 *                 cret = manager.GetValueAsString(values_map.at(valueId), &type_string)             # <<<<<<<<<<<<<<
 *                 ret = type_string.c_str() if cret else None
 * 
 */
      __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_manager->GetValueAsString(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_string));

      /* "libopenzwave.pyx":299
 *             else :
 *                 cret = manager.GetValueAsString(values_map.at(valueId), &type_string)
 *                 ret = type_string.c_str() if cret else None             # <<<<<<<<<<<<<<
 * 
 *         return ret
 */
      if (__pyx_v_cret) {
        __pyx_t_4 = PyBytes_FromString(__pyx_v_type_string.c_str()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_4));
        __pyx_t_5 = __pyx_t_4;
        __pyx_t_4 = 0;
      } else {
        __Pyx_INCREF(Py_None);
        __pyx_t_5 = Py_None;
      }
      __Pyx_DECREF(__pyx_v_ret);
      __pyx_v_ret = __pyx_t_5;
      __pyx_t_5 = 0;
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "libopenzwave.pyx":301
 *                 ret = type_string.c_str() if cret else None
 * 
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * cdef addValueId(ValueID v, n):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("libopenzwave.getValueFromType");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_ret);
  __Pyx_DECREF(__pyx_v_datatype);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":303
 *         return ret
 * 
 * cdef addValueId(ValueID v, n):             # <<<<<<<<<<<<<<
 *     #cdef string value
 *     cdef string label
 */

static  PyObject *__pyx_f_12libopenzwave_addValueId(OpenZWave::ValueID __pyx_v_v, PyObject *__pyx_v_n) {
  std::string __pyx_v_label;
  std::string __pyx_v_units;
  OpenZWave::Manager *__pyx_v_manager;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __pyx_t_6mylibc_uint8 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("addValueId");

  /* "libopenzwave.pyx":307
 *     cdef string label
 *     cdef string units
 *     cdef Manager *manager = Get()             # <<<<<<<<<<<<<<
 *     #manager.GetValueAsString(v, &value)
 *     label = manager.GetValueLabel(v)
 */
  __pyx_v_manager = OpenZWave::Manager::Get();

  /* "libopenzwave.pyx":309
 *     cdef Manager *manager = Get()
 *     #manager.GetValueAsString(v, &value)
 *     label = manager.GetValueLabel(v)             # <<<<<<<<<<<<<<
 *     units = manager.GetValueUnits(v)
 *     n['valueId'] = {'homeId' : v.GetHomeId(),
 */
  __pyx_v_label = __pyx_v_manager->GetValueLabel(__pyx_v_v);

  /* "libopenzwave.pyx":310
 *     #manager.GetValueAsString(v, &value)
 *     label = manager.GetValueLabel(v)
 *     units = manager.GetValueUnits(v)             # <<<<<<<<<<<<<<
 *     n['valueId'] = {'homeId' : v.GetHomeId(),
 *                     'nodeId' : v.GetNodeId(),
 */
  __pyx_v_units = __pyx_v_manager->GetValueUnits(__pyx_v_v);

  /* "libopenzwave.pyx":311
 *     label = manager.GetValueLabel(v)
 *     units = manager.GetValueUnits(v)
 *     n['valueId'] = {'homeId' : v.GetHomeId(),             # <<<<<<<<<<<<<<
 *                     'nodeId' : v.GetNodeId(),
 *                     'commandClass' : PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_v.GetHomeId()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__homeId), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":312
 *     units = manager.GetValueUnits(v)
 *     n['valueId'] = {'homeId' : v.GetHomeId(),
 *                     'nodeId' : v.GetNodeId(),             # <<<<<<<<<<<<<<
 *                     'commandClass' : PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],
 *                     'instance' : v.GetInstance(),
 */
  __pyx_t_2 = PyInt_FromLong(__pyx_v_v.GetNodeId()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__nodeId), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":313
 *     n['valueId'] = {'homeId' : v.GetHomeId(),
 *                     'nodeId' : v.GetNodeId(),
 *                     'commandClass' : PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],             # <<<<<<<<<<<<<<
 *                     'instance' : v.GetInstance(),
 *                     'index' : v.GetIndex(),
 */
  __pyx_t_2 = PyObject_GetAttr(((PyObject *)((PyObject*)__pyx_ptype_12libopenzwave_PyManager)), __pyx_n_s__COMMAND_CLASS_DESC); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_v_v.GetCommandClassId();
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_2, __pyx_t_3, sizeof(__pyx_t_6mylibc_uint8)+1, PyInt_FromLong); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__commandClass), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "libopenzwave.pyx":314
 *                     'nodeId' : v.GetNodeId(),
 *                     'commandClass' : PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],
 *                     'instance' : v.GetInstance(),             # <<<<<<<<<<<<<<
 *                     'index' : v.GetIndex(),
 *                     'id' : v.GetId(),
 */
  __pyx_t_4 = PyInt_FromLong(__pyx_v_v.GetInstance()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__instance), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "libopenzwave.pyx":315
 *                     'commandClass' : PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],
 *                     'instance' : v.GetInstance(),
 *                     'index' : v.GetIndex(),             # <<<<<<<<<<<<<<
 *                     'id' : v.GetId(),
 *                     'genre' : PyGenres[v.GetGenre()],
 */
  __pyx_t_4 = PyInt_FromLong(__pyx_v_v.GetIndex()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__index), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "libopenzwave.pyx":316
 *                     'instance' : v.GetInstance(),
 *                     'index' : v.GetIndex(),
 *                     'id' : v.GetId(),             # <<<<<<<<<<<<<<
 *                     'genre' : PyGenres[v.GetGenre()],
 *                     'type' : PyValueTypes[v.GetType()],
 */
  __pyx_t_4 = PyLong_FromUnsignedLong(__pyx_v_v.GetId()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__id), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "libopenzwave.pyx":317
 *                     'index' : v.GetIndex(),
 *                     'id' : v.GetId(),
 *                     'genre' : PyGenres[v.GetGenre()],             # <<<<<<<<<<<<<<
 *                     'type' : PyValueTypes[v.GetType()],
 * #                    'value' : value.c_str(),
 */
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__PyGenres); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_v.GetGenre()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyObject_GetItem(__pyx_t_4, __pyx_t_2); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__genre), __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "libopenzwave.pyx":318
 *                     'id' : v.GetId(),
 *                     'genre' : PyGenres[v.GetGenre()],
 *                     'type' : PyValueTypes[v.GetType()],             # <<<<<<<<<<<<<<
 * #                    'value' : value.c_str(),
 *                     'value' : getValueFromType(manager,v.GetId()),
 */
  __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__PyValueTypes); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_v.GetType()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_GetItem(__pyx_t_5, __pyx_t_2); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__type), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "libopenzwave.pyx":320
 *                     'type' : PyValueTypes[v.GetType()],
 * #                    'value' : value.c_str(),
 *                     'value' : getValueFromType(manager,v.GetId()),             # <<<<<<<<<<<<<<
 *                     'label' : label.c_str(),
 *                     'units' : units.c_str(),
 */
  __pyx_t_4 = PyLong_FromUnsignedLong(__pyx_v_v.GetId()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __pyx_f_12libopenzwave_getValueFromType(__pyx_v_manager, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__value), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":321
 * #                    'value' : value.c_str(),
 *                     'value' : getValueFromType(manager,v.GetId()),
 *                     'label' : label.c_str(),             # <<<<<<<<<<<<<<
 *                     'units' : units.c_str(),
 *                     'readOnly': manager.IsValueReadOnly(v),
 */
  __pyx_t_2 = PyBytes_FromString(__pyx_v_label.c_str()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__label), ((PyObject *)__pyx_t_2)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":322
 *                     'value' : getValueFromType(manager,v.GetId()),
 *                     'label' : label.c_str(),
 *                     'units' : units.c_str(),             # <<<<<<<<<<<<<<
 *                     'readOnly': manager.IsValueReadOnly(v),
 *                     }
 */
  __pyx_t_2 = PyBytes_FromString(__pyx_v_units.c_str()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__units), ((PyObject *)__pyx_t_2)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":323
 *                     'label' : label.c_str(),
 *                     'units' : units.c_str(),
 *                     'readOnly': manager.IsValueReadOnly(v),             # <<<<<<<<<<<<<<
 *                     }
 * 
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_manager->IsValueReadOnly(__pyx_v_v)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__readOnly), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":311
 *     label = manager.GetValueLabel(v)
 *     units = manager.GetValueUnits(v)
 *     n['valueId'] = {'homeId' : v.GetHomeId(),             # <<<<<<<<<<<<<<
 *                     'nodeId' : v.GetNodeId(),
 *                     'commandClass' : PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],
 */
  if (PyObject_SetItem(__pyx_v_n, ((PyObject *)__pyx_n_s__valueId), ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":326
 *                     }
 * 
 *     values_map.insert ( pair[uint64, ValueID] (v.GetId(), v))             # <<<<<<<<<<<<<<
 * 
 * cdef void callback(const_notification _notification, void* _context) with gil:
 */
  __pyx_v_12libopenzwave_values_map.insert(((std::pair<__pyx_t_6mylibc_uint64,OpenZWave::ValueID>)std::pair<__pyx_t_6mylibc_uint64,OpenZWave::ValueID>(__pyx_v_v.GetId(), __pyx_v_v)));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("libopenzwave.addValueId");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":328
 *     values_map.insert ( pair[uint64, ValueID] (v.GetId(), v))
 * 
 * cdef void callback(const_notification _notification, void* _context) with gil:             # <<<<<<<<<<<<<<
 *     cdef Notification* notification = <Notification*>_notification
 * 
 */

static  void __pyx_f_12libopenzwave_callback(OpenZWave::Notification const* __pyx_v__notification, void *__pyx_v__context) {
  OpenZWave::Notification *__pyx_v_notification;
  PyObject *__pyx_v_n;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  #ifdef WITH_THREAD
  PyGILState_STATE _save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("callback");
  __pyx_v_n = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);

  /* "libopenzwave.pyx":329
 * 
 * cdef void callback(const_notification _notification, void* _context) with gil:
 *     cdef Notification* notification = <Notification*>_notification             # <<<<<<<<<<<<<<
 * 
 *     n = {'notificationType' : PyNotifications[notification.GetType()],
 */
  __pyx_v_notification = ((OpenZWave::Notification *)__pyx_v__notification);

  /* "libopenzwave.pyx":331
 *     cdef Notification* notification = <Notification*>_notification
 * 
 *     n = {'notificationType' : PyNotifications[notification.GetType()],             # <<<<<<<<<<<<<<
 *          'homeId' : notification.GetHomeId(),
 *          'nodeId' : notification.GetNodeId(),
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__PyNotifications); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(__pyx_v_notification->GetType()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_GetItem(__pyx_t_2, __pyx_t_3); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__notificationType), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "libopenzwave.pyx":332
 * 
 *     n = {'notificationType' : PyNotifications[notification.GetType()],
 *          'homeId' : notification.GetHomeId(),             # <<<<<<<<<<<<<<
 *          'nodeId' : notification.GetNodeId(),
 *          }
 */
  __pyx_t_4 = PyLong_FromUnsignedLong(__pyx_v_notification->GetHomeId()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__homeId), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "libopenzwave.pyx":333
 *     n = {'notificationType' : PyNotifications[notification.GetType()],
 *          'homeId' : notification.GetHomeId(),
 *          'nodeId' : notification.GetNodeId(),             # <<<<<<<<<<<<<<
 *          }
 *     if notification.GetType() == Type_Group:
 */
  __pyx_t_4 = PyInt_FromLong(__pyx_v_notification->GetNodeId()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__nodeId), __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_v_n));
  __pyx_v_n = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "libopenzwave.pyx":335
 *          'nodeId' : notification.GetNodeId(),
 *          }
 *     if notification.GetType() == Type_Group:             # <<<<<<<<<<<<<<
 *         n['groupIdx'] = notification.GetGroupIdx()
 *     if notification.GetType() == Type_NodeEvent:
 */
  __pyx_t_5 = (__pyx_v_notification->GetType() == OpenZWave::Notification::Type_Group);
  if (__pyx_t_5) {

    /* "libopenzwave.pyx":336
 *          }
 *     if notification.GetType() == Type_Group:
 *         n['groupIdx'] = notification.GetGroupIdx()             # <<<<<<<<<<<<<<
 *     if notification.GetType() == Type_NodeEvent:
 *         n['event'] = notification.GetEvent()
 */
    __pyx_t_1 = PyInt_FromLong(__pyx_v_notification->GetGroupIdx()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(((PyObject *)__pyx_v_n), ((PyObject *)__pyx_n_s__groupIdx), __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "libopenzwave.pyx":337
 *     if notification.GetType() == Type_Group:
 *         n['groupIdx'] = notification.GetGroupIdx()
 *     if notification.GetType() == Type_NodeEvent:             # <<<<<<<<<<<<<<
 *         n['event'] = notification.GetEvent()
 * 
 */
  __pyx_t_5 = (__pyx_v_notification->GetType() == OpenZWave::Notification::Type_NodeEvent);
  if (__pyx_t_5) {

    /* "libopenzwave.pyx":338
 *         n['groupIdx'] = notification.GetGroupIdx()
 *     if notification.GetType() == Type_NodeEvent:
 *         n['event'] = notification.GetEvent()             # <<<<<<<<<<<<<<
 * 
 *     addValueId(notification.GetValueID(), n)
 */
    __pyx_t_1 = PyInt_FromLong(__pyx_v_notification->GetEvent()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(((PyObject *)__pyx_v_n), ((PyObject *)__pyx_n_s__event), __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "libopenzwave.pyx":340
 *         n['event'] = notification.GetEvent()
 * 
 *     addValueId(notification.GetValueID(), n)             # <<<<<<<<<<<<<<
 *     (<object>_context)(n)
 * 
 */
  __pyx_t_1 = __pyx_f_12libopenzwave_addValueId(__pyx_v_notification->GetValueID(), ((PyObject *)__pyx_v_n)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":341
 * 
 *     addValueId(notification.GetValueID(), n)
 *     (<object>_context)(n)             # <<<<<<<<<<<<<<
 * 
 * cpdef object driverData():
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_v_n));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_n));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_n));
  __pyx_t_4 = PyObject_Call(((PyObject *)__pyx_v__context), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("libopenzwave.callback");
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_n);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(_save);
  #endif
}

/* "libopenzwave.pyx":343
 *     (<object>_context)(n)
 * 
 * cpdef object driverData():             # <<<<<<<<<<<<<<
 *     cdef DriverData data
 * 
 */

static PyObject *__pyx_pf_12libopenzwave_driverData(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static  PyObject *__pyx_f_12libopenzwave_driverData(int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("driverData");

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_driverData(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_12libopenzwave_driverData(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("driverData");
  __pyx_self = __pyx_self;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12libopenzwave_driverData(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.driverData");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":489
 *     cdef object _watcherCallback
 * 
 *     def create(self):             # <<<<<<<<<<<<<<
 *         '''
 * .. _create:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_create(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_create[] = "\n.. _create:\n\nCreates the Manager singleton object.\n\nThe Manager provides the public interface to OpenZWave, exposing all the\nfunctionality required to add Z-Wave support to an application. There can be\nonly one Manager in an OpenZWave application.  An Options object must be\ncreated and Locked first, otherwise the call to Manager::Create will fail.\nOnce the Manager has been created, call AddWatcher to install a notification\ncallback handler, and then call the AddDriver method for each attached PC\nZ-Wave controller in turn.\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_create(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("create");

  /* "libopenzwave.pyx":503
 * Z-Wave controller in turn.
 *         '''
 *         self.manager = Create()             # <<<<<<<<<<<<<<
 *         PyEval_InitThreads()
 * #
 */
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager = OpenZWave::Manager::Create();

  /* "libopenzwave.pyx":504
 *         '''
 *         self.manager = Create()
 *         PyEval_InitThreads()             # <<<<<<<<<<<<<<
 * #
 * # -----------------------------------------------------------------------------
 */
  PyEval_InitThreads();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":512
 * # polled every time the application starts.
 * #
 *     def writeConfig(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * Saves the configuration of a PC Controller's Z-Wave network to the
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_1writeConfig(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_1writeConfig[] = "\nSaves the configuration of a PC Controller's Z-Wave network to the\napplication's user data folder.\n\nThis method does not normally need to be called, since OpenZWave will save the\nstate automatically during the shutdown process.  It is provided here only as\nan aid to development. The configuration of each PC Controller's Z-Wave network\nis stored in a separate file.  The filename consists of the 8 digit hexadecimal\nversion of the controller's Home ID, prefixed with the string \"zwcfg_*\".  This\nconvention allows OpenZWave to find the correct configuration file for a\ncontroller, even if it is attached to a different serial port, USB device path,\netc.\n\n:param homeId: The Home ID of the Z-Wave controller to save.\n:type homeId: int\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_1writeConfig(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __Pyx_RefNannySetupContext("writeConfig");

  /* "libopenzwave.pyx":530
 * 
 *         '''
 *         self.manager.WriteConfig(homeid)             # <<<<<<<<<<<<<<
 * #
 * # -----------------------------------------------------------------------------
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->WriteConfig(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.writeConfig");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":537
 * # Methods for adding and removing drivers and obtaining basic controller information.
 * #
 *     def addDriver(self, char *serialport):             # <<<<<<<<<<<<<<
 *         '''
 * .. _addDriver:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_2addDriver(PyObject *__pyx_v_self, PyObject *__pyx_arg_serialport); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_2addDriver[] = "\n.. _addDriver:\n\nCreates a new driver for a Z-Wave controller.\n\nThis method creates a Driver object for handling communications with a single\nZ-Wave controller.  In the background, the driver first tries to read\nconfiguration data saved during a previous run.  It then queries the controller\ndirectly for any missing information, and a refresh of the list of nodes that\nit controls.  Once this information has been received, a DriverReady\nnotification callback is sent, containing the Home ID of the controller.  This\nHome ID is required by most of the OpenZWave Manager class methods.\n\n:param serialport: The string used to open the controller.  On Windows this might be something like \"\\.\\COM3\", or on Linux \"/dev/ttyUSB0\".\n:type serialport: str\n:returns: bool -- True if a new driver was created\n:see: removeDriver_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_2addDriver(PyObject *__pyx_v_self, PyObject *__pyx_arg_serialport) {
  char *__pyx_v_serialport;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("addDriver");
  assert(__pyx_arg_serialport); {
    __pyx_v_serialport = PyBytes_AsString(__pyx_arg_serialport); if (unlikely((!__pyx_v_serialport) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 537; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.addDriver");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":556
 * :see: removeDriver_
 *         '''
 *         self.manager.AddDriver(string(serialport))             # <<<<<<<<<<<<<<
 * 
 *     def removeDriver(self, char *serialport):
 */
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->AddDriver(std::string(__pyx_v_serialport));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":558
 *         self.manager.AddDriver(string(serialport))
 * 
 *     def removeDriver(self, char *serialport):             # <<<<<<<<<<<<<<
 *         '''
 * .. _removeDriver:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_3removeDriver(PyObject *__pyx_v_self, PyObject *__pyx_arg_serialport); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_3removeDriver[] = "\n.. _removeDriver:\n\nRemoves the driver for a Z-Wave controller, and closes the controller.\n\nDrivers do not need to be explicitly removed before calling Destroy - this is\nhandled automatically.\n\n:param serialport: The same string as was passed in the original call toAddDriver.\n:type serialport: str\n:returns: bool -- True if the driver was removed, False if it could not be found.\n:see: addDriver_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_3removeDriver(PyObject *__pyx_v_self, PyObject *__pyx_arg_serialport) {
  char *__pyx_v_serialport;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("removeDriver");
  assert(__pyx_arg_serialport); {
    __pyx_v_serialport = PyBytes_AsString(__pyx_arg_serialport); if (unlikely((!__pyx_v_serialport) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 558; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.removeDriver");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":572
 * :see: addDriver_
 *         '''
 *         self.manager.RemoveDriver(string(serialport))             # <<<<<<<<<<<<<<
 * 
 *     def getControllerNodeId(self, homeid):
 */
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->RemoveDriver(std::string(__pyx_v_serialport));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":574
 *         self.manager.RemoveDriver(string(serialport))
 * 
 *     def getControllerNodeId(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getControllerNodeId:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_4getControllerNodeId(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_4getControllerNodeId[] = "\n.. _getControllerNodeId:\n\nGet the node ID of the Z-Wave controller.\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:returns: int -- the node ID of the Z-Wave controller\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_4getControllerNodeId(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getControllerNodeId");

  /* "libopenzwave.pyx":584
 * :returns: int -- the node ID of the Z-Wave controller
 *         '''
 *         return self.manager.GetControllerNodeId(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def isPrimaryController(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetControllerNodeId(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.getControllerNodeId");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":586
 *         return self.manager.GetControllerNodeId(homeid)
 * 
 *     def isPrimaryController(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isPrimaryController:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_5isPrimaryController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_5isPrimaryController[] = "\n.. _isPrimaryController:\n\nQuery if the controller is a primary controller.\n\nThe primary controller is the main device used to configure and control a\nZ-Wave network.  There can only be one primary controller - all other\ncontrollers are secondary controllers.\n\nThe only difference between a primary and secondary controller is that the\nprimary is the only one that can be used to add or remove other devices.  For\nthis reason, it is usually better for the promary controller to be portable,\nsince most devices must be added when installed in their final location.\n\nCalls to BeginControllerCommand will fail if the controller is not the primary.\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:returns: bool -- True if it is a primary controller, False if not.\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_5isPrimaryController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("isPrimaryController");

  /* "libopenzwave.pyx":607
 * :returns: bool -- True if it is a primary controller, False if not.
 *         '''
 *         return self.manager.IsPrimaryController(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def isStaticUpdateController(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->IsPrimaryController(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.isPrimaryController");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":609
 *         return self.manager.IsPrimaryController(homeid)
 * 
 *     def isStaticUpdateController(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isStaticUpdateController:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_6isStaticUpdateController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_6isStaticUpdateController[] = "\n.. _isStaticUpdateController:\n\nQuery if the controller is a static update controller (SUC).\n\nA Static Update Controller (SUC) is a controller that must never be moved in\nnormal operation and which can be used by other nodes to receive information\nabout network changes.\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:returns: bool -- True if it is a static update controller, False if not.\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_6isStaticUpdateController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("isStaticUpdateController");

  /* "libopenzwave.pyx":623
 * :returns: bool -- True if it is a static update controller, False if not.
 *         '''
 *         return self.manager.IsStaticUpdateController(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def isBridgeController(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 623; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->IsStaticUpdateController(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 623; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.isStaticUpdateController");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":625
 *         return self.manager.IsStaticUpdateController(homeid)
 * 
 *     def isBridgeController(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isBridgeController:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_7isBridgeController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_7isBridgeController[] = "\n.. _isBridgeController:\n\nQuery if the controller is using the bridge controller library.\n\nA bridge controller is able to create virtual nodes that can be associated\nwith other controllers to enable events to be passed on.\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:returns: bool -- True if it is a bridge controller, False if not.\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_7isBridgeController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("isBridgeController");

  /* "libopenzwave.pyx":638
 * :returns: bool -- True if it is a bridge controller, False if not.
 *         '''
 *         return self.manager.IsBridgeController(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def getLibraryVersion(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->IsBridgeController(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.isBridgeController");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":640
 *         return self.manager.IsBridgeController(homeid)
 * 
 *     def getLibraryVersion(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getLibraryVersion:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_8getLibraryVersion(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_8getLibraryVersion[] = "\n.. _getLibraryVersion:\n\nGet the version of the Z-Wave API library used by a controller.\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:returns: str -- A string containing the library version. For example, \"Z-Wave 2.48\".\n:see: getLibraryConfigPath_, getLibraryTypeName_, getPythonLibraryVersion_, getLibraryTypeName_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_8getLibraryVersion(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getLibraryVersion");

  /* "libopenzwave.pyx":651
 * :see: getLibraryConfigPath_, getLibraryTypeName_, getPythonLibraryVersion_, getLibraryTypeName_
 *         '''
 *         cdef string c_string = self.manager.GetLibraryVersion(homeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetLibraryVersion(__pyx_t_1);

  /* "libopenzwave.pyx":652
 *         '''
 *         cdef string c_string = self.manager.GetLibraryVersion(homeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getLibraryConfigPath(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.getLibraryVersion");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":654
 *         return c_string.c_str()
 * 
 *     def getLibraryConfigPath(self):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getLibraryConfigPath:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_9getLibraryConfigPath(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_9getLibraryConfigPath[] = "\n.. _getLibraryConfigPath:\n\nRetrieve the libray config path. This the directory holding the xml files.\n\n:returns: str -- A string containing the library config path or None.\n:see: getLibraryVersion_, getLibraryTypeName_, getPythonLibraryVersion_, getLibraryTypeName_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_9getLibraryConfigPath(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("getLibraryConfigPath");

  /* "libopenzwave.pyx":663
 * :see: getLibraryVersion_, getLibraryTypeName_, getPythonLibraryVersion_, getLibraryTypeName_
 *         '''
 *         if os.path.exists(os.path.join("/usr",OZWAVE_CONFIG_DIRECTORY)):             # <<<<<<<<<<<<<<
 *             return os.path.join("/usr",OZWAVE_CONFIG_DIRECTORY)
 *         elif os.path.exists(os.path.join("/usr/local",OZWAVE_CONFIG_DIRECTORY)):
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__path); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__exists); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__path); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__join); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_2));
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_kp_s_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_2));
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_5) {

    /* "libopenzwave.pyx":664
 *         '''
 *         if os.path.exists(os.path.join("/usr",OZWAVE_CONFIG_DIRECTORY)):
 *             return os.path.join("/usr",OZWAVE_CONFIG_DIRECTORY)             # <<<<<<<<<<<<<<
 *         elif os.path.exists(os.path.join("/usr/local",OZWAVE_CONFIG_DIRECTORY)):
 *             return os.path.join("/usr/local",OZWAVE_CONFIG_DIRECTORY)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__path); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__join); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __Pyx_INCREF(((PyObject *)__pyx_kp_s_2));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_kp_s_2));
    __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_2));
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }

  /* "libopenzwave.pyx":665
 *         if os.path.exists(os.path.join("/usr",OZWAVE_CONFIG_DIRECTORY)):
 *             return os.path.join("/usr",OZWAVE_CONFIG_DIRECTORY)
 *         elif os.path.exists(os.path.join("/usr/local",OZWAVE_CONFIG_DIRECTORY)):             # <<<<<<<<<<<<<<
 *             return os.path.join("/usr/local",OZWAVE_CONFIG_DIRECTORY)
 *         else:
 */
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__path); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__exists); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__path); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__join); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_5) {

    /* "libopenzwave.pyx":666
 *             return os.path.join("/usr",OZWAVE_CONFIG_DIRECTORY)
 *         elif os.path.exists(os.path.join("/usr/local",OZWAVE_CONFIG_DIRECTORY)):
 *             return os.path.join("/usr/local",OZWAVE_CONFIG_DIRECTORY)             # <<<<<<<<<<<<<<
 *         else:
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__os); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__path); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__join); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_kp_s_4));
    __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "libopenzwave.pyx":668
 *             return os.path.join("/usr/local",OZWAVE_CONFIG_DIRECTORY)
 *         else:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def getPythonLibraryVersion(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libopenzwave.PyManager.getLibraryConfigPath");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":670
 *             return None
 * 
 *     def getPythonLibraryVersion(self):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getPythonLibraryVersion:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_10getPythonLibraryVersion(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_10getPythonLibraryVersion[] = "\n.. _getPythonLibraryVersion:\n\nGet the version of the python library.\n\n:returns: str -- A string containing the python library version. For example, \"0.1\".\n:see: getLibraryVersion_, getLibraryTypeName_, getLibraryConfigPath_, getLibraryTypeName_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_10getPythonLibraryVersion(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getPythonLibraryVersion");

  /* "libopenzwave.pyx":679
 * :see: getLibraryVersion_, getLibraryTypeName_, getLibraryConfigPath_, getLibraryTypeName_
 *         '''
 *         return PYLIBRARY             # <<<<<<<<<<<<<<
 * 
 *     def getLibraryTypeName(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__PYLIBRARY); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.getPythonLibraryVersion");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":681
 *         return PYLIBRARY
 * 
 *     def getLibraryTypeName(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getLibraryTypeName:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_11getLibraryTypeName(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_11getLibraryTypeName[] = "\n.. _getLibraryTypeName:\n\nGet a string containing the Z-Wave API library type used by a controller.\n\nThe possible library types are:\n    - Static Controller\n    - Controller\n    - Enhanced Slave\n    - Slave\n    - Installer\n    - Routing Slave\n    - Bridge Controller\n    - Device Under Test\n\nThe controller should never return a slave library type.  For a more efficient\ntest of whether a controller is a Bridge Controller, use the IsBridgeController\nmethod.\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:returns: str -- A string containing the library type.\n:see: getLibraryVersion_, getPythonLibraryVersion_, getLibraryConfigPath_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_11getLibraryTypeName(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getLibraryTypeName");

  /* "libopenzwave.pyx":706
 * :see: getLibraryVersion_, getPythonLibraryVersion_, getLibraryConfigPath_
 *         '''
 *         cdef string c_string = self.manager.GetLibraryTypeName(homeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetLibraryTypeName(__pyx_t_1);

  /* "libopenzwave.pyx":707
 *         '''
 *         cdef string c_string = self.manager.GetLibraryTypeName(homeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getSendQueueCount(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.getLibraryTypeName");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":709
 *         return c_string.c_str()
 * 
 *     def getSendQueueCount(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getSendQueueCount:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_12getSendQueueCount(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_12getSendQueueCount[] = "\n.. _getSendQueueCount:\n\nGet count of messages in the outgoing send queue.\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:returns: int -- Message count\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_12getSendQueueCount(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getSendQueueCount");

  /* "libopenzwave.pyx":719
 * :returns: int -- Message count
 *         '''
 *         return self.manager.GetSendQueueCount(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def logDriverStatistics(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetSendQueueCount(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.getSendQueueCount");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":721
 *         return self.manager.GetSendQueueCount(homeid)
 * 
 *     def logDriverStatistics(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _logDriverStatistics:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_13logDriverStatistics(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_13logDriverStatistics[] = "\n.. _logDriverStatistics:\n\nSend current driver statistics to the log file.\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_13logDriverStatistics(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __Pyx_RefNannySetupContext("logDriverStatistics");

  /* "libopenzwave.pyx":730
 * :type homeId: int
 *         '''
 *         self.manager.LogDriverStatistics(homeid)             # <<<<<<<<<<<<<<
 * 
 * #-----------------------------------------------------------------------------
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 730; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->LogDriverStatistics(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.logDriverStatistics");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":735
 * # Statistics interface
 * #-----------------------------------------------------------------------------
 *     def getDriverStatistics(self, homeId):             # <<<<<<<<<<<<<<
 *         '''
 * Retrieve statistics from driver.
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_14getDriverStatistics(PyObject *__pyx_v_self, PyObject *__pyx_v_homeId); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_14getDriverStatistics[] = "\nRetrieve statistics from driver.\n\nStatistics:\n        s_SOFCnt                         Number of SOF bytes received\n        s_ACKWaiting                     Number of unsolicited messages while waiting for an ACK\n        s_readAborts                     Number of times read were aborted due to timeouts\n        s_badChecksum                    Number of bad checksums\n        s_readCnt                        Number of messages successfully read\n        s_writeCnt                       Number of messages successfully sent\n        s_CANCnt                         Number of CAN bytes received\n        s_NAKCnt                         Number of NAK bytes received\n        s_ACKCnt                         Number of ACK bytes received\n        s_OOFCnt                         Number of bytes out of framing\n        s_dropped                        Number of messages dropped & not delivered\n        s_retries                        Number of messages retransmitted\n        s_controllerReadCnt              Number of controller messages read\n        s_controllerWriteCnt             Number of controller messages sent\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:param data: Pointer to structure DriverData to return values\n:type data: int\n:return dict(): A dict containing statistics of the driver.\n:see: setNodeName\n       ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_14getDriverStatistics(PyObject *__pyx_v_self, PyObject *__pyx_v_homeId) {
  __pyx_t_6driver_DriverData_t __pyx_v_data;
  PyObject *__pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getDriverStatistics");
  __pyx_v_ret = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);

  /* "libopenzwave.pyx":763
 *        '''
 *         cdef DriverData_t data
 *         self.manager.GetDriverStatistics( homeId, &data );             # <<<<<<<<<<<<<<
 *         ret = {}
 *         ret['s_SOFCnt'] = data.s_SOFCnt
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeId); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetDriverStatistics(__pyx_t_1, (&__pyx_v_data));

  /* "libopenzwave.pyx":764
 *         cdef DriverData_t data
 *         self.manager.GetDriverStatistics( homeId, &data );
 *         ret = {}             # <<<<<<<<<<<<<<
 *         ret['s_SOFCnt'] = data.s_SOFCnt
 *         ret['s_ACKWaiting'] = data.s_ACKWaiting
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_DECREF(((PyObject *)__pyx_v_ret));
  __pyx_v_ret = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "libopenzwave.pyx":765
 *         self.manager.GetDriverStatistics( homeId, &data );
 *         ret = {}
 *         ret['s_SOFCnt'] = data.s_SOFCnt             # <<<<<<<<<<<<<<
 *         ret['s_ACKWaiting'] = data.s_ACKWaiting
 *         ret['s_readAborts'] = data.s_readAborts
 */
  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_data.s_SOFCnt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 765; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__s_SOFCnt), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 765; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":766
 *         ret = {}
 *         ret['s_SOFCnt'] = data.s_SOFCnt
 *         ret['s_ACKWaiting'] = data.s_ACKWaiting             # <<<<<<<<<<<<<<
 *         ret['s_readAborts'] = data.s_readAborts
 *         ret['s_badChecksum'] = data.s_badChecksum
 */
  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_data.s_ACKWaiting); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__s_ACKWaiting), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":767
 *         ret['s_SOFCnt'] = data.s_SOFCnt
 *         ret['s_ACKWaiting'] = data.s_ACKWaiting
 *         ret['s_readAborts'] = data.s_readAborts             # <<<<<<<<<<<<<<
 *         ret['s_badChecksum'] = data.s_badChecksum
 *         ret['s_readCnt'] = data.s_readCnt
 */
  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_data.s_readAborts); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__s_readAborts), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":768
 *         ret['s_ACKWaiting'] = data.s_ACKWaiting
 *         ret['s_readAborts'] = data.s_readAborts
 *         ret['s_badChecksum'] = data.s_badChecksum             # <<<<<<<<<<<<<<
 *         ret['s_readCnt'] = data.s_readCnt
 *         ret['s_writeCnt'] = data.s_writeCnt
 */
  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_data.s_badChecksum); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__s_badChecksum), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":769
 *         ret['s_readAborts'] = data.s_readAborts
 *         ret['s_badChecksum'] = data.s_badChecksum
 *         ret['s_readCnt'] = data.s_readCnt             # <<<<<<<<<<<<<<
 *         ret['s_writeCnt'] = data.s_writeCnt
 *         ret['s_CANCnt'] = data.s_CANCnt
 */
  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_data.s_readCnt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__s_readCnt), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":770
 *         ret['s_badChecksum'] = data.s_badChecksum
 *         ret['s_readCnt'] = data.s_readCnt
 *         ret['s_writeCnt'] = data.s_writeCnt             # <<<<<<<<<<<<<<
 *         ret['s_CANCnt'] = data.s_CANCnt
 *         ret['s_NAKCnt'] = data.s_NAKCnt
 */
  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_data.s_writeCnt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__s_writeCnt), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":771
 *         ret['s_readCnt'] = data.s_readCnt
 *         ret['s_writeCnt'] = data.s_writeCnt
 *         ret['s_CANCnt'] = data.s_CANCnt             # <<<<<<<<<<<<<<
 *         ret['s_NAKCnt'] = data.s_NAKCnt
 *         ret['s_ACKCnt'] = data.s_ACKCnt
 */
  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_data.s_CANCnt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__s_CANCnt), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":772
 *         ret['s_writeCnt'] = data.s_writeCnt
 *         ret['s_CANCnt'] = data.s_CANCnt
 *         ret['s_NAKCnt'] = data.s_NAKCnt             # <<<<<<<<<<<<<<
 *         ret['s_ACKCnt'] = data.s_ACKCnt
 *         ret['s_OOFCnt'] = data.s_OOFCnt
 */
  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_data.s_NAKCnt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__s_NAKCnt), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":773
 *         ret['s_CANCnt'] = data.s_CANCnt
 *         ret['s_NAKCnt'] = data.s_NAKCnt
 *         ret['s_ACKCnt'] = data.s_ACKCnt             # <<<<<<<<<<<<<<
 *         ret['s_OOFCnt'] = data.s_OOFCnt
 *         ret['s_dropped'] = data.s_dropped
 */
  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_data.s_ACKCnt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 773; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__s_ACKCnt), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 773; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":774
 *         ret['s_NAKCnt'] = data.s_NAKCnt
 *         ret['s_ACKCnt'] = data.s_ACKCnt
 *         ret['s_OOFCnt'] = data.s_OOFCnt             # <<<<<<<<<<<<<<
 *         ret['s_dropped'] = data.s_dropped
 *         ret['s_retries'] = data.s_retries
 */
  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_data.s_OOFCnt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 774; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__s_OOFCnt), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 774; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":775
 *         ret['s_ACKCnt'] = data.s_ACKCnt
 *         ret['s_OOFCnt'] = data.s_OOFCnt
 *         ret['s_dropped'] = data.s_dropped             # <<<<<<<<<<<<<<
 *         ret['s_retries'] = data.s_retries
 *         ret['s_controllerReadCnt'] = data.s_controllerReadCnt
 */
  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_data.s_dropped); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__s_dropped), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":776
 *         ret['s_OOFCnt'] = data.s_OOFCnt
 *         ret['s_dropped'] = data.s_dropped
 *         ret['s_retries'] = data.s_retries             # <<<<<<<<<<<<<<
 *         ret['s_controllerReadCnt'] = data.s_controllerReadCnt
 *         ret['s_controllerWriteCnt'] = data.s_controllerWriteCnt
 */
  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_data.s_retries); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 776; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__s_retries), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 776; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":777
 *         ret['s_dropped'] = data.s_dropped
 *         ret['s_retries'] = data.s_retries
 *         ret['s_controllerReadCnt'] = data.s_controllerReadCnt             # <<<<<<<<<<<<<<
 *         ret['s_controllerWriteCnt'] = data.s_controllerWriteCnt
 *         return ret
 */
  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_data.s_controllerReadCnt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 777; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s__s_controllerReadCnt), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 777; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":778
 *         ret['s_retries'] = data.s_retries
 *         ret['s_controllerReadCnt'] = data.s_controllerReadCnt
 *         ret['s_controllerWriteCnt'] = data.s_controllerWriteCnt             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  __pyx_t_2 = PyLong_FromUnsignedLong(__pyx_v_data.s_controllerWriteCnt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(((PyObject *)__pyx_v_ret), ((PyObject *)__pyx_n_s_5), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":779
 *         ret['s_controllerReadCnt'] = data.s_controllerReadCnt
 *         ret['s_controllerWriteCnt'] = data.s_controllerWriteCnt
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * # -----------------------------------------------------------------------------
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ret));
  __pyx_r = ((PyObject *)__pyx_v_ret);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.getDriverStatistics");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":788
 * # detect status changes.
 * #
 *     def getPollInterval(self):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getPollInterval:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_15getPollInterval(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_15getPollInterval[] = "\n.. _getPollInterval:\n\nGet the time period between polls of a nodes state\n\n:returns: int -- The number of milliseconds between polls\n:see: setPollInterval_, enablePoll_, isPolled_, setPollIntensity_, disablePoll_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_15getPollInterval(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getPollInterval");

  /* "libopenzwave.pyx":797
 * :see: setPollInterval_, enablePoll_, isPolled_, setPollIntensity_, disablePoll_
 *         '''
 *         return self.manager.GetPollInterval()             # <<<<<<<<<<<<<<
 * 
 *     def setPollInterval(self, milliseconds, bIntervalBetweenPolls ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetPollInterval()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.getPollInterval");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":799
 *         return self.manager.GetPollInterval()
 * 
 *     def setPollInterval(self, milliseconds, bIntervalBetweenPolls ):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setPollInterval:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_16setPollInterval(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_16setPollInterval[] = "\n.. _setPollInterval:\n\nSet the time period between polls of a nodes state.\n\nDue to patent concerns, some devices do not report state changes automatically\nto the controller.  These devices need to have their state polled at regular\nintervals.  The length of the interval is the same for all devices.  To even\nout the Z-Wave network traffic generated by polling, OpenZWave divides the\npolling interval by the number of devices that have polling enabled, and polls\neach in turn.  It is recommended that if possible, the interval should not be\nset shorter than the number of polled devices in seconds (so that the network\ndoes not have to cope with more than one poll per second).\n\n:param milliseconds: The length of the polling interval in milliseconds.\n:type milliseconds: int\n:param bIntervalBetweenPolls: Don't know what it is.\n:type bIntervalBetweenPolls: bool\n:see: getPollInterval_, enablePoll_, isPolled_, setPollIntensity_, disablePoll_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_16setPollInterval(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_milliseconds = 0;
  PyObject *__pyx_v_bIntervalBetweenPolls = 0;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__milliseconds,&__pyx_n_s_6,0};
  __Pyx_RefNannySetupContext("setPollInterval");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__milliseconds);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_6);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setPollInterval", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setPollInterval") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_milliseconds = values[0];
    __pyx_v_bIntervalBetweenPolls = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_milliseconds = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_bIntervalBetweenPolls = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setPollInterval", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setPollInterval");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":821
 * 
 *         '''
 *         self.manager.SetPollInterval(milliseconds, bIntervalBetweenPolls)             # <<<<<<<<<<<<<<
 * 
 *     def enablePoll(self, id, intensity):
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_milliseconds); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetPollInterval(__pyx_t_1, __pyx_v_bIntervalBetweenPolls);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setPollInterval");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":823
 *         self.manager.SetPollInterval(milliseconds, bIntervalBetweenPolls)
 * 
 *     def enablePoll(self, id, intensity):             # <<<<<<<<<<<<<<
 *         '''
 * .. _enablePoll:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_17enablePoll(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_17enablePoll[] = "\n.. _enablePoll:\n\nEnable the polling of a device's state.\n\n:param id: The ID of the value to start polling\n:type id: int\n:param intensity: The intensity of the poll\n:type intensity: int\n:returns: bool -- True if polling was enabled.\n:see: getPollInterval_, setPollInterval_, isPolled_, setPollIntensity_, disablePoll_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_17enablePoll(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_id = 0;
  PyObject *__pyx_v_intensity = 0;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  __pyx_t_6mylibc_uint8 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__id,&__pyx_n_s__intensity,0};
  __Pyx_RefNannySetupContext("enablePoll");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__id);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__intensity);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("enablePoll", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "enablePoll") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_id = values[0];
    __pyx_v_intensity = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_id = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_intensity = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("enablePoll", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.enablePoll");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":836
 * :see: getPollInterval_, setPollInterval_, isPolled_, setPollIntensity_, disablePoll_
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.EnablePoll(values_map.at(id), intensity)
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":837
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.EnablePoll(values_map.at(id), intensity)             # <<<<<<<<<<<<<<
 *         else :
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_intensity); if (unlikely((__pyx_t_3 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->EnablePoll(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_t_3)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "libopenzwave.pyx":839
 *             return self.manager.EnablePoll(values_map.at(id), intensity)
 *         else :
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def disablePoll(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libopenzwave.PyManager.enablePoll");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":841
 *             return False
 * 
 *     def disablePoll(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _disablePoll:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_18disablePoll(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_18disablePoll[] = "\n.. _disablePoll:\n\nDisable the polling of a device's state.\n\n:param id: Disable the polling of a device's state.\n:type id: int\n:returns: bool -- True if polling was disabled.\n:see: getPollInterval_, setPollInterval_, enablePoll_, isPolled_, setPollIntensity_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_18disablePoll(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("disablePoll");

  /* "libopenzwave.pyx":852
 * :see: getPollInterval_, setPollInterval_, enablePoll_, isPolled_, setPollIntensity_
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.DisablePoll(values_map.at(id))
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 852; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":853
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.DisablePoll(values_map.at(id))             # <<<<<<<<<<<<<<
 *         else :
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->DisablePoll(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "libopenzwave.pyx":855
 *             return self.manager.DisablePoll(values_map.at(id))
 *         else :
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def isPolled(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 855; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.disablePoll");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":857
 *             return False
 * 
 *     def isPolled(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isPolled:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_19isPolled(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_19isPolled[] = "\n.. _isPolled:\n\nDetermine the polling of a device's state.\n\n:param id: The ID of the value to check polling.\n:type id: int\n:return: bool -- True if polling is active.\n:see: getPollInterval_, setPollInterval_, enablePoll_, setPollIntensity_, disablePoll_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_19isPolled(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("isPolled");

  /* "libopenzwave.pyx":868
 * :see: getPollInterval_, setPollInterval_, enablePoll_, setPollIntensity_, disablePoll_
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.isPolled(values_map.at(id))
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 868; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":869
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.isPolled(values_map.at(id))             # <<<<<<<<<<<<<<
 *         else :
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 869; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->isPolled(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 869; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "libopenzwave.pyx":871
 *             return self.manager.isPolled(values_map.at(id))
 *         else :
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def setPollIntensity(self, id, intensity):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isPolled");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":873
 *             return False
 * 
 *     def setPollIntensity(self, id, intensity):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setPollIntensity:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_20setPollIntensity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_20setPollIntensity[] = "\n.. _setPollIntensity:\n\nSet the frequency of polling (0=none, 1=every time through the list, 2-every other time, etc)\n\n:param id: The ID of the value whose intensity should be set\n:type id: int\n:param intensity: the intensity of the poll\n:type intensity: int\n:returns: bool -- True if polling is active.\n:see: getPollInterval_, setPollInterval_, enablePoll_, isPolled_, disablePoll_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_20setPollIntensity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_id = 0;
  PyObject *__pyx_v_intensity = 0;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  __pyx_t_6mylibc_uint8 __pyx_t_3;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__id,&__pyx_n_s__intensity,0};
  __Pyx_RefNannySetupContext("setPollIntensity");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__id);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__intensity);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setPollIntensity", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 873; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setPollIntensity") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 873; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_id = values[0];
    __pyx_v_intensity = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_id = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_intensity = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setPollIntensity", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 873; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setPollIntensity");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":886
 * :see: getPollInterval_, setPollInterval_, enablePoll_, isPolled_, disablePoll_
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             self.manager.SetPollIntensity(values_map.at(id), intensity)
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 886; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":887
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             self.manager.SetPollIntensity(values_map.at(id), intensity)             # <<<<<<<<<<<<<<
 * 
 * #
 */
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_intensity); if (unlikely((__pyx_t_3 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetPollIntensity(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_t_3);
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setPollIntensity");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":896
 * #
 * 
 *     def requestNodeDynamic(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _requestNodeDynamic:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_21requestNodeDynamic(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_21requestNodeDynamic[] = "\n.. _requestNodeDynamic:\n\nTrigger the fetching of fixed data about a node.\n\nCauses the nodes data to be obtained from the Z-Wave network in the same way\nas if it had just been added.  This method would normally be called\nautomatically by OpenZWave, but if you know that a node has been changed,\ncalling this method will force a refresh of the data held by the library.  This\ncan be especially useful for devices that were asleep when the application was\nfirst run.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:returns: bool -- True if the request was sent successfully.\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_21requestNodeDynamic(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("requestNodeDynamic");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("requestNodeDynamic", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 896; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "requestNodeDynamic") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 896; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("requestNodeDynamic", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 896; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.requestNodeDynamic");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":915
 * :returns: bool -- True if the request was sent successfully.
 *         '''
 *         return self.manager.RequestNodeDynamic(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def refreshNodeInfo(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->RequestNodeDynamic(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.requestNodeDynamic");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":917
 *         return self.manager.RequestNodeDynamic(homeid, nodeid)
 * 
 *     def refreshNodeInfo(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _refreshNodeInfo:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_22refreshNodeInfo(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_22refreshNodeInfo[] = "\n.. _refreshNodeInfo:\n\nTrigger the fetching of fixed data about a node.\n\nCauses the nodes data to be obtained from the Z-Wave network in the same way\nas if it had just been added.  This method would normally be called\nautomatically by OpenZWave, but if you know that a node has been changed,\ncalling this method will force a refresh of the data held by the library.  This\ncan be especially useful for devices that were asleep when the application was\nfirst run.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:returns: bool -- True if the request was sent successfully.\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_22refreshNodeInfo(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("refreshNodeInfo");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("refreshNodeInfo", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 917; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "refreshNodeInfo") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 917; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("refreshNodeInfo", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 917; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.refreshNodeInfo");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":936
 * :returns: bool -- True if the request was sent successfully.
 *         '''
 *         return self.manager.RefreshNodeInfo(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def requestNodeState(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->RefreshNodeInfo(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.refreshNodeInfo");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":938
 *         return self.manager.RefreshNodeInfo(homeid, nodeid)
 * 
 *     def requestNodeState(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _requestNodeState:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_23requestNodeState(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_23requestNodeState[] = "\n.. _requestNodeState:\n\nTrigger the fetching of just the dynamic value data for a node.\nCauses the node's values to be requested from the Z-Wave network. This is the\nsame as the query state starting from the dynamic state.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:returns: bool -- True if the request was sent successfully.\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_23requestNodeState(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("requestNodeState");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("requestNodeState", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 938; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "requestNodeState") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 938; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("requestNodeState", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 938; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.requestNodeState");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":952
 * :returns: bool -- True if the request was sent successfully.
 *         '''
 *         return self.manager.RequestNodeState(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def isNodeBeamingDevice(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->RequestNodeState(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.requestNodeState");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":954
 *         return self.manager.RequestNodeState(homeid, nodeid)
 * 
 *     def isNodeBeamingDevice(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isNodeBeamingDevice:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_24isNodeBeamingDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_24isNodeBeamingDevice[] = "\n.. _isNodeBeamingDevice:\n\nGet whether the node is a beam capable device.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:returns: bool -- True if the node is a beaming device\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_24isNodeBeamingDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("isNodeBeamingDevice");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("isNodeBeamingDevice", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 954; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "isNodeBeamingDevice") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 954; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isNodeBeamingDevice", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 954; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeBeamingDevice");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":966
 * :returns: bool -- True if the node is a beaming device
 *         '''
 *         return self.manager.IsNodeBeamingDevice(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 966; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 966; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->IsNodeBeamingDevice(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 966; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeBeamingDevice");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":969
 * 
 * 
 *     def isNodeListeningDevice(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isNodeListeningDevice:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_25isNodeListeningDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_25isNodeListeningDevice[] = "\n.. _isNodeListeningDevice:\n\nGet whether the node is a listening device that does not go to sleep\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:returns: bool -- True if it is a listening node.\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_25isNodeListeningDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("isNodeListeningDevice");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("isNodeListeningDevice", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "isNodeListeningDevice") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isNodeListeningDevice", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeListeningDevice");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":981
 * :returns: bool -- True if it is a listening node.
 *         '''
 *         return self.manager.IsNodeListeningDevice(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def isNodeFrequentListeningDevice(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 981; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 981; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->IsNodeListeningDevice(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 981; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeListeningDevice");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":983
 *         return self.manager.IsNodeListeningDevice(homeid, nodeid)
 * 
 *     def isNodeFrequentListeningDevice(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isNodeFrequentListeningDevice:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_26isNodeFrequentListeningDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_26isNodeFrequentListeningDevice[] = "\n.. _isNodeFrequentListeningDevice:\n\nGet whether the node is a frequent listening device that goes to sleep but\ncan be woken up by a beam. Useful to determine node and controller consistency.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:returns: bool -- True if it is a frequent listening node.\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_26isNodeFrequentListeningDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("isNodeFrequentListeningDevice");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("isNodeFrequentListeningDevice", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 983; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "isNodeFrequentListeningDevice") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 983; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isNodeFrequentListeningDevice", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 983; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeFrequentListeningDevice");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":996
 * :returns: bool -- True if it is a frequent listening node.
 *         '''
 *         return self.manager.IsNodeFrequentListeningDevice(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def isNodeSecurityDevice(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 996; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 996; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->IsNodeFrequentListeningDevice(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 996; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeFrequentListeningDevice");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":998
 *         return self.manager.IsNodeFrequentListeningDevice(homeid, nodeid)
 * 
 *     def isNodeSecurityDevice(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isNodeSecurityDevice:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_27isNodeSecurityDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_27isNodeSecurityDevice[] = "\n.. _isNodeSecurityDevice:\n\nGet the security attribute for a node. True if node supports security features.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:returns: bool -- True if security features implemented.\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_27isNodeSecurityDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("isNodeSecurityDevice");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("isNodeSecurityDevice", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 998; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "isNodeSecurityDevice") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 998; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isNodeSecurityDevice", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 998; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeSecurityDevice");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":1010
 * :returns: bool -- True if security features implemented.
 *         '''
 *         return self.manager.IsNodeSecurityDevice(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def isNodeRoutingDevice(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1010; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1010; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->IsNodeSecurityDevice(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1010; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeSecurityDevice");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1012
 *         return self.manager.IsNodeSecurityDevice(homeid, nodeid)
 * 
 *     def isNodeRoutingDevice(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isNodeRoutingDevice:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_28isNodeRoutingDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_28isNodeRoutingDevice[] = "\n.. _isNodeRoutingDevice:\n\nGet whether the node is a routing device that passes messages to other nodes\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:returns: bool -- True if the node is a routing device\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_28isNodeRoutingDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("isNodeRoutingDevice");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("isNodeRoutingDevice", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1012; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "isNodeRoutingDevice") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1012; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isNodeRoutingDevice", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1012; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeRoutingDevice");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":1024
 * :returns: bool -- True if the node is a routing device
 *         '''
 *         return self.manager.IsNodeRoutingDevice(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getNodeMaxBaudRate(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1024; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1024; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->IsNodeRoutingDevice(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1024; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeRoutingDevice");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1026
 *         return self.manager.IsNodeRoutingDevice(homeid, nodeid)
 * 
 *     def getNodeMaxBaudRate(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeMaxBaudRate:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_29getNodeMaxBaudRate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_29getNodeMaxBaudRate[] = "\n.. _getNodeMaxBaudRate:\n\nGet the maximum baud rate of a nodes communications\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:returns: int -- The baud rate in bits per second.\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_29getNodeMaxBaudRate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeMaxBaudRate");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeMaxBaudRate", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1026; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeMaxBaudRate") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1026; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeMaxBaudRate", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1026; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeMaxBaudRate");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":1038
 * :returns: int -- The baud rate in bits per second.
 *         '''
 *         return self.manager.GetNodeMaxBaudRate(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getNodeVersion(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyLong_FromUnsignedLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeMaxBaudRate(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeMaxBaudRate");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1040
 *         return self.manager.GetNodeMaxBaudRate(homeid, nodeid)
 * 
 *     def getNodeVersion(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeVersion:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_30getNodeVersion(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_30getNodeVersion[] = "\n.. _getNodeVersion:\n\nGet the version number of a node\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:returns: int -- The node version number\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_30getNodeVersion(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeVersion");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeVersion", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeVersion") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeVersion", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeVersion");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":1052
 * :returns: int -- The node version number
 *         '''
 *         return self.manager.GetNodeVersion(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getNodeSecurity(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyInt_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeVersion(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeVersion");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1054
 *         return self.manager.GetNodeVersion(homeid, nodeid)
 * 
 *     def getNodeSecurity(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeSecurity:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_31getNodeSecurity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_31getNodeSecurity[] = "\n.. _getNodeSecurity:\n\nGet the security byte for a node.  Bit meanings are still to be determined.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:returns: int -- The node security byte\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_31getNodeSecurity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeSecurity");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeSecurity", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1054; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeSecurity") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1054; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeSecurity", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1054; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeSecurity");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":1066
 * :returns: int -- The node security byte
 *         '''
 *         return self.manager.GetNodeSecurity(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getNodeBasic(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1066; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1066; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyInt_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeSecurity(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1066; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeSecurity");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1068
 *         return self.manager.GetNodeSecurity(homeid, nodeid)
 * 
 *     def getNodeBasic(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeBasic:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_32getNodeBasic(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_32getNodeBasic[] = "\n.. _getNodeBasic:\n\nGet the basic type of a node.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:returns: int -- The node basic type.\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_32getNodeBasic(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeBasic");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeBasic", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1068; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeBasic") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1068; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeBasic", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1068; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeBasic");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":1080
 * :returns: int -- The node basic type.
 *         '''
 *         return self.manager.GetNodeBasic(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getNodeGeneric(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyInt_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeBasic(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeBasic");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1082
 *         return self.manager.GetNodeBasic(homeid, nodeid)
 * 
 *     def getNodeGeneric(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeGeneric:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_33getNodeGeneric(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_33getNodeGeneric[] = "\n.. _getNodeGeneric:\n\nGet the generic type of a node.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:returns: int -- The node generic type.\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_33getNodeGeneric(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeGeneric");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeGeneric", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1082; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeGeneric") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1082; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeGeneric", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1082; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeGeneric");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":1094
 * :returns: int -- The node generic type.
 *         '''
 *         return self.manager.GetNodeGeneric(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getNodeSpecific(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyInt_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeGeneric(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeGeneric");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1096
 *         return self.manager.GetNodeGeneric(homeid, nodeid)
 * 
 *     def getNodeSpecific(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeSpecific:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_34getNodeSpecific(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_34getNodeSpecific[] = "\n.. _getNodeSpecific:\n\nGet the specific type of a node.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type homeId: int\n:returns: int -- The node specific type.\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_34getNodeSpecific(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeSpecific");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeSpecific", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1096; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeSpecific") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1096; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeSpecific", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1096; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeSpecific");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":1108
 * :returns: int -- The node specific type.
 *         '''
 *         return self.manager.GetNodeSpecific(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getNodeType(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyInt_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeSpecific(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeSpecific");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1110
 *         return self.manager.GetNodeSpecific(homeid, nodeid)
 * 
 *     def getNodeType(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeType:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_35getNodeType(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_35getNodeType[] = "\n.. _getNodeType:\n\nGet a human-readable label describing the node\n\nThe label is taken from the Z-Wave specific, generic or basic type, depending\non which of those values are specified by the node.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:returns: str -- A string containing the label text.\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_35getNodeType(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeType");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeType", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1110; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeType") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1110; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeType", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1110; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeType");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":1125
 * :returns: str -- A string containing the label text.
 *         '''
 *         cdef string c_string = self.manager.GetNodeType(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeType(__pyx_t_1, __pyx_t_2);

  /* "libopenzwave.pyx":1126
 *         '''
 *         cdef string c_string = self.manager.GetNodeType(homeid, nodeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getNodeNeighborsOld(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeType");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1128
 *         return c_string.c_str()
 * 
 *     def getNodeNeighborsOld(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeNeighborsOld:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_36getNodeNeighborsOld(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_36getNodeNeighborsOld[] = "\n.. _getNodeNeighborsOld:\n\nGet the bitmap of this node's neighbors.\n\nOld release. Do not free memory after allocating it.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:returns: tuple - A tuple containing neighboring node IDs\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_36getNodeNeighborsOld(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_retval;
  __pyx_t_6mylibc_uint8 **__pyx_v_dbuf;
  __pyx_t_6mylibc_uint32 __pyx_v_count;
  __pyx_t_6mylibc_uint8 *__pyx_v_p;
  __pyx_t_6mylibc_uint32 __pyx_v_start;
  PyObject *__pyx_v_data;
  __pyx_t_6mylibc_uint32 __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeNeighborsOld");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeNeighborsOld", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1128; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeNeighborsOld") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1128; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeNeighborsOld", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1128; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeNeighborsOld");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_retval = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_data = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);

  /* "libopenzwave.pyx":1142
 * :returns: tuple - A tuple containing neighboring node IDs
 *         '''
 *         retval = None             # <<<<<<<<<<<<<<
 *         # TODO: proper initialization of this pointer.  Underlying code creates new uint8[] at this address, but segfaults if passed in value is null.  Boy, is my C rusty.
 *         cdef uint8** dbuf = <uint8**>malloc(sizeof(uint8))
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF(__pyx_v_retval);
  __pyx_v_retval = Py_None;

  /* "libopenzwave.pyx":1144
 *         retval = None
 *         # TODO: proper initialization of this pointer.  Underlying code creates new uint8[] at this address, but segfaults if passed in value is null.  Boy, is my C rusty.
 *         cdef uint8** dbuf = <uint8**>malloc(sizeof(uint8))             # <<<<<<<<<<<<<<
 *         # return value is pointer to uint8[]
 *         cdef uint32 count = self.manager.GetNodeNeighbors(homeid, nodeid, dbuf)
 */
  __pyx_v_dbuf = ((__pyx_t_6mylibc_uint8 **)malloc((sizeof(__pyx_t_6mylibc_uint8))));

  /* "libopenzwave.pyx":1146
 *         cdef uint8** dbuf = <uint8**>malloc(sizeof(uint8))
 *         # return value is pointer to uint8[]
 *         cdef uint32 count = self.manager.GetNodeNeighbors(homeid, nodeid, dbuf)             # <<<<<<<<<<<<<<
 *         cdef uint8* p
 *         cdef uint32 start = 0
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_count = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeNeighbors(__pyx_t_1, __pyx_t_2, __pyx_v_dbuf);

  /* "libopenzwave.pyx":1148
 *         cdef uint32 count = self.manager.GetNodeNeighbors(homeid, nodeid, dbuf)
 *         cdef uint8* p
 *         cdef uint32 start = 0             # <<<<<<<<<<<<<<
 *         if count:
 *             try:
 */
  __pyx_v_start = 0;

  /* "libopenzwave.pyx":1149
 *         cdef uint8* p
 *         cdef uint32 start = 0
 *         if count:             # <<<<<<<<<<<<<<
 *             try:
 *                 data = list()
 */
  if (__pyx_v_count) {

    /* "libopenzwave.pyx":1150
 *         cdef uint32 start = 0
 *         if count:
 *             try:             # <<<<<<<<<<<<<<
 *                 data = list()
 *                 p = dbuf[0] # p is now pointing at first element of array
 */
    /*try:*/ {

      /* "libopenzwave.pyx":1151
 *         if count:
 *             try:
 *                 data = list()             # <<<<<<<<<<<<<<
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(start, count):
 */
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1151; __pyx_clineno = __LINE__; goto __pyx_L8;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      __Pyx_DECREF(((PyObject *)__pyx_v_data));
      __pyx_v_data = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "libopenzwave.pyx":1152
 *             try:
 *                 data = list()
 *                 p = dbuf[0] # p is now pointing at first element of array             # <<<<<<<<<<<<<<
 *                 for i in range(start, count):
 *                     data.add(p[0])
 */
      __pyx_v_p = (__pyx_v_dbuf[0]);

      /* "libopenzwave.pyx":1153
 *                 data = list()
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(start, count):             # <<<<<<<<<<<<<<
 *                     data.add(p[0])
 *                     p += 1
 */
      __pyx_t_1 = __pyx_v_count;
      for (__pyx_t_4 = __pyx_v_start; __pyx_t_4 < __pyx_t_1; __pyx_t_4+=1) {
        __pyx_v_i = __pyx_t_4;

        /* "libopenzwave.pyx":1154
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(start, count):
 *                     data.add(p[0])             # <<<<<<<<<<<<<<
 *                     p += 1
 *                 retval = tuple(data)
 */
        __pyx_t_3 = PyObject_GetAttr(((PyObject *)__pyx_v_data), __pyx_n_s__add); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1154; __pyx_clineno = __LINE__; goto __pyx_L8;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_5 = PyInt_FromLong((__pyx_v_p[0])); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1154; __pyx_clineno = __LINE__; goto __pyx_L8;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1154; __pyx_clineno = __LINE__; goto __pyx_L8;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_6));
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_5 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1154; __pyx_clineno = __LINE__; goto __pyx_L8;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "libopenzwave.pyx":1155
 *                 for i in range(start, count):
 *                     data.add(p[0])
 *                     p += 1             # <<<<<<<<<<<<<<
 *                 retval = tuple(data)
 *             finally:
 */
        __pyx_v_p = (__pyx_v_p + 1);
      }

      /* "libopenzwave.pyx":1156
 *                     data.add(p[0])
 *                     p += 1
 *                 retval = tuple(data)             # <<<<<<<<<<<<<<
 *             finally:
 *                 # TODO: caller is responsible for deleting returned array via call to delete()
 */
      if (unlikely(__pyx_v_data == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1156; __pyx_clineno = __LINE__; goto __pyx_L8;} 
      }
      __pyx_t_5 = ((PyObject *)PyList_AsTuple(__pyx_v_data)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1156; __pyx_clineno = __LINE__; goto __pyx_L8;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_5));
      __Pyx_DECREF(__pyx_v_retval);
      __pyx_v_retval = ((PyObject *)__pyx_t_5);
      __pyx_t_5 = 0;
    }

    /* "libopenzwave.pyx":1159
 *             finally:
 *                 # TODO: caller is responsible for deleting returned array via call to delete()
 *                 pass             # <<<<<<<<<<<<<<
 *         return retval
 * 
 */
    /*finally:*/ {
      int __pyx_why;
      PyObject *__pyx_exc_type, *__pyx_exc_value, *__pyx_exc_tb;
      int __pyx_exc_lineno;
      __pyx_exc_type = 0; __pyx_exc_value = 0; __pyx_exc_tb = 0; __pyx_exc_lineno = 0;
      __pyx_why = 0; goto __pyx_L9;
      __pyx_L8: {
        __pyx_why = 4;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_ErrFetch(&__pyx_exc_type, &__pyx_exc_value, &__pyx_exc_tb);
        __pyx_exc_lineno = __pyx_lineno;
        goto __pyx_L9;
      }
      __pyx_L9:;
      switch (__pyx_why) {
        case 4: {
          __Pyx_ErrRestore(__pyx_exc_type, __pyx_exc_value, __pyx_exc_tb);
          __pyx_lineno = __pyx_exc_lineno;
          __pyx_exc_type = 0;
          __pyx_exc_value = 0;
          __pyx_exc_tb = 0;
          goto __pyx_L1_error;
        }
      }
    }
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "libopenzwave.pyx":1160
 *                 # TODO: caller is responsible for deleting returned array via call to delete()
 *                 pass
 *         return retval             # <<<<<<<<<<<<<<
 * 
 *     def getNodeNeighbors(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_retval);
  __pyx_r = __pyx_v_retval;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeNeighborsOld");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_retval);
  __Pyx_DECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1162
 *         return retval
 * 
 *     def getNodeNeighbors(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeNeighbors:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_37getNodeNeighbors(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_37getNodeNeighbors[] = "\n.. _getNodeNeighbors:\n\nGet the bitmap of this node's neighbors.\n\n    uint32 GetNodeNeighbors( uint32 const _homeId, uint8 const _nodeId, uint8** _nodeNeighbors );\n    /**\n    * brief Get the bitmap of this node's neighbors\n    *\n    * param _homeId The Home ID of the Z-Wave controller that manages the node.\n    * param _nodeId The ID of the node to query.\n    * param _nodeNeighbors An array of 29 uint8s to hold the neighbor bitmap\n    */\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:returns: list() - A set containing neighboring node IDs\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_37getNodeNeighbors(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_data;
  __pyx_t_6mylibc_uint8 **__pyx_v_dbuf;
  __pyx_t_6mylibc_uint32 __pyx_v_count;
  __pyx_t_6mylibc_uint8 *__pyx_v_retuint8;
  __pyx_t_6mylibc_uint8 *__pyx_v_p;
  __pyx_t_6mylibc_uint32 __pyx_v_start;
  __pyx_t_6mylibc_uint32 __pyx_v_i;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_2;
  __pyx_t_6mylibc_uint8 __pyx_t_3;
  __pyx_t_6mylibc_uint32 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeNeighbors");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeNeighbors", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1162; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeNeighbors") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1162; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeNeighbors", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1162; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeNeighbors");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_data = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);

  /* "libopenzwave.pyx":1183
 * :returns: list() - A set containing neighboring node IDs
 *         '''
 *         data = list()             # <<<<<<<<<<<<<<
 *         #Allocate memory
 *         cdef uint8** dbuf = <uint8**>malloc(sizeof(uint8)*29)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_DECREF(((PyObject *)__pyx_v_data));
  __pyx_v_data = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "libopenzwave.pyx":1185
 *         data = list()
 *         #Allocate memory
 *         cdef uint8** dbuf = <uint8**>malloc(sizeof(uint8)*29)             # <<<<<<<<<<<<<<
 *         # return value is pointer to uint8[]
 *         cdef uint32 count = self.manager.GetNodeNeighbors(homeid, nodeid, dbuf)
 */
  __pyx_v_dbuf = ((__pyx_t_6mylibc_uint8 **)malloc(((sizeof(__pyx_t_6mylibc_uint8)) * 29)));

  /* "libopenzwave.pyx":1187
 *         cdef uint8** dbuf = <uint8**>malloc(sizeof(uint8)*29)
 *         # return value is pointer to uint8[]
 *         cdef uint32 count = self.manager.GetNodeNeighbors(homeid, nodeid, dbuf)             # <<<<<<<<<<<<<<
 *         #Allocate memory for the returned values
 *         cdef uint8* retuint8 = <uint8*>malloc(sizeof(uint8)*count)
 */
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_3 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_count = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeNeighbors(__pyx_t_2, __pyx_t_3, __pyx_v_dbuf);

  /* "libopenzwave.pyx":1189
 *         cdef uint32 count = self.manager.GetNodeNeighbors(homeid, nodeid, dbuf)
 *         #Allocate memory for the returned values
 *         cdef uint8* retuint8 = <uint8*>malloc(sizeof(uint8)*count)             # <<<<<<<<<<<<<<
 *         cdef uint8* p
 *         cdef uint32 start = 0
 */
  __pyx_v_retuint8 = ((__pyx_t_6mylibc_uint8 *)malloc(((sizeof(__pyx_t_6mylibc_uint8)) * __pyx_v_count)));

  /* "libopenzwave.pyx":1191
 *         cdef uint8* retuint8 = <uint8*>malloc(sizeof(uint8)*count)
 *         cdef uint8* p
 *         cdef uint32 start = 0             # <<<<<<<<<<<<<<
 *         if count:
 *             try:
 */
  __pyx_v_start = 0;

  /* "libopenzwave.pyx":1192
 *         cdef uint8* p
 *         cdef uint32 start = 0
 *         if count:             # <<<<<<<<<<<<<<
 *             try:
 *                 p = dbuf[0] # p is now pointing at first element of array
 */
  if (__pyx_v_count) {

    /* "libopenzwave.pyx":1193
 *         cdef uint32 start = 0
 *         if count:
 *             try:             # <<<<<<<<<<<<<<
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(start, count):
 */
    /*try:*/ {

      /* "libopenzwave.pyx":1194
 *         if count:
 *             try:
 *                 p = dbuf[0] # p is now pointing at first element of array             # <<<<<<<<<<<<<<
 *                 for i in range(start, count):
 *                     retuint8[i] = p[0]
 */
      __pyx_v_p = (__pyx_v_dbuf[0]);

      /* "libopenzwave.pyx":1195
 *             try:
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(start, count):             # <<<<<<<<<<<<<<
 *                     retuint8[i] = p[0]
 *                     data.add(retuint8[i])
 */
      __pyx_t_2 = __pyx_v_count;
      for (__pyx_t_4 = __pyx_v_start; __pyx_t_4 < __pyx_t_2; __pyx_t_4+=1) {
        __pyx_v_i = __pyx_t_4;

        /* "libopenzwave.pyx":1196
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(start, count):
 *                     retuint8[i] = p[0]             # <<<<<<<<<<<<<<
 *                     data.add(retuint8[i])
 *                     p += 1
 */
        (__pyx_v_retuint8[__pyx_v_i]) = (__pyx_v_p[0]);

        /* "libopenzwave.pyx":1197
 *                 for i in range(start, count):
 *                     retuint8[i] = p[0]
 *                     data.add(retuint8[i])             # <<<<<<<<<<<<<<
 *                     p += 1
 *             finally:
 */
        __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_data), __pyx_n_s__add); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1197; __pyx_clineno = __LINE__; goto __pyx_L8;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = PyInt_FromLong((__pyx_v_retuint8[__pyx_v_i])); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1197; __pyx_clineno = __LINE__; goto __pyx_L8;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1197; __pyx_clineno = __LINE__; goto __pyx_L8;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_6));
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_5 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1197; __pyx_clineno = __LINE__; goto __pyx_L8;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "libopenzwave.pyx":1198
 *                     retuint8[i] = p[0]
 *                     data.add(retuint8[i])
 *                     p += 1             # <<<<<<<<<<<<<<
 *             finally:
 *                 #Free memory
 */
        __pyx_v_p = (__pyx_v_p + 1);
      }
    }

    /* "libopenzwave.pyx":1201
 *             finally:
 *                 #Free memory
 *                 free(dbuf)             # <<<<<<<<<<<<<<
 *                 pass
 *         return data
 */
    /*finally:*/ {
      int __pyx_why;
      PyObject *__pyx_exc_type, *__pyx_exc_value, *__pyx_exc_tb;
      int __pyx_exc_lineno;
      __pyx_exc_type = 0; __pyx_exc_value = 0; __pyx_exc_tb = 0; __pyx_exc_lineno = 0;
      __pyx_why = 0; goto __pyx_L9;
      __pyx_L8: {
        __pyx_why = 4;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_ErrFetch(&__pyx_exc_type, &__pyx_exc_value, &__pyx_exc_tb);
        __pyx_exc_lineno = __pyx_lineno;
        goto __pyx_L9;
      }
      __pyx_L9:;
      free(__pyx_v_dbuf);
      switch (__pyx_why) {
        case 4: {
          __Pyx_ErrRestore(__pyx_exc_type, __pyx_exc_value, __pyx_exc_tb);
          __pyx_lineno = __pyx_exc_lineno;
          __pyx_exc_type = 0;
          __pyx_exc_value = 0;
          __pyx_exc_tb = 0;
          goto __pyx_L1_error;
        }
      }
    }
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "libopenzwave.pyx":1203
 *                 free(dbuf)
 *                 pass
 *         return data             # <<<<<<<<<<<<<<
 * 
 *     def getNodeManufacturerName(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_data));
  __pyx_r = ((PyObject *)__pyx_v_data);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeNeighbors");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1205
 *         return data
 * 
 *     def getNodeManufacturerName(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 *         .. _getNodeManufacturerName:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_38getNodeManufacturerName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_38getNodeManufacturerName[] = "\n        .. _getNodeManufacturerName:\n\nGet the manufacturer name of a device\n\nThe manufacturer name would normally be handled by the Manufacturer Specific\ncommmand class, taking the manufacturer ID reported by the device and using it\nto look up the name from the manufacturer_specific.xml file in the OpenZWave\nconfig folder.  However, there are some devices that do not support the command\nclass, so to enable the user to manually set the name, it is stored with the\nnode data and accessed via this method rather than being reported via a command\nclass Value object.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:returns: str -- A string containing the nodes manufacturer name.\n:see: setNodeManufacturerName_, getNodeProductName_, setNodeProductName_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_38getNodeManufacturerName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  std::string __pyx_v_manufacturer_string;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeManufacturerName");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeManufacturerName", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1205; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeManufacturerName") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1205; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeManufacturerName", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1205; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeManufacturerName");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":1226
 * :see: setNodeManufacturerName_, getNodeProductName_, setNodeProductName_
 *         '''
 *         cdef string manufacturer_string = self.manager.GetNodeManufacturerName(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return manufacturer_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_manufacturer_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeManufacturerName(__pyx_t_1, __pyx_t_2);

  /* "libopenzwave.pyx":1227
 *         '''
 *         cdef string manufacturer_string = self.manager.GetNodeManufacturerName(homeid, nodeid)
 *         return manufacturer_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getNodeProductName(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyBytes_FromString(__pyx_v_manufacturer_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeManufacturerName");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1229
 *         return manufacturer_string.c_str()
 * 
 *     def getNodeProductName(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeProductName:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_39getNodeProductName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_39getNodeProductName[] = "\n.. _getNodeProductName:\n\nGet the product name of a device\n\nThe product name would normally be handled by the Manufacturer Specific\ncommmand class, taking the product Type and ID reported by the device and using\nit to look up the name from the manufacturer_specific.xml file in the OpenZWave\nconfig folder.  However, there are some devices that do not support the command\nclass, so to enable the user to manually set the name, it is stored with the\nnode data and accessed via this method rather than being reported via a command\nclass Value object.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:returns: str -- A string containing the nodes product name.\n:see: setNodeProductName_, getNodeManufacturerName_, setNodeManufacturerName_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_39getNodeProductName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  std::string __pyx_v_productname_string;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeProductName");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeProductName", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1229; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeProductName") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1229; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeProductName", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1229; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeProductName");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":1250
 * :see: setNodeProductName_, getNodeManufacturerName_, setNodeManufacturerName_
 *         '''
 *         cdef string productname_string = self.manager.GetNodeProductName(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return productname_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_productname_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeProductName(__pyx_t_1, __pyx_t_2);

  /* "libopenzwave.pyx":1251
 *         '''
 *         cdef string productname_string = self.manager.GetNodeProductName(homeid, nodeid)
 *         return productname_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getNodeName(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyBytes_FromString(__pyx_v_productname_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeProductName");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1253
 *         return productname_string.c_str()
 * 
 *     def getNodeName(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeName:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_40getNodeName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_40getNodeName[] = "\n.. _getNodeName:\n\nGet the name of a node\n\nThe node name is a user-editable label for the node that would normally be\nhandled by the Node Naming commmand class, but many devices do not support it.\nSo that a node can always be named, OpenZWave stores it with the node data, and\nprovides access through this method and SetNodeName, rather than reporting it\nvia a command class Value object.  The maximum length of a node name is 16\ncharacters.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:returns: str -- A string containing the node name.\n:see: setNodeName_, getNodeLocation_, setNodeLocation_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_40getNodeName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeName");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeName", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1253; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeName") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1253; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeName", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1253; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeName");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":1273
 * :see: setNodeName_, getNodeLocation_, setNodeLocation_
 *         '''
 *         cdef string c_string = self.manager.GetNodeName(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeName(__pyx_t_1, __pyx_t_2);

  /* "libopenzwave.pyx":1274
 *         '''
 *         cdef string c_string = self.manager.GetNodeName(homeid, nodeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getNodeLocation(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeName");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1276
 *         return c_string.c_str()
 * 
 *     def getNodeLocation(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeLocation:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_41getNodeLocation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_41getNodeLocation[] = "\n.. _getNodeLocation:\n\nGet the location of a node\n\nThe node location is a user-editable string that would normally be handled by\nthe Node Naming commmand class, but many devices do not support it.  So that a\nnode can always report its location, OpenZWave stores it with the node data,\nand provides access through this method and SetNodeLocation, rather than\nreporting it via a command class Value object.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:returns: str -- A string containing the nodes location.\n:see: setNodeLocation, getNodeName, setNodeName\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_41getNodeLocation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeLocation");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeLocation", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1276; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeLocation") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1276; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeLocation", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1276; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeLocation");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":1295
 * :see: setNodeLocation, getNodeName, setNodeName
 *         '''
 *         cdef string c_string = self.manager.GetNodeLocation(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeLocation(__pyx_t_1, __pyx_t_2);

  /* "libopenzwave.pyx":1296
 *         '''
 *         cdef string c_string = self.manager.GetNodeLocation(homeid, nodeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getNodeManufacturerId(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeLocation");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1298
 *         return c_string.c_str()
 * 
 *     def getNodeManufacturerId(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeManufacturerId:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_42getNodeManufacturerId(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_42getNodeManufacturerId[] = "\n.. _getNodeManufacturerId:\n\nGet the manufacturer ID of a device\n\nThe manufacturer ID is a four digit hex code and would normally be handled by\nthe Manufacturer-Specific commmand class, but not all devices support it.\nAlthough the value reported by this method will be an empty string if the\ncommand class is not supported and cannot be set by the user, the manufacturer\nID is still stored with the node data (rather than being reported via a command\nclass Value object) to retain a consistent approach with the other manufacturer\nspecific data.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:returns: str -- A string containing the nodes manufacturer ID, or an empty string if the manufactuer-specific command class is not supported by the device.\n:see: getNodeProductType, getNodeProductId, getNodeManufacturerName, getNodeProductName\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_42getNodeManufacturerId(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeManufacturerId");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeManufacturerId", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeManufacturerId") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeManufacturerId", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeManufacturerId");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":1319
 * :see: getNodeProductType, getNodeProductId, getNodeManufacturerName, getNodeProductName
 *         '''
 *         cdef string c_string = self.manager.GetNodeManufacturerId(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeManufacturerId(__pyx_t_1, __pyx_t_2);

  /* "libopenzwave.pyx":1320
 *         '''
 *         cdef string c_string = self.manager.GetNodeManufacturerId(homeid, nodeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getNodeProductType(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeManufacturerId");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1322
 *         return c_string.c_str()
 * 
 *     def getNodeProductType(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeProductType:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_43getNodeProductType(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_43getNodeProductType[] = "\n.. _getNodeProductType:\n\nGet the product type of a device\n\nThe product type is a four digit hex code and would normally be handled by the\nManufacturer Specific commmand class, but not all devices support it.  Although\nthe value reported by this method will be an empty string if the command class\nis not supported and cannot be set by the user, the product type is still\nstored with the node data (rather than being reported via a command class Value\nobject) to retain a consistent approach with the other manufacturer specific\ndata.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:returns: str -- A string containing the nodes product type, or an empty string if the manufactuer-specific command class is not supported by the device.\n:see: getNodeManufacturerId_, getNodeProductId_, getNodeManufacturerName_, getNodeProductName_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_43getNodeProductType(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeProductType");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeProductType", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1322; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeProductType") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1322; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeProductType", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1322; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeProductType");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":1343
 * :see: getNodeManufacturerId_, getNodeProductId_, getNodeManufacturerName_, getNodeProductName_
 *         '''
 *         cdef string c_string = self.manager.GetNodeProductType(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeProductType(__pyx_t_1, __pyx_t_2);

  /* "libopenzwave.pyx":1344
 *         '''
 *         cdef string c_string = self.manager.GetNodeProductType(homeid, nodeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getNodeProductId(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeProductType");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1346
 *         return c_string.c_str()
 * 
 *     def getNodeProductId(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeProductId:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_44getNodeProductId(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_44getNodeProductId[] = "\n.. _getNodeProductId:\n\nGet the product ID of a device\n\nThe product ID is a four digit hex code and would normally be handled by the\nManufacturer-Specific commmand class, but not all devices support it.  Although\nthe value reported by this method will be an empty string if the command class\nis not supported and cannot be set by the user, the product ID is still stored\nwith the node data (rather than being reported via a command class Value\nobject)  to retain a consistent approach with the other manufacturer specific\ndata.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:returns: str -- A string containing the nodes product ID, or an empty string if the manufactuer-specific command class is not supported by the device.\n:see: getNodeManufacturerId_, getNodeProductType_, getNodeManufacturerName_, getNodeProductName_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_44getNodeProductId(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNodeProductId");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeProductId", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1346; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeProductId") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1346; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeProductId", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1346; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeProductId");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":1367
 * :see: getNodeManufacturerId_, getNodeProductType_, getNodeManufacturerName_, getNodeProductName_
 *         '''
 *         cdef string c_string = self.manager.GetNodeProductId(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeProductId(__pyx_t_1, __pyx_t_2);

  /* "libopenzwave.pyx":1368
 *         '''
 *         cdef string c_string = self.manager.GetNodeProductId(homeid, nodeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def setNodeManufacturerName(self, homeid, nodeid, char *manufacturerName):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeProductId");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1370
 *         return c_string.c_str()
 * 
 *     def setNodeManufacturerName(self, homeid, nodeid, char *manufacturerName):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setNodeManufacturerName:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_45setNodeManufacturerName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_45setNodeManufacturerName[] = "\n.. _setNodeManufacturerName:\n\nSet the manufacturer name of a device\n\nThe manufacturer name would normally be handled by the Manufacturer Specific\ncommmand class, taking the manufacturer ID reported by the device and using it\nto look up the name from the manufacturer_specific.xml file in the OpenZWave\nconfig folder.  However, there are some devices that do not support the command\nclass, so to enable the user to manually set the name, it is stored with the\nnode data and accessed via this method rather than being reported via a command\nclass Value object.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:param manufacturerName: A string containing the nodess manufacturer name.\n:type manufacturerName: str\n:see: getNodeManufacturerName_, getNodeProductName_, setNodeProductName_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_45setNodeManufacturerName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  char *__pyx_v_manufacturerName;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__manufacturerName,0};
  __Pyx_RefNannySetupContext("setNodeManufacturerName");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setNodeManufacturerName", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1370; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__manufacturerName);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setNodeManufacturerName", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1370; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setNodeManufacturerName") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1370; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_manufacturerName = PyBytes_AsString(values[2]); if (unlikely((!__pyx_v_manufacturerName) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1370; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_manufacturerName = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((!__pyx_v_manufacturerName) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1370; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNodeManufacturerName", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1370; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeManufacturerName");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":1392
 * :see: getNodeManufacturerName_, getNodeProductName_, setNodeProductName_
 *         '''
 *         self.manager.SetNodeManufacturerName(homeid, nodeid, string(manufacturerName))             # <<<<<<<<<<<<<<
 * 
 *     def setNodeProductName(self, homeid, nodeid, char *productName):
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetNodeManufacturerName(__pyx_t_1, __pyx_t_2, std::string(__pyx_v_manufacturerName));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeManufacturerName");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1394
 *         self.manager.SetNodeManufacturerName(homeid, nodeid, string(manufacturerName))
 * 
 *     def setNodeProductName(self, homeid, nodeid, char *productName):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setNodeProductName:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_46setNodeProductName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_46setNodeProductName[] = "\n.. _setNodeProductName:\n\nSet the product name of a device\n\nThe product name would normally be handled by the Manufacturer Specific\ncommmand class, taking the product Type and ID reported by the device and using\nit to look up the name from the manufacturer_specific.xml file in the OpenZWave\nconfig folder.  However, there are some devices that do not support the command\nclass, so to enable the user to manually set the name, it is stored with the\nnode data and accessed via this method rather than being reported via a command\nclass Value object.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:param productName: A string containing the nodes product name.\n:type productName: str\n:see: getNodeProductName_, getNodeManufacturerName_, setNodeManufacturerName_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_46setNodeProductName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  char *__pyx_v_productName;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__productName,0};
  __Pyx_RefNannySetupContext("setNodeProductName");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setNodeProductName", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1394; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__productName);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setNodeProductName", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1394; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setNodeProductName") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1394; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_productName = PyBytes_AsString(values[2]); if (unlikely((!__pyx_v_productName) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1394; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_productName = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((!__pyx_v_productName) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1394; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNodeProductName", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1394; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeProductName");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":1416
 * :see: getNodeProductName_, getNodeManufacturerName_, setNodeManufacturerName_
 *         '''
 *         self.manager.SetNodeProductName(homeid, nodeid, string(productName))             # <<<<<<<<<<<<<<
 * 
 *     def setNodeName(self, homeid, nodeid, char *name):
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetNodeProductName(__pyx_t_1, __pyx_t_2, std::string(__pyx_v_productName));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeProductName");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1418
 *         self.manager.SetNodeProductName(homeid, nodeid, string(productName))
 * 
 *     def setNodeName(self, homeid, nodeid, char *name):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setNodeName:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_47setNodeName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_47setNodeName[] = "\n.. _setNodeName:\n\nSet the name of a node\n\nThe node name is a user-editable label for the node that would normally be\nhandled by the Node Naming commmand class, but many devices do not support it.\nSo that a node can always be named, OpenZWave stores it with the node data, and\nprovides access through this method and GetNodeName, rather than reporting it\nvia a command class Value object.  If the device does support the Node Naming\ncommand class, the new name will be sent to the node.  The maximum length of a\nnode name is 16 characters.\n\n:param homeI: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:param nodeName: A string containing the nodes name.\n:type nodeName: str\n:see: getNodeName_, getNodeLocation_, setNodeLocation_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_47setNodeName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  char *__pyx_v_name;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__name,0};
  __Pyx_RefNannySetupContext("setNodeName");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setNodeName", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1418; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setNodeName", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1418; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setNodeName") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1418; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_name = PyBytes_AsString(values[2]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1418; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_name = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1418; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNodeName", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1418; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeName");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":1440
 * :see: getNodeName_, getNodeLocation_, setNodeLocation_
 *         '''
 *         self.manager.SetNodeName(homeid, nodeid, string(name))             # <<<<<<<<<<<<<<
 * 
 *     def setNodeLocation(self, homeid, nodeid, char *location):
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetNodeName(__pyx_t_1, __pyx_t_2, std::string(__pyx_v_name));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeName");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1442
 *         self.manager.SetNodeName(homeid, nodeid, string(name))
 * 
 *     def setNodeLocation(self, homeid, nodeid, char *location):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setNodeLocation:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_48setNodeLocation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_48setNodeLocation[] = "\n.. _setNodeLocation:\n\nSet the location of a node\n\nThe node location is a user-editable string that would normally be handled by\nthe Node Naming commmand class, but many devices do not support it.  So that a\nnode can always report its location, OpenZWave stores it with the node data,\nand provides access through this method and GetNodeLocation, rather than\nreporting it via a command class Value object.  If the device does support the\nNode Naming command class, the new location will be sent to the node.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:param location: A string containing the nodes location.\n:type location: int\n:see: getNodeLocation_, getNodeName_, setNodeName_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_48setNodeLocation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  char *__pyx_v_location;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__location,0};
  __Pyx_RefNannySetupContext("setNodeLocation");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setNodeLocation", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1442; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__location);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setNodeLocation", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1442; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setNodeLocation") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1442; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_location = PyBytes_AsString(values[2]); if (unlikely((!__pyx_v_location) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1442; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_location = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((!__pyx_v_location) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1442; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNodeLocation", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1442; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeLocation");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":1463
 * :see: getNodeLocation_, getNodeName_, setNodeName_
 *         '''
 *         self.manager.SetNodeLocation(homeid, nodeid, string(location))             # <<<<<<<<<<<<<<
 * 
 *     def setNodeOn(self, homeid, nodeid):
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetNodeLocation(__pyx_t_1, __pyx_t_2, std::string(__pyx_v_location));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeLocation");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1465
 *         self.manager.SetNodeLocation(homeid, nodeid, string(location))
 * 
 *     def setNodeOn(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setNodeOn:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_49setNodeOn(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_49setNodeOn[] = "\n.. _setNodeOn:\n\nTurns a node on\n\nThis is a helper method to simplify basic control of a node.  It is the\nequivalent of changing the level reported by the nodes Basic command class to\n255, and will generate a ValueChanged notification from that class.  This\ncommand will turn on the device at its last known level, if supported by the\ndevice, otherwise it will turn it on at 100%.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to be changed.\n:type nodeId: int\n:see: setNodeOff, setNodeLevel\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_49setNodeOn(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("setNodeOn");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setNodeOn", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1465; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setNodeOn") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1465; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNodeOn", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1465; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeOn");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":1483
 * :see: setNodeOff, setNodeLevel
 *         '''
 *         self.manager.SetNodeOn(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def setNodeOff(self, homeid, nodeid):
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetNodeOn(__pyx_t_1, __pyx_t_2);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeOn");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1485
 *         self.manager.SetNodeOn(homeid, nodeid)
 * 
 *     def setNodeOff(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setNodeOff:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_50setNodeOff(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_50setNodeOff[] = "\n.. _setNodeOff:\n\nTurns a node off\n\nThis is a helper method to simplify basic control of a node.  It is the\nequivalent of changing the level reported by the nodes Basic command class to\nzero, and will generate a ValueChanged notification from that class.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to be changed.\n:type nodeId: int\n:see: setNodeOn, setNodeLevel\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_50setNodeOff(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("setNodeOff");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setNodeOff", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1485; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setNodeOff") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1485; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNodeOff", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1485; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeOff");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":1501
 * :see: setNodeOn, setNodeLevel
 *         '''
 *         self.manager.SetNodeOff(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def setNodeLevel(self, homeid, nodeid, level):
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetNodeOff(__pyx_t_1, __pyx_t_2);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeOff");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1503
 *         self.manager.SetNodeOff(homeid, nodeid)
 * 
 *     def setNodeLevel(self, homeid, nodeid, level):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setNodeLevel:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_51setNodeLevel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_51setNodeLevel[] = "\n.. _setNodeLevel:\n\nSets the basic level of a node\n\nThis is a helper method to simplify basic control of a node.  It is the\nequivalent of changing the value reported by the nodes Basic command class\nand will generate a ValueChanged notification from that class.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to be changed.\n:type nodeId: int\n:param level: The level to set the node.  Valid values are 0-99 and 255.  Zero is off and 99 is fully on.  255 will turn on the device at its last known level (if supported).\n:type level: int\n:see: setNodeOn, setNodeOff\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_51setNodeLevel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_level = 0;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  __pyx_t_6mylibc_uint8 __pyx_t_3;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__level,0};
  __Pyx_RefNannySetupContext("setNodeLevel");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setNodeLevel", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1503; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__level);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setNodeLevel", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1503; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setNodeLevel") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1503; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_level = values[2];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_level = PyTuple_GET_ITEM(__pyx_args, 2);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNodeLevel", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1503; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeLevel");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":1521
 * :see: setNodeOn, setNodeOff
 *         '''
 *         self.manager.SetNodeLevel(homeid, nodeid, level)             # <<<<<<<<<<<<<<
 * 
 *     def isNodeInfoReceived(self, homeid, nodeid):
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_level); if (unlikely((__pyx_t_3 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetNodeLevel(__pyx_t_1, __pyx_t_2, __pyx_t_3);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeLevel");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1523
 *         self.manager.SetNodeLevel(homeid, nodeid, level)
 * 
 *     def isNodeInfoReceived(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isNodeInfoReceived:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_52isNodeInfoReceived(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_52isNodeInfoReceived[] = "\n.. _isNodeInfoReceived:\n\nGet whether the node information has been received\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:returns: bool -- True if the node information has been received yet\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_52isNodeInfoReceived(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("isNodeInfoReceived");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("isNodeInfoReceived", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1523; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "isNodeInfoReceived") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1523; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isNodeInfoReceived", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1523; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeInfoReceived");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":1535
 * :returns: bool -- True if the node information has been received yet
 *         '''
 *         return self.manager.IsNodeInfoReceived(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->IsNodeInfoReceived(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeInfoReceived");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1538
 * 
 * 
 *     def getNodeClassInformation(self, homeid, nodeid, commandClassId, className, classVersion):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeClassInformation:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_53getNodeClassInformation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_53getNodeClassInformation[] = "\n.. _getNodeClassInformation:\n\nHelper method to return whether a particular class is available in a node\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:param commandClassId: control class to query\n:type commandClassId: int\n:param className: (optional, default=None) specific name of class to query\n:type className: str\n:param classVersion: (optional, default=None) specific class version\n:type classVersion: int\n:returns: bool -- True if the node does have the class instantiated, will return name & version\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_53getNodeClassInformation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_commandClassId = 0;
  PyObject *__pyx_v_className = 0;
  PyObject *__pyx_v_classVersion = 0;
  __pyx_t_6mylibc_uint8 __pyx_v_oclassVersion;
  std::string __pyx_v_oclassName;
  bool __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  __pyx_t_6mylibc_uint8 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__commandClassId,&__pyx_n_s__className,&__pyx_n_s__classVersion,0};
  __Pyx_RefNannySetupContext("getNodeClassInformation");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[5] = {0,0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeClassInformation", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1538; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__commandClassId);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeClassInformation", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1538; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__className);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeClassInformation", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1538; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  4:
      values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__classVersion);
      if (likely(values[4])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNodeClassInformation", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1538; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNodeClassInformation") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1538; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_commandClassId = values[2];
    __pyx_v_className = values[3];
    __pyx_v_classVersion = values[4];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_commandClassId = PyTuple_GET_ITEM(__pyx_args, 2);
    __pyx_v_className = PyTuple_GET_ITEM(__pyx_args, 3);
    __pyx_v_classVersion = PyTuple_GET_ITEM(__pyx_args, 4);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeClassInformation", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1538; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeClassInformation");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_INCREF(__pyx_v_className);
  __Pyx_INCREF(__pyx_v_classVersion);

  /* "libopenzwave.pyx":1558
 *         cdef uint8 oclassVersion
 *         cdef string oclassName
 *         ret=self.manager.GetNodeClassInformation(homeid, nodeid, commandClassId)             # <<<<<<<<<<<<<<
 *         if ret :
 *             className = oclassName.c_str()
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_commandClassId); if (unlikely((__pyx_t_3 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_ret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNodeClassInformation(__pyx_t_1, __pyx_t_2, __pyx_t_3, NULL);

  /* "libopenzwave.pyx":1559
 *         cdef string oclassName
 *         ret=self.manager.GetNodeClassInformation(homeid, nodeid, commandClassId)
 *         if ret :             # <<<<<<<<<<<<<<
 *             className = oclassName.c_str()
 *             classVersion = oclassVersion
 */
  if (__pyx_v_ret) {

    /* "libopenzwave.pyx":1560
 *         ret=self.manager.GetNodeClassInformation(homeid, nodeid, commandClassId)
 *         if ret :
 *             className = oclassName.c_str()             # <<<<<<<<<<<<<<
 *             classVersion = oclassVersion
 *             return ret
 */
    __pyx_t_4 = PyBytes_FromString(__pyx_v_oclassName.c_str()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    __Pyx_DECREF(__pyx_v_className);
    __pyx_v_className = ((PyObject *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "libopenzwave.pyx":1561
 *         if ret :
 *             className = oclassName.c_str()
 *             classVersion = oclassVersion             # <<<<<<<<<<<<<<
 *             return ret
 *         else :
 */
    __pyx_t_4 = PyInt_FromLong(__pyx_v_oclassVersion); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_v_classVersion);
    __pyx_v_classVersion = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "libopenzwave.pyx":1562
 *             className = oclassName.c_str()
 *             classVersion = oclassVersion
 *             return ret             # <<<<<<<<<<<<<<
 *         else :
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_ret); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "libopenzwave.pyx":1564
 *             return ret
 *         else :
 *             return False             # <<<<<<<<<<<<<<
 *         return
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }
  __pyx_L6:;

  /* "libopenzwave.pyx":1565
 *         else :
 *             return False
 *         return             # <<<<<<<<<<<<<<
 * 
 * #
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeClassInformation");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_className);
  __Pyx_DECREF(__pyx_v_classVersion);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1574
 * # in the ValueAdded Notification callback when the the value was first discovered by OpenZWave.
 * 
 *     def setValue(self, id, value):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setValue:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_54setValue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_54setValue[] = "\n.. _setValue:\n\nSets the value of a device valueid.\nDue to the possibility of a device being asleep, the command is assumed to suceeed, and the value\nheld by the node is updated directly.  This will be reverted by a future status message from the device\nif the Z-Wave message actually failed to get through.  Notification callbacks will be sent in both cases.\n\n:param id: The ID of a value.\n:type id: int\n:param value: The value to set.\n:type value: int\n:returns: int -- An integer representing the result of the operation  0 : The C method fails, 1 : The C method succeed, 2 : Can't find id in the map\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_54setValue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_id = 0;
  PyObject *__pyx_v_value = 0;
  float __pyx_v_type_float;
  bool __pyx_v_type_bool;
  __pyx_t_6mylibc_uint8 __pyx_v_type_byte;
  __pyx_t_6mylibc_int32 __pyx_v_type_int;
  __pyx_t_6mylibc_int16 __pyx_v_type_short;
  std::string __pyx_v_type_string;
  long __pyx_v_ret;
  PyObject *__pyx_v_datatype;
  bool __pyx_v_cret;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  bool __pyx_t_6;
  long __pyx_t_7;
  __pyx_t_6mylibc_uint8 __pyx_t_8;
  float __pyx_t_9;
  __pyx_t_6mylibc_int32 __pyx_t_10;
  __pyx_t_6mylibc_int16 __pyx_t_11;
  char *__pyx_t_12;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__id,&__pyx_n_s__value,0};
  __Pyx_RefNannySetupContext("setValue");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__id);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setValue", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1574; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setValue") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1574; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_id = values[0];
    __pyx_v_value = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_id = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_value = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setValue", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1574; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setValue");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_datatype = Py_None; __Pyx_INCREF(Py_None);

  /* "libopenzwave.pyx":1595
 *         cdef int16 type_short
 *         cdef string type_string
 *         ret = 2             # <<<<<<<<<<<<<<
 *         if values_map.find(id) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 */
  __pyx_v_ret = 2;

  /* "libopenzwave.pyx":1596
 *         cdef string type_string
 *         ret = 2
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1596; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":1597
 *         ret = 2
 *         if values_map.find(id) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(id).GetType()]             # <<<<<<<<<<<<<<
 * 
 *             if datatype == "Bool":
 */
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__PyValueTypes); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1597; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1597; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = PyInt_FromLong(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1).GetType()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1597; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_GetItem(__pyx_t_3, __pyx_t_4); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1597; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_v_datatype);
    __pyx_v_datatype = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "libopenzwave.pyx":1599
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 * 
 *             if datatype == "Bool":             # <<<<<<<<<<<<<<
 *                 type_bool = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_bool)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Bool), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":1600
 * 
 *             if datatype == "Bool":
 *                 type_bool = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetValue(values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_6 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_bool = __pyx_t_6;

      /* "libopenzwave.pyx":1601
 *             if datatype == "Bool":
 *                 type_bool = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_bool)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Byte":
 */
      __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetValue(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_bool);

      /* "libopenzwave.pyx":1602
 *                 type_bool = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Byte":
 *                 type_byte = value
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "libopenzwave.pyx":1603
 *                 cret = self.manager.SetValue(values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Byte":             # <<<<<<<<<<<<<<
 *                 type_byte = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_byte)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Byte), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1603; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1603; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":1604
 *                 ret = 1 if cret else 0
 *             elif datatype == "Byte":
 *                 type_byte = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetValue(values_map.at(id), type_byte)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_8 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_value); if (unlikely((__pyx_t_8 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1604; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_byte = __pyx_t_8;

      /* "libopenzwave.pyx":1605
 *             elif datatype == "Byte":
 *                 type_byte = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_byte)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Decimal":
 */
      __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1605; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetValue(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_byte);

      /* "libopenzwave.pyx":1606
 *                 type_byte = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_byte)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Decimal":
 *                 type_float = value
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "libopenzwave.pyx":1607
 *                 cret = self.manager.SetValue(values_map.at(id), type_byte)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Decimal":             # <<<<<<<<<<<<<<
 *                 type_float = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_float)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Decimal), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":1608
 *                 ret = 1 if cret else 0
 *             elif datatype == "Decimal":
 *                 type_float = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetValue(values_map.at(id), type_float)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_float = __pyx_t_9;

      /* "libopenzwave.pyx":1609
 *             elif datatype == "Decimal":
 *                 type_float = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_float)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Int":
 */
      __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetValue(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_float);

      /* "libopenzwave.pyx":1610
 *                 type_float = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_float)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Int":
 *                 type_int = value
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "libopenzwave.pyx":1611
 *                 cret = self.manager.SetValue(values_map.at(id), type_float)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Int":             # <<<<<<<<<<<<<<
 *                 type_int = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_int)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Int), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":1612
 *                 ret = 1 if cret else 0
 *             elif datatype == "Int":
 *                 type_int = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetValue(values_map.at(id), type_int)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_10 = __Pyx_PyInt_AsInt(__pyx_v_value); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_int = __pyx_t_10;

      /* "libopenzwave.pyx":1613
 *             elif datatype == "Int":
 *                 type_int = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_int)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Short":
 */
      __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetValue(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_int);

      /* "libopenzwave.pyx":1614
 *                 type_int = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_int)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Short":
 *                 type_short = value
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "libopenzwave.pyx":1615
 *                 cret = self.manager.SetValue(values_map.at(id), type_int)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Short":             # <<<<<<<<<<<<<<
 *                 type_short = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_short)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Short), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":1616
 *                 ret = 1 if cret else 0
 *             elif datatype == "Short":
 *                 type_short = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetValue(values_map.at(id), type_short)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_11 = __Pyx_PyInt_AsShort(__pyx_v_value); if (unlikely((__pyx_t_11 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_short = __pyx_t_11;

      /* "libopenzwave.pyx":1617
 *             elif datatype == "Short":
 *                 type_short = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_short)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "String":
 */
      __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetValue(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_short);

      /* "libopenzwave.pyx":1618
 *                 type_short = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_short)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "String":
 *                 type_string = string(value)
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "libopenzwave.pyx":1619
 *                 cret = self.manager.SetValue(values_map.at(id), type_short)
 *                 ret = 1 if cret else 0
 *             elif datatype == "String":             # <<<<<<<<<<<<<<
 *                 type_string = string(value)
 *                 cret = self.manager.SetValue(values_map.at(id), type_string)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__String), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1619; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1619; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":1620
 *                 ret = 1 if cret else 0
 *             elif datatype == "String":
 *                 type_string = string(value)             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetValue(values_map.at(id), type_string)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_12 = PyBytes_AsString(__pyx_v_value); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1620; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_string = std::string(__pyx_t_12);

      /* "libopenzwave.pyx":1621
 *             elif datatype == "String":
 *                 type_string = string(value)
 *                 cret = self.manager.SetValue(values_map.at(id), type_string)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *         return ret
 */
      __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1621; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetValue(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_string);

      /* "libopenzwave.pyx":1622
 *                 type_string = string(value)
 *                 cret = self.manager.SetValue(values_map.at(id), type_string)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }
    __pyx_L7:;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "libopenzwave.pyx":1623
 *                 cret = self.manager.SetValue(values_map.at(id), type_string)
 *                 ret = 1 if cret else 0
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def refreshValue(self, id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = PyInt_FromLong(__pyx_v_ret); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1623; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("libopenzwave.PyManager.setValue");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_datatype);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1625
 *         return ret
 * 
 *     def refreshValue(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _refreshValue:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_55refreshValue(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_55refreshValue[] = "\n.. _refreshValue:\n\nRefreshes the specified value from the Z-Wave network.\nA call to this function causes the library to send a message to the network to retrieve the current value\nof the specified ValueID (just like a poll, except only one-time, not recurring).\n\n:param id: The unique identifier of the value to be refreshed.\n:type id: int\n:returns: bool -- True if the driver and node were found; false otherwise\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_55refreshValue(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("refreshValue");

  /* "libopenzwave.pyx":1637
 * :returns: bool -- True if the driver and node were found; false otherwise
 *         '''
 *         return self.manager.RefreshValue(values_map.at(id))             # <<<<<<<<<<<<<<
 * 
 *     def getValueLabel(self, id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->RefreshValue(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.refreshValue");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1639
 *         return self.manager.RefreshValue(values_map.at(id))
 * 
 *     def getValueLabel(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueLabel:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_56getValueLabel(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_56getValueLabel[] = "\n.. _getValueLabel:\n\nGets the user-friendly label for the value\n\n:param id: The ID of a value.\n:type id: int\n:returns: str -- A string containing the user-friendly label of the value\n :see: setValueLabel_\n       ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_56getValueLabel(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getValueLabel");

  /* "libopenzwave.pyx":1651
 *        '''
 *         cdef string c_string
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             c_string = self.manager.GetValueLabel(values_map.at(id))
 *             return c_string.c_str()
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":1652
 *         cdef string c_string
 *         if values_map.find(id) != values_map.end():
 *             c_string = self.manager.GetValueLabel(values_map.at(id))             # <<<<<<<<<<<<<<
 *             return c_string.c_str()
 *         else :
 */
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_c_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetValueLabel(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1));

    /* "libopenzwave.pyx":1653
 *         if values_map.find(id) != values_map.end():
 *             c_string = self.manager.GetValueLabel(values_map.at(id))
 *             return c_string.c_str()             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __pyx_r = ((PyObject *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "libopenzwave.pyx":1655
 *             return c_string.c_str()
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def setValueLabel(self, id, char *label):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueLabel");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1657
 *             return None
 * 
 *     def setValueLabel(self, id, char *label):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setValueLabel:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_57setValueLabel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_57setValueLabel[] = "\n.. _setValueLabel:\n\nSets the user-friendly label for the value\n\n:param id: The ID of a value.\n:type id: int\n:param label: The label of the value.\n:type label: str\n:see: getValueLabel_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_57setValueLabel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_id = 0;
  char *__pyx_v_label;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__id,&__pyx_n_s__label,0};
  __Pyx_RefNannySetupContext("setValueLabel");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__id);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__label);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setValueLabel", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1657; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setValueLabel") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1657; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_id = values[0];
    __pyx_v_label = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_label) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1657; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_id = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_label = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((!__pyx_v_label) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1657; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setValueLabel", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1657; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setValueLabel");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":1669
 * :see: getValueLabel_
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             self.manager.SetValueLabel(values_map.at(id), string(label))
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":1670
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             self.manager.SetValueLabel(values_map.at(id), string(label))             # <<<<<<<<<<<<<<
 * 
 *     def getValueUnits(self, id):
 */
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetValueLabel(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), std::string(__pyx_v_label));
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setValueLabel");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1672
 *             self.manager.SetValueLabel(values_map.at(id), string(label))
 * 
 *     def getValueUnits(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueUnits:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_58getValueUnits(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_58getValueUnits[] = "\n.. _getValueUnits:\n\nGets the units that the value is measured in.\n\n:param id: The ID of a value.\n:type id: int\n:returns: str -- A string containing the value of the units.\n:see: getValueUnits_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_58getValueUnits(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getValueUnits");

  /* "libopenzwave.pyx":1684
 *         '''
 *         cdef string c_string
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             c_string = self.manager.GetValueUnits(values_map.at(id))
 *             return c_string.c_str()
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":1685
 *         cdef string c_string
 *         if values_map.find(id) != values_map.end():
 *             c_string = self.manager.GetValueUnits(values_map.at(id))             # <<<<<<<<<<<<<<
 *             return c_string.c_str()
 *         else :
 */
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_c_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetValueUnits(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1));

    /* "libopenzwave.pyx":1686
 *         if values_map.find(id) != values_map.end():
 *             c_string = self.manager.GetValueUnits(values_map.at(id))
 *             return c_string.c_str()             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __pyx_r = ((PyObject *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "libopenzwave.pyx":1688
 *             return c_string.c_str()
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def setValueUnits(self, id, char *unit):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueUnits");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1690
 *             return None
 * 
 *     def setValueUnits(self, id, char *unit):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setValueUnits:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_59setValueUnits(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_59setValueUnits[] = "\n.. _setValueUnits:\n\nSets the units that the value is measured in.\n\n:param id: The ID of a value.\n:type id: int\n:param label: The new value of the units.\n:type label: str\n:see: setValueUnits_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_59setValueUnits(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_id = 0;
  char *__pyx_v_unit;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__id,&__pyx_n_s__unit,0};
  __Pyx_RefNannySetupContext("setValueUnits");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__id);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__unit);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setValueUnits", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1690; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setValueUnits") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1690; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_id = values[0];
    __pyx_v_unit = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_unit) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1690; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_id = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_unit = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((!__pyx_v_unit) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1690; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setValueUnits", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1690; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setValueUnits");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":1702
 * :see: setValueUnits_
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             self.manager.SetValueUnits(values_map.at(id), string(unit))
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":1703
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             self.manager.SetValueUnits(values_map.at(id), string(unit))             # <<<<<<<<<<<<<<
 * 
 *     def getValueHelp(self, id):
 */
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetValueUnits(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), std::string(__pyx_v_unit));
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setValueUnits");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1705
 *             self.manager.SetValueUnits(values_map.at(id), string(unit))
 * 
 *     def getValueHelp(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueHelp:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_60getValueHelp(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_60getValueHelp[] = "\n.. _getValueHelp:\n\nGets a help string describing the value's purpose and usage.\n\n:param id: The ID of a value.\n:type id: int\n:returns: str -- A string containing the value help text.\n:see: getValueHelp\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_60getValueHelp(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getValueHelp");

  /* "libopenzwave.pyx":1717
 *         '''
 *         cdef string c_string
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             c_string = self.manager.GetValueHelp(values_map.at(id))
 *             return c_string.c_str()
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":1718
 *         cdef string c_string
 *         if values_map.find(id) != values_map.end():
 *             c_string = self.manager.GetValueHelp(values_map.at(id))             # <<<<<<<<<<<<<<
 *             return c_string.c_str()
 *         else :
 */
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1718; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_c_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetValueHelp(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1));

    /* "libopenzwave.pyx":1719
 *         if values_map.find(id) != values_map.end():
 *             c_string = self.manager.GetValueHelp(values_map.at(id))
 *             return c_string.c_str()             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __pyx_r = ((PyObject *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "libopenzwave.pyx":1721
 *             return c_string.c_str()
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def setValueHelp(self, id, char *help):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueHelp");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1723
 *             return None
 * 
 *     def setValueHelp(self, id, char *help):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setValueHelp:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_61setValueHelp(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_61setValueHelp[] = "\n.. _setValueHelp:\n\nSets a help string describing the value's purpose and usage.\n\n:param id: the ID of a value.\n:type id: int\n:param help: The new value of the help text.\n:type help: str\n:see: setValueHelp\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_61setValueHelp(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_id = 0;
  char *__pyx_v_help;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__id,&__pyx_n_s__help,0};
  __Pyx_RefNannySetupContext("setValueHelp");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__id);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__help);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setValueHelp", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1723; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setValueHelp") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1723; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_id = values[0];
    __pyx_v_help = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_help) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1723; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_id = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_help = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((!__pyx_v_help) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1723; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setValueHelp", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1723; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setValueHelp");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":1735
 * :see: setValueHelp
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             self.manager.SetValueHelp(values_map.at(id), string(help))
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":1736
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             self.manager.SetValueHelp(values_map.at(id), string(help))             # <<<<<<<<<<<<<<
 * 
 *     def getValueMin(self, id):
 */
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1736; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetValueHelp(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), std::string(__pyx_v_help));
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setValueHelp");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1738
 *             self.manager.SetValueHelp(values_map.at(id), string(help))
 * 
 *     def getValueMin(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueMin:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_62getValueMin(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_62getValueMin[] = "\n.. _getValueMin:\n\nGets the minimum that this value may contain.\n\n:param id: The ID of a value.\n:type id: int\n:returns: int -- The value minimum.\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_62getValueMin(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getValueMin");

  /* "libopenzwave.pyx":1748
 * :returns: int -- The value minimum.
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.GetValueMin(values_map.at(id))
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":1749
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.GetValueMin(values_map.at(id))             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = PyLong_FromUnsignedLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetValueMin(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "libopenzwave.pyx":1751
 *             return self.manager.GetValueMin(values_map.at(id))
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def getValueMax(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueMin");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1753
 *             return None
 * 
 *     def getValueMax(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueMax:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_63getValueMax(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_63getValueMax[] = "\n.. _getValueMax:\n\nGets the maximum that this value may contain.\n\n:param id: The ID of a value.\n:type id: int\n:returns: int -- The value maximum.\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_63getValueMax(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getValueMax");

  /* "libopenzwave.pyx":1763
 * :returns: int -- The value maximum.
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.GetValueMax(values_map.at(id))
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":1764
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.GetValueMax(values_map.at(id))             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = PyLong_FromUnsignedLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetValueMax(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "libopenzwave.pyx":1766
 *             return self.manager.GetValueMax(values_map.at(id))
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def isValueReadOnly(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueMax");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1768
 *             return None
 * 
 *     def isValueReadOnly(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isValueReadOnly:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_64isValueReadOnly(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_64isValueReadOnly[] = "\n.. _isValueReadOnly:\n\nTest whether the value is read-only.\n\n:param id: The ID of a value.\n:type id: int\n:returns: bool -- True if the value cannot be changed by the user.\n:see: isValueWriteOnly_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_64isValueReadOnly(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("isValueReadOnly");

  /* "libopenzwave.pyx":1779
 * :see: isValueWriteOnly_
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.IsValueReadOnly(values_map.at(id))
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1779; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":1780
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.IsValueReadOnly(values_map.at(id))             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1780; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->IsValueReadOnly(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1780; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "libopenzwave.pyx":1782
 *             return self.manager.IsValueReadOnly(values_map.at(id))
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def isValueWriteOnly(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isValueReadOnly");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1784
 *             return None
 * 
 *     def isValueWriteOnly(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isValueWriteOnly:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_65isValueWriteOnly(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_65isValueWriteOnly[] = "\n.. _isValueWriteOnly:\n\nTest whether the value is write-only.\n\n:param id: The ID of a value.\n:type id: int\n:returns: bool -- True if the value can only be written to and not read.\n:see: isValueReadOnly_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_65isValueWriteOnly(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("isValueWriteOnly");

  /* "libopenzwave.pyx":1795
 * :see: isValueReadOnly_
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.IsValueWriteOnly(values_map.at(id))
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":1796
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.IsValueWriteOnly(values_map.at(id))             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->IsValueWriteOnly(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "libopenzwave.pyx":1798
 *             return self.manager.IsValueWriteOnly(values_map.at(id))
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def isValueSet(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isValueWriteOnly");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1800
 *             return None
 * 
 *     def isValueSet(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isValueSet:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_66isValueSet(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_66isValueSet[] = "\n.. _isValueSet:\n\nTest whether the value has been set.\n\n:param id: the ID of a value.\n:type id: int\n:returns: bool -- True if the value has actually been set by a status message from the device, rather than simply being the default.\n:see: getValue_, getValueAsBool_, getValueAsByte_, getValueAsFloat_, getValueAsShort_, getValueAsInt_, getValueAsString_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_66isValueSet(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("isValueSet");

  /* "libopenzwave.pyx":1812
 * getValueAsFloat_, getValueAsShort_, getValueAsInt_, getValueAsString_
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.IsValueSet(values_map.at(id))
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1812; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":1813
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.IsValueSet(values_map.at(id))             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->IsValueSet(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "libopenzwave.pyx":1815
 *             return self.manager.IsValueSet(values_map.at(id))
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def getValue(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isValueSet");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1817
 *             return None
 * 
 *     def getValue(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValue:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_67getValue(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_67getValue[] = "\n.. _getValue:\n\nGets a value.\n\n:param id: The ID of a value.\n:type id: int\n:param value: The value to set.\n:type value: int\n:returns: multiple -- Depending of the type of the valueId, None otherwise\n:see: isValueSet_, getValueAsBool_, getValueAsByte_, getValueAsFloat_, getValueAsShort_, getValueAsInt_, getValueAsString_\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_67getValue(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getValue");

  /* "libopenzwave.pyx":1832
 * 
 *         '''
 *         return getValueFromType(self.manager,id)             # <<<<<<<<<<<<<<
 * 
 *     def getValueAsBool(self, id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12libopenzwave_getValueFromType(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager, __pyx_v_id); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValue");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1834
 *         return getValueFromType(self.manager,id)
 * 
 *     def getValueAsBool(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueAsBool:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_68getValueAsBool(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_68getValueAsBool[] = "\n.. _getValueAsBool:\n\nGets a value as a bool.\n\nTODO : Use getValueFromType(self.manager,id) when it will be ok\n\n:param id: The ID of a value.\n:type id: int\n:see: isValueSet_, getValue_, getValueAsByte_, getValueAsFloat_, getValueAsShort_, getValueAsInt_, getValueAsString_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_68getValueAsBool(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  bool __pyx_v_type_bool;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("getValueAsBool");

  /* "libopenzwave.pyx":1849
 *         cdef bool type_bool
 * 
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             if self.manager.GetValueAsBool(values_map.at(id), &type_bool):
 *                 return type_bool
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":1850
 * 
 *         if values_map.find(id) != values_map.end():
 *             if self.manager.GetValueAsBool(values_map.at(id), &type_bool):             # <<<<<<<<<<<<<<
 *                 return type_bool
 *             else :
 */
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1850; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetValueAsBool(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_bool));
    if (__pyx_t_3) {

      /* "libopenzwave.pyx":1851
 *         if values_map.find(id) != values_map.end():
 *             if self.manager.GetValueAsBool(values_map.at(id), &type_bool):
 *                 return type_bool             # <<<<<<<<<<<<<<
 *             else :
 *                 return None
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_type_bool); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1851; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;
      goto __pyx_L6;
    }
    /*else*/ {

      /* "libopenzwave.pyx":1853
 *                 return type_bool
 *             else :
 *                 return None             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }
    __pyx_L6:;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "libopenzwave.pyx":1855
 *                 return None
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def getValueAsByte(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueAsBool");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1857
 *             return None
 * 
 *     def getValueAsByte(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueAsByte:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_69getValueAsByte(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_69getValueAsByte[] = "\n.. _getValueAsByte:\n\nGets a value as an 8-bit unsigned integer.\n\nTODO : Use getValueFromType(self.manager,id) when it will be ok\n\n:param id: The ID of a value.\n:type id: int\n:see: isValueSet_, getValue_, getValueAsBool_, getValueAsFloat_, getValueAsShort_, getValueAsInt_, getValueAsString_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_69getValueAsByte(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  __pyx_t_6mylibc_uint8 __pyx_v_type_byte;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("getValueAsByte");

  /* "libopenzwave.pyx":1872
 *         cdef uint8 type_byte
 * 
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             if self.manager.GetValueAsByte(values_map.at(id), &type_byte):
 *                 return type_byte
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":1873
 * 
 *         if values_map.find(id) != values_map.end():
 *             if self.manager.GetValueAsByte(values_map.at(id), &type_byte):             # <<<<<<<<<<<<<<
 *                 return type_byte
 *             else :
 */
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetValueAsByte(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_byte));
    if (__pyx_t_3) {

      /* "libopenzwave.pyx":1874
 *         if values_map.find(id) != values_map.end():
 *             if self.manager.GetValueAsByte(values_map.at(id), &type_byte):
 *                 return type_byte             # <<<<<<<<<<<<<<
 *             else :
 *                 return None
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = PyInt_FromLong(__pyx_v_type_byte); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1874; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;
      goto __pyx_L6;
    }
    /*else*/ {

      /* "libopenzwave.pyx":1876
 *                 return type_byte
 *             else :
 *                 return None             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }
    __pyx_L6:;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "libopenzwave.pyx":1878
 *                 return None
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def getValueAsFloat(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueAsByte");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1880
 *             return None
 * 
 *     def getValueAsFloat(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueAsFloat:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_70getValueAsFloat(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_70getValueAsFloat[] = "\n.. _getValueAsFloat:\n\nGets a value as a float.\n\nTODO : Use getValueFromType(self.manager,id) when it will be ok\n\n:param id: The ID of a value.\n:type id: int\n:see: isValueSet_, getValue_, getValueAsBool_, getValueAsByte_, getValueAsShort_, getValueAsInt_, getValueAsString_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_70getValueAsFloat(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  float __pyx_v_type_float;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("getValueAsFloat");

  /* "libopenzwave.pyx":1895
 *         cdef float type_float
 * 
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             if self.manager.GetValueAsFloat(values_map.at(id), &type_float):
 *                 return type_float
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1895; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":1896
 * 
 *         if values_map.find(id) != values_map.end():
 *             if self.manager.GetValueAsFloat(values_map.at(id), &type_float):             # <<<<<<<<<<<<<<
 *                 return type_float
 *             else :
 */
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1896; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetValueAsFloat(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_float));
    if (__pyx_t_3) {

      /* "libopenzwave.pyx":1897
 *         if values_map.find(id) != values_map.end():
 *             if self.manager.GetValueAsFloat(values_map.at(id), &type_float):
 *                 return type_float             # <<<<<<<<<<<<<<
 *             else :
 *                 return None
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_type_float); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;
      goto __pyx_L6;
    }
    /*else*/ {

      /* "libopenzwave.pyx":1899
 *                 return type_float
 *             else :
 *                 return None             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }
    __pyx_L6:;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "libopenzwave.pyx":1901
 *                 return None
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def getValueAsShort(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueAsFloat");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1903
 *             return None
 * 
 *     def getValueAsShort(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueAsShort:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_71getValueAsShort(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_71getValueAsShort[] = "\n.. _getValueAsShort:\n\nGets a value as a 16-bit signed integer.\n\nTODO : Use getValueFromType(self.manager,id) when it will be ok\n\n:param id: The ID of a value.\n:type id: int\n:returns: int -- The value.\n:see: isValueSet_, getValue_, getValueAsBool_, getValueAsByte_, getValueAsFloat_, getValueAsInt_, getValueAsString_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_71getValueAsShort(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  __pyx_t_6mylibc_int16 __pyx_v_type_short;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("getValueAsShort");

  /* "libopenzwave.pyx":1919
 *         cdef int16 type_short
 * 
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             if self.manager.GetValueAsShort(values_map.at(id), &type_short):
 *                 return type_short
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":1920
 * 
 *         if values_map.find(id) != values_map.end():
 *             if self.manager.GetValueAsShort(values_map.at(id), &type_short):             # <<<<<<<<<<<<<<
 *                 return type_short
 *             else :
 */
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1920; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetValueAsShort(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_short));
    if (__pyx_t_3) {

      /* "libopenzwave.pyx":1921
 *         if values_map.find(id) != values_map.end():
 *             if self.manager.GetValueAsShort(values_map.at(id), &type_short):
 *                 return type_short             # <<<<<<<<<<<<<<
 *             else :
 *                 return None
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = PyInt_FromLong(__pyx_v_type_short); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1921; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;
      goto __pyx_L6;
    }
    /*else*/ {

      /* "libopenzwave.pyx":1923
 *                 return type_short
 *             else :
 *                 return None             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }
    __pyx_L6:;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "libopenzwave.pyx":1925
 *                 return None
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def getValueAsInt(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueAsShort");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1927
 *             return None
 * 
 *     def getValueAsInt(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueAsInt:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_72getValueAsInt(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_72getValueAsInt[] = "\n.. _getValueAsInt:\n\nGets a value as a 32-bit signed integer.\n\nTODO : Use getValueFromType(self.manager,id) when it will be ok\n\n:param id: The ID of a value.\n:type id: int\n:returns: int -- The value.\n:see: isValueSet_, getValue_, getValueAsBool_, getValueAsByte_, getValueAsFloat_, getValueAsShort_, getValueAsString_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_72getValueAsInt(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  __pyx_t_6mylibc_int32 __pyx_v_type_int;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("getValueAsInt");

  /* "libopenzwave.pyx":1943
 *         cdef int32 type_int
 * 
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             if self.manager.GetValueAsInt(values_map.at(id), &type_int):
 *                 return type_int
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1943; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":1944
 * 
 *         if values_map.find(id) != values_map.end():
 *             if self.manager.GetValueAsInt(values_map.at(id), &type_int):             # <<<<<<<<<<<<<<
 *                 return type_int
 *             else :
 */
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetValueAsInt(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_int));
    if (__pyx_t_3) {

      /* "libopenzwave.pyx":1945
 *         if values_map.find(id) != values_map.end():
 *             if self.manager.GetValueAsInt(values_map.at(id), &type_int):
 *                 return type_int             # <<<<<<<<<<<<<<
 *             else :
 *                 return None
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = PyInt_FromLong(__pyx_v_type_int); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1945; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;
      goto __pyx_L6;
    }
    /*else*/ {

      /* "libopenzwave.pyx":1947
 *                 return type_int
 *             else :
 *                 return None             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }
    __pyx_L6:;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "libopenzwave.pyx":1949
 *                 return None
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def getValueAsString(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueAsInt");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1951
 *             return None
 * 
 *     def getValueAsString(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueAsString:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_73getValueAsString(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_73getValueAsString[] = "\n.. _getValueAsString:\n\nGets a value as a string.\n\nTODO : Use getValueFromType(self.manager,id) when it will be ok\n\n:param id: The ID of a value.\n:type id: int\n:returns: str -- The value.\n:see: isValueSet_, getValue_, getValueAsBool_, getValueAsByte_, getValueAsFloat_, getValueAsShort_, getValueAsInt_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_73getValueAsString(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  std::string __pyx_v_type_string;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("getValueAsString");

  /* "libopenzwave.pyx":1967
 *         cdef string type_string
 * 
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             if self.manager.GetValueAsString(values_map.at(id), &type_string):
 *                 return type_string.c_str()
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1967; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":1968
 * 
 *         if values_map.find(id) != values_map.end():
 *             if self.manager.GetValueAsString(values_map.at(id), &type_string):             # <<<<<<<<<<<<<<
 *                 return type_string.c_str()
 *             else :
 */
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1968; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetValueAsString(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_string));
    if (__pyx_t_3) {

      /* "libopenzwave.pyx":1969
 *         if values_map.find(id) != values_map.end():
 *             if self.manager.GetValueAsString(values_map.at(id), &type_string):
 *                 return type_string.c_str()             # <<<<<<<<<<<<<<
 *             else :
 *                 return None
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = PyBytes_FromString(__pyx_v_type_string.c_str()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      __pyx_r = ((PyObject *)__pyx_t_4);
      __pyx_t_4 = 0;
      goto __pyx_L0;
      goto __pyx_L6;
    }
    /*else*/ {

      /* "libopenzwave.pyx":1971
 *                 return type_string.c_str()
 *             else :
 *                 return None             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }
    __pyx_L6:;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "libopenzwave.pyx":1973
 *                 return None
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 * #        bool GetValueListSelection(ValueID& valueid, string* o_value)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueAsString");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1985
 * #        bool SetValueListSelection(ValueID& valueid, string selecteditem)
 * 
 *     def pressButton(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _pressButton:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_74pressButton(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_74pressButton[] = "\n.. _pressButton:\n\nStarts an activity in a device.\nSince buttons are write-only values that do not report a state,\nno notification callbacks are sent.\n\n:param id: The ID of an integer value.\n:type id: int\n:returns: bool -- True if the activity was started. Returns false if the value is not a ValueID::ValueType_Button. The type can be tested with a call to ValueID::GetType.\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_74pressButton(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("pressButton");

  /* "libopenzwave.pyx":1997
 * :returns: bool -- True if the activity was started. Returns false if the value is not a ValueID::ValueType_Button. The type can be tested with a call to ValueID::GetType.
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.PressButton(values_map.at(id))
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":1998
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.PressButton(values_map.at(id))             # <<<<<<<<<<<<<<
 *         else :
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1998; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->PressButton(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1998; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "libopenzwave.pyx":2000
 *             return self.manager.PressButton(values_map.at(id))
 *         else :
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def releaseButton(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2000; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.pressButton");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2002
 *             return False
 * 
 *     def releaseButton(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _releaseButton:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_75releaseButton(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_75releaseButton[] = "\n.. _releaseButton:\n\nStops an activity in a device.\nSince buttons are write-only values that do not report a state,\nno notification callbacks are sent.\n\n:param id: the ID of an integer value.\n:type id: int\n:returns: bool -- True if the activity was stopped. Returns false if the value is not a ValueID::ValueType_Button. The type can be tested with a call to ValueID::GetType.\n\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_75releaseButton(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("releaseButton");

  /* "libopenzwave.pyx":2015
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.ReleaseButton(values_map.at(id))
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2015; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2016
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.ReleaseButton(values_map.at(id))             # <<<<<<<<<<<<<<
 *         else :
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->ReleaseButton(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "libopenzwave.pyx":2018
 *             return self.manager.ReleaseButton(values_map.at(id))
 *         else :
 *             return False             # <<<<<<<<<<<<<<
 * 
 * #
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2018; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.releaseButton");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2035
 * # have been made, they are sent to the device by calling SetSchedule.
 * #
 *     def setSwitchPoint(self, id, hours, minutes, setback):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setSwitchPoint:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_76setSwitchPoint(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_76setSwitchPoint[] = "\n.. _setSwitchPoint:\n\nSet a switch point in the schedule.\n\n:param id: The unique identifier of the schedule value.\n:type id: int\n:param hours: The hours part of the time when the switch point will trigger. The time is set using the 24-hour clock, so this value must be between 0 and 23.\n:type hours: int\n:param minutes: The minutes part of the time when the switch point will trigger.  This value must be between 0 and 59.\n:type minutes: int\n:param setback: The setback in tenths of a degree Celsius.  The setback value can range from -128 (-12.8C) to 120 (12.0C).  There are two special setback values - 121 is used to set Frost Protection mode, and 122 is used to set Energy Saving mode.\n:type setback: int\n:returns: bool -- True if the switch point is set.\n:see: removeSwitchPoint_, clearSwitchPoints_, getSwitchPoint_, getNumSwitchPoints_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_76setSwitchPoint(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_id = 0;
  PyObject *__pyx_v_hours = 0;
  PyObject *__pyx_v_minutes = 0;
  PyObject *__pyx_v_setback = 0;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  __pyx_t_6mylibc_uint8 __pyx_t_3;
  __pyx_t_6mylibc_uint8 __pyx_t_4;
  __pyx_t_6mylibc_uint8 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__id,&__pyx_n_s__hours,&__pyx_n_s__minutes,&__pyx_n_s__setback,0};
  __Pyx_RefNannySetupContext("setSwitchPoint");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__id);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__hours);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setSwitchPoint", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2035; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__minutes);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setSwitchPoint", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2035; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__setback);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setSwitchPoint", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2035; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setSwitchPoint") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2035; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_id = values[0];
    __pyx_v_hours = values[1];
    __pyx_v_minutes = values[2];
    __pyx_v_setback = values[3];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_id = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_hours = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_minutes = PyTuple_GET_ITEM(__pyx_args, 2);
    __pyx_v_setback = PyTuple_GET_ITEM(__pyx_args, 3);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setSwitchPoint", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2035; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setSwitchPoint");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":2052
 * :see: removeSwitchPoint_, clearSwitchPoints_, getSwitchPoint_, getNumSwitchPoints_
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.SetSwitchPoint(values_map.at(id), hours, minutes, setback)
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2053
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.SetSwitchPoint(values_map.at(id), hours, minutes, setback)             # <<<<<<<<<<<<<<
 *         else :
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2053; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_hours); if (unlikely((__pyx_t_3 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2053; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_minutes); if (unlikely((__pyx_t_4 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2053; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_setback); if (unlikely((__pyx_t_5 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2053; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetSwitchPoint(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_t_3, __pyx_t_4, __pyx_t_5)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2053; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "libopenzwave.pyx":2055
 *             return self.manager.SetSwitchPoint(values_map.at(id), hours, minutes, setback)
 *         else :
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def removeSwitchPoint(self, id, hours, minutes):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("libopenzwave.PyManager.setSwitchPoint");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2057
 *             return False
 * 
 *     def removeSwitchPoint(self, id, hours, minutes):             # <<<<<<<<<<<<<<
 *         '''
 * .. _removeSwitchPoint:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_77removeSwitchPoint(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_77removeSwitchPoint[] = "\n.. _removeSwitchPoint:\n\nRemove a switch point from the schedule\n\n:param id: The unique identifier of the schedule value.\n:type id: int\n:param hours: The hours part of the time when the switch point will trigger.  The time is set using the 24-hour clock, so this value must be between 0 and 23.\n:type hours: int\n:param minutes: The minutes part of the time when the switch point will trigger.  This value must be between 0 and 59.\n:type minutes: int\n:returns: bool -- True if the switch point is removed.\n:see: setSwitchPoint_, clearSwitchPoints_, getSwitchPoint_, getNumSwitchPoints_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_77removeSwitchPoint(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_id = 0;
  PyObject *__pyx_v_hours = 0;
  PyObject *__pyx_v_minutes = 0;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  __pyx_t_6mylibc_uint8 __pyx_t_3;
  __pyx_t_6mylibc_uint8 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__id,&__pyx_n_s__hours,&__pyx_n_s__minutes,0};
  __Pyx_RefNannySetupContext("removeSwitchPoint");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__id);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__hours);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("removeSwitchPoint", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2057; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__minutes);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("removeSwitchPoint", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2057; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "removeSwitchPoint") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2057; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_id = values[0];
    __pyx_v_hours = values[1];
    __pyx_v_minutes = values[2];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_id = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_hours = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_minutes = PyTuple_GET_ITEM(__pyx_args, 2);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("removeSwitchPoint", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2057; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.removeSwitchPoint");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":2072
 * :see: setSwitchPoint_, clearSwitchPoints_, getSwitchPoint_, getNumSwitchPoints_
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.RemoveSwitchPoint(values_map.at(id), hours, minutes)
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2072; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2073
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.RemoveSwitchPoint(values_map.at(id), hours, minutes)             # <<<<<<<<<<<<<<
 *         else :
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_hours); if (unlikely((__pyx_t_3 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_minutes); if (unlikely((__pyx_t_4 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->RemoveSwitchPoint(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_t_3, __pyx_t_4)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "libopenzwave.pyx":2075
 *             return self.manager.RemoveSwitchPoint(values_map.at(id), hours, minutes)
 *         else :
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def clearSwitchPoints(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("libopenzwave.PyManager.removeSwitchPoint");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2077
 *             return False
 * 
 *     def clearSwitchPoints(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _clearSwitchPoints:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_78clearSwitchPoints(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_78clearSwitchPoints[] = "\n.. _clearSwitchPoints:\n\nClears all switch points from the schedule\n\n:param id: The unique identifier of the schedule value.\n:type id: int\n:returns: bool -- True if all switch points are clear.\n:see: setSwitchPoint_, removeSwitchPoint_, getSwitchPoint_, getNumSwitchPoints_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_78clearSwitchPoints(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("clearSwitchPoints");

  /* "libopenzwave.pyx":2088
 * :see: setSwitchPoint_, removeSwitchPoint_, getSwitchPoint_, getNumSwitchPoints_
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             self.manager.ClearSwitchPoints(values_map.at(id))
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2089
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             self.manager.ClearSwitchPoints(values_map.at(id))             # <<<<<<<<<<<<<<
 * 
 *     def getSwitchPoint(self, id, idx, hours, minutes, setback):
 */
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2089; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->ClearSwitchPoints(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1));
    goto __pyx_L5;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.clearSwitchPoints");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2091
 *             self.manager.ClearSwitchPoints(values_map.at(id))
 * 
 *     def getSwitchPoint(self, id, idx, hours, minutes, setback):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getSwitchPoint:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_79getSwitchPoint(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_79getSwitchPoint[] = "\n.. _getSwitchPoint:\n\nGets switch point data from the schedule\n\n:param id: The unique identifier of the schedule value.\n:type id: int\n:param idx: The index of the switch point, between zero and one less than the value returned by GetNumSwitchPoints.\n:type idx: int\n:param hours: An integer that will be filled with the hours part of the switch point data.\n:type hours: int\n:param minutes: An integer that will be filled with the minutes part of the switch point data.\n:type minutes: int\n:param setback: An integer that will be filled with the setback value.  This can range from -128 (-12.8C)to 120 (12.0C).  There are two special setback values - 121 is used to set Frost Protection mode, and 122 is used to set Energy Saving mode.\n:type setback: int\n:returns: bool -- True if successful.  Returns False if the value is not a ValueID::ValueType_Schedule. The type can be tested with a call to ValueID::GetType.\n:see: setSwitchPoint_, removeSwitchPoint_, clearSwitchPoints_, getNumSwitchPoints_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_79getSwitchPoint(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_id = 0;
  PyObject *__pyx_v_idx = 0;
  PyObject *__pyx_v_hours = 0;
  PyObject *__pyx_v_minutes = 0;
  PyObject *__pyx_v_setback = 0;
  __pyx_t_6mylibc_uint8 __pyx_v_ohours;
  __pyx_t_6mylibc_uint8 __pyx_v_ominutes;
  __pyx_t_6mylibc_int8 __pyx_v_osetback;
  bool __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  __pyx_t_6mylibc_uint8 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__id,&__pyx_n_s__idx,&__pyx_n_s__hours,&__pyx_n_s__minutes,&__pyx_n_s__setback,0};
  __Pyx_RefNannySetupContext("getSwitchPoint");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[5] = {0,0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__id);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__idx);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getSwitchPoint", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2091; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__hours);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getSwitchPoint", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2091; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__minutes);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getSwitchPoint", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2091; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  4:
      values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__setback);
      if (likely(values[4])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getSwitchPoint", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2091; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getSwitchPoint") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2091; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_id = values[0];
    __pyx_v_idx = values[1];
    __pyx_v_hours = values[2];
    __pyx_v_minutes = values[3];
    __pyx_v_setback = values[4];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_id = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_idx = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_hours = PyTuple_GET_ITEM(__pyx_args, 2);
    __pyx_v_minutes = PyTuple_GET_ITEM(__pyx_args, 3);
    __pyx_v_setback = PyTuple_GET_ITEM(__pyx_args, 4);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getSwitchPoint", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2091; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getSwitchPoint");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_INCREF(__pyx_v_hours);
  __Pyx_INCREF(__pyx_v_minutes);
  __Pyx_INCREF(__pyx_v_setback);

  /* "libopenzwave.pyx":2113
 *         cdef uint8 ominutes
 *         cdef int8 osetback
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             ret=self.manager.GetSwitchPoint(values_map.at(id), idx, \
 *                 &ohours, &ominutes, &osetback)
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2114
 *         cdef int8 osetback
 *         if values_map.find(id) != values_map.end():
 *             ret=self.manager.GetSwitchPoint(values_map.at(id), idx, \             # <<<<<<<<<<<<<<
 *                 &ohours, &ominutes, &osetback)
 *             if ret :
 */
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_idx); if (unlikely((__pyx_t_3 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "libopenzwave.pyx":2115
 *         if values_map.find(id) != values_map.end():
 *             ret=self.manager.GetSwitchPoint(values_map.at(id), idx, \
 *                 &ohours, &ominutes, &osetback)             # <<<<<<<<<<<<<<
 *             if ret :
 *                 hours = ohours
 */
    __pyx_v_ret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetSwitchPoint(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_t_3, (&__pyx_v_ohours), (&__pyx_v_ominutes), (&__pyx_v_osetback));

    /* "libopenzwave.pyx":2116
 *             ret=self.manager.GetSwitchPoint(values_map.at(id), idx, \
 *                 &ohours, &ominutes, &osetback)
 *             if ret :             # <<<<<<<<<<<<<<
 *                 hours = ohours
 *                 minutes = ominutes
 */
    if (__pyx_v_ret) {

      /* "libopenzwave.pyx":2117
 *                 &ohours, &ominutes, &osetback)
 *             if ret :
 *                 hours = ohours             # <<<<<<<<<<<<<<
 *                 minutes = ominutes
 *                 setback = osetback
 */
      __pyx_t_4 = PyInt_FromLong(__pyx_v_ohours); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_v_hours);
      __pyx_v_hours = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "libopenzwave.pyx":2118
 *             if ret :
 *                 hours = ohours
 *                 minutes = ominutes             # <<<<<<<<<<<<<<
 *                 setback = osetback
 *             return ret
 */
      __pyx_t_4 = PyInt_FromLong(__pyx_v_ominutes); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_v_minutes);
      __pyx_v_minutes = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "libopenzwave.pyx":2119
 *                 hours = ohours
 *                 minutes = ominutes
 *                 setback = osetback             # <<<<<<<<<<<<<<
 *             return ret
 *         else :
 */
      __pyx_t_4 = PyInt_FromLong(__pyx_v_osetback); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_v_setback);
      __pyx_v_setback = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L7;
    }
    __pyx_L7:;

    /* "libopenzwave.pyx":2120
 *                 minutes = ominutes
 *                 setback = osetback
 *             return ret             # <<<<<<<<<<<<<<
 *         else :
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_ret); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "libopenzwave.pyx":2122
 *             return ret
 *         else :
 *             return False             # <<<<<<<<<<<<<<
 * #        return False
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libopenzwave.PyManager.getSwitchPoint");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_hours);
  __Pyx_DECREF(__pyx_v_minutes);
  __Pyx_DECREF(__pyx_v_setback);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2125
 * #        return False
 * 
 *     def getNumSwitchPoints(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNumSwitchPoints:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_80getNumSwitchPoints(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_80getNumSwitchPoints[] = "\n.. _getNumSwitchPoints:\n\nGet the number of switch points defined in a schedule\n\n:param id: The unique identifier of the schedule value.\n:type id: int\n:returns: The number of switch points defined in this schedule.  Returns zero if the value is not a ValueID::ValueType_Schedule. The type can be tested with a call to ValueID::GetType.\n:see: setSwitchPoint_, removeSwitchPoint_, clearSwitchPoints_, getSwitchPoint_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_80getNumSwitchPoints(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getNumSwitchPoints");

  /* "libopenzwave.pyx":2136
 * :see: setSwitchPoint_, removeSwitchPoint_, clearSwitchPoints_, getSwitchPoint_
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.GetNumSwitchPoints(values_map.at(id))
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2137
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.GetNumSwitchPoints(values_map.at(id))             # <<<<<<<<<<<<<<
 *         else :
 *             return 0
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = PyInt_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNumSwitchPoints(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "libopenzwave.pyx":2139
 *             return self.manager.GetNumSwitchPoints(values_map.at(id))
 *         else :
 *             return 0             # <<<<<<<<<<<<<<
 * 
 * #
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNumSwitchPoints");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2150
 * # not routed, the message might not otherwise reach all the nodes).
 * #
 *     def switchAllOn(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _switchAllOn:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_81switchAllOn(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_81switchAllOn[] = "\n.. _switchAllOn:\n\nSwitch all devices on.  All devices that support the SwitchAll command class\nwill be turned on.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:see: switchAllOff_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_81switchAllOn(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __Pyx_RefNannySetupContext("switchAllOn");

  /* "libopenzwave.pyx":2161
 * :see: switchAllOff_
 *         '''
 *         self.manager.SwitchAllOn(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def switchAllOff(self, homeid):
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SwitchAllOn(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.switchAllOn");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2163
 *         self.manager.SwitchAllOn(homeid)
 * 
 *     def switchAllOff(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _switchAllOff:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_82switchAllOff(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_82switchAllOff[] = "\n.. _switchAllOff:\n\nSwitch all devices off.  All devices that support the SwitchAll command class\nwill be turned off.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:see: switchAllOn_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_82switchAllOff(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __Pyx_RefNannySetupContext("switchAllOff");

  /* "libopenzwave.pyx":2174
 * :see: switchAllOn_
 *         '''
 *         self.manager.SwitchAllOff(homeid)             # <<<<<<<<<<<<<<
 * 
 * # -----------------------------------------------------------------------------
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SwitchAllOff(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.switchAllOff");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2187
 * # parameters for every Z-Wave.  See the config folder in the project source code for examples.
 * #
 *     def setConfigParam(self, homeid, nodeid, param, value):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setConfigParam:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_83setConfigParam(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_83setConfigParam[] = "\n.. _setConfigParam:\n\nSet the value of a configurable parameter in a device.\n\nSome devices have various parameters that can be configured to control the\ndevice behaviour.  These are not reported by the device over the Z-Wave network\nbut can usually be found in the devices user manual.  This method returns\nimmediately, without waiting for confirmation from the device that the change\nhas been made.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to configure.\n:type nodeId: int\n:param param: The index of the parameter.\n:type param: int\n:param value: The value to which the parameter should be set.\n:type value: int\n:returns: bool -- True if the a message setting the value was sent to the device.\n:see: requestConfigParam_, requestAllConfigParams_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_83setConfigParam(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_param = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  __pyx_t_6mylibc_uint8 __pyx_t_3;
  __pyx_t_6mylibc_uint32 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__param,&__pyx_n_s__value,0};
  __Pyx_RefNannySetupContext("setConfigParam");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setConfigParam", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2187; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__param);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setConfigParam", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2187; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setConfigParam", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2187; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setConfigParam") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2187; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_param = values[2];
    __pyx_v_value = values[3];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_param = PyTuple_GET_ITEM(__pyx_args, 2);
    __pyx_v_value = PyTuple_GET_ITEM(__pyx_args, 3);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setConfigParam", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2187; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setConfigParam");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":2210
 * :see: requestConfigParam_, requestAllConfigParams_
 *         '''
 *         return self.manager.SetConfigParam(homeid, nodeid, param, value)             # <<<<<<<<<<<<<<
 * 
 *     def requestConfigParam(self, homeid, nodeid, param):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_param); if (unlikely((__pyx_t_3 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_value); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetConfigParam(__pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4, NULL)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("libopenzwave.PyManager.setConfigParam");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2212
 *         return self.manager.SetConfigParam(homeid, nodeid, param, value)
 * 
 *     def requestConfigParam(self, homeid, nodeid, param):             # <<<<<<<<<<<<<<
 *         '''
 * .. _requestConfigParam:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_84requestConfigParam(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_84requestConfigParam[] = "\n.. _requestConfigParam:\n\nRequest the value of a configurable parameter from a device.\n\nSome devices have various parameters that can be configured to control the\ndevice behaviour.  These are not reported by the device over the Z-Wave network\nbut can usually be found in the devices user manual.  This method requests\nthe value of a parameter from the device, and then returns immediately,\nwithout waiting for a response.  If the parameter index is valid for this\ndevice, and the device is awake, the value will eventually be reported via a\nValueChanged notification callback.  The ValueID reported in the callback will\nhave an index set the same as _param and a command class set to the same value\nas returned by a call to Configuration::StaticGetCommandClassId.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to configure.\n:type nodeId: int\n:param param: The index of the parameter.\n:type param: int\n:see: requestAllConfigParams_, setConfigParam_, valueID_, notification_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_84requestConfigParam(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_param = 0;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  __pyx_t_6mylibc_uint8 __pyx_t_3;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__param,0};
  __Pyx_RefNannySetupContext("requestConfigParam");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("requestConfigParam", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2212; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__param);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("requestConfigParam", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2212; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "requestConfigParam") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2212; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_param = values[2];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_param = PyTuple_GET_ITEM(__pyx_args, 2);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("requestConfigParam", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2212; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.requestConfigParam");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":2236
 * :see: requestAllConfigParams_, setConfigParam_, valueID_, notification_
 *         '''
 *         self.manager.RequestConfigParam(homeid, nodeid, param)             # <<<<<<<<<<<<<<
 * 
 *     def requestAllConfigParams(self, homeid, nodeid):
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_param); if (unlikely((__pyx_t_3 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->RequestConfigParam(__pyx_t_1, __pyx_t_2, __pyx_t_3);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.requestConfigParam");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2238
 *         self.manager.RequestConfigParam(homeid, nodeid, param)
 * 
 *     def requestAllConfigParams(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _requestAllConfigParams:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_85requestAllConfigParams(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_85requestAllConfigParams[] = "\n.. _requestAllConfigParams:\n\nRequest the values of all known configurable parameters from a device.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to configure.\n:type nodeId: int\n:see: requestConfigParam_, setConfigParam_, valueID_, notification_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_85requestAllConfigParams(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("requestAllConfigParams");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("requestAllConfigParams", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2238; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "requestAllConfigParams") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2238; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("requestAllConfigParams", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2238; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.requestAllConfigParams");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":2250
 * :see: requestConfigParam_, setConfigParam_, valueID_, notification_
 *         '''
 *         self.manager.RequestAllConfigParams(homeid, nodeid)             # <<<<<<<<<<<<<<
 * #
 * # -----------------------------------------------------------------------------
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->RequestAllConfigParams(__pyx_t_1, __pyx_t_2);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.requestAllConfigParams");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2257
 * # Methods for accessing device association groups.
 * #
 *     def getNumGroups(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNumGroups:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_86getNumGroups(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_86getNumGroups[] = "\n.. _getNumGroups:\n\nGets the number of association groups reported by this node\n\nIn Z-Wave, groups are numbered starting from one.  For example, if a call to\nGetNumGroups returns 4, the _groupIdx value to use in calls to GetAssociations\nAddAssociation and RemoveAssociation will be a number between 1 and 4.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node whose groups we are interested in.\n:type nodeId: int\n:returns: int -- The number of groups.\n:see: getAssociations, getMaxAssociations, addAssociation, removeAssociation\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_86getNumGroups(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,0};
  __Pyx_RefNannySetupContext("getNumGroups");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getNumGroups", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2257; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getNumGroups") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2257; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNumGroups", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2257; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNumGroups");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":2274
 * :see: getAssociations, getMaxAssociations, addAssociation, removeAssociation
 *         '''
 *         return self.manager.GetNumGroups(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getAssociations(self, homeid, nodeid, groupidx):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyInt_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNumGroups(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNumGroups");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2276
 *         return self.manager.GetNumGroups(homeid, nodeid)
 * 
 *     def getAssociations(self, homeid, nodeid, groupidx):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getAssociations:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_87getAssociations(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_87getAssociations[] = "\n.. _getAssociations:\n\nGets the associations for a group\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node whose associations we are interested in.\n:type nodeId: int\n:param groupIdx: one-based index of the group (because Z-Wave product manuals use one-based group numbering).\n:type groupIdx: int\n:returns: set -- A set containing IDs of members of the group\n:see: getNumGroups, addAssociation, removeAssociation, getMaxAssociations\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_87getAssociations(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_groupidx = 0;
  PyObject *__pyx_v_retval;
  __pyx_t_6mylibc_uint32 __pyx_v_size;
  __pyx_t_6mylibc_uint8 **__pyx_v_dbuf;
  __pyx_t_6mylibc_uint32 __pyx_v_count;
  __pyx_t_6mylibc_uint8 *__pyx_v_retuint8;
  __pyx_t_6mylibc_uint8 *__pyx_v_p;
  __pyx_t_6mylibc_uint32 __pyx_v_start;
  PyObject *__pyx_v_data;
  __pyx_t_6mylibc_uint32 __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  __pyx_t_6mylibc_uint8 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__groupidx,0};
  __Pyx_RefNannySetupContext("getAssociations");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getAssociations", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2276; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__groupidx);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getAssociations", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2276; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getAssociations") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2276; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_groupidx = values[2];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_groupidx = PyTuple_GET_ITEM(__pyx_args, 2);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getAssociations", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2276; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getAssociations");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_retval = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_data = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);

  /* "libopenzwave.pyx":2291
 * :see: getNumGroups, addAssociation, removeAssociation, getMaxAssociations
 *         '''
 *         retval = None             # <<<<<<<<<<<<<<
 *         cdef uint32 size = self.manager.GetMaxAssociations(homeid, nodeid, groupidx)
 *         #Allocate memory
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF(__pyx_v_retval);
  __pyx_v_retval = Py_None;

  /* "libopenzwave.pyx":2292
 *         '''
 *         retval = None
 *         cdef uint32 size = self.manager.GetMaxAssociations(homeid, nodeid, groupidx)             # <<<<<<<<<<<<<<
 *         #Allocate memory
 *         cdef uint8** dbuf = <uint8**>malloc(sizeof(uint8) * size)
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_groupidx); if (unlikely((__pyx_t_3 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_size = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetMaxAssociations(__pyx_t_1, __pyx_t_2, __pyx_t_3);

  /* "libopenzwave.pyx":2294
 *         cdef uint32 size = self.manager.GetMaxAssociations(homeid, nodeid, groupidx)
 *         #Allocate memory
 *         cdef uint8** dbuf = <uint8**>malloc(sizeof(uint8) * size)             # <<<<<<<<<<<<<<
 *         # return value is pointer to uint8[]
 *         cdef uint32 count = self.manager.GetAssociations(homeid, nodeid, groupidx, dbuf)
 */
  __pyx_v_dbuf = ((__pyx_t_6mylibc_uint8 **)malloc(((sizeof(__pyx_t_6mylibc_uint8)) * __pyx_v_size)));

  /* "libopenzwave.pyx":2296
 *         cdef uint8** dbuf = <uint8**>malloc(sizeof(uint8) * size)
 *         # return value is pointer to uint8[]
 *         cdef uint32 count = self.manager.GetAssociations(homeid, nodeid, groupidx, dbuf)             # <<<<<<<<<<<<<<
 *         cdef uint8* retuint8 = <uint8*>malloc(sizeof(uint8)*count)
 *         cdef uint8* p
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_3 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_groupidx); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_count = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetAssociations(__pyx_t_1, __pyx_t_3, __pyx_t_2, __pyx_v_dbuf);

  /* "libopenzwave.pyx":2297
 *         # return value is pointer to uint8[]
 *         cdef uint32 count = self.manager.GetAssociations(homeid, nodeid, groupidx, dbuf)
 *         cdef uint8* retuint8 = <uint8*>malloc(sizeof(uint8)*count)             # <<<<<<<<<<<<<<
 *         cdef uint8* p
 *         cdef uint32 start = 0
 */
  __pyx_v_retuint8 = ((__pyx_t_6mylibc_uint8 *)malloc(((sizeof(__pyx_t_6mylibc_uint8)) * __pyx_v_count)));

  /* "libopenzwave.pyx":2299
 *         cdef uint8* retuint8 = <uint8*>malloc(sizeof(uint8)*count)
 *         cdef uint8* p
 *         cdef uint32 start = 0             # <<<<<<<<<<<<<<
 *         if count:
 *             try:
 */
  __pyx_v_start = 0;

  /* "libopenzwave.pyx":2300
 *         cdef uint8* p
 *         cdef uint32 start = 0
 *         if count:             # <<<<<<<<<<<<<<
 *             try:
 *                 data = list()
 */
  if (__pyx_v_count) {

    /* "libopenzwave.pyx":2301
 *         cdef uint32 start = 0
 *         if count:
 *             try:             # <<<<<<<<<<<<<<
 *                 data = list()
 *                 p = dbuf[0] # p is now pointing at first element of array
 */
    /*try:*/ {

      /* "libopenzwave.pyx":2302
 *         if count:
 *             try:
 *                 data = list()             # <<<<<<<<<<<<<<
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(start, count):
 */
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2302; __pyx_clineno = __LINE__; goto __pyx_L8;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      __Pyx_DECREF(((PyObject *)__pyx_v_data));
      __pyx_v_data = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "libopenzwave.pyx":2303
 *             try:
 *                 data = list()
 *                 p = dbuf[0] # p is now pointing at first element of array             # <<<<<<<<<<<<<<
 *                 for i in range(start, count):
 *                     retuint8[i] = p[0]
 */
      __pyx_v_p = (__pyx_v_dbuf[0]);

      /* "libopenzwave.pyx":2304
 *                 data = list()
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(start, count):             # <<<<<<<<<<<<<<
 *                     retuint8[i] = p[0]
 *                     data.add(retuint8[i])
 */
      __pyx_t_1 = __pyx_v_count;
      for (__pyx_t_5 = __pyx_v_start; __pyx_t_5 < __pyx_t_1; __pyx_t_5+=1) {
        __pyx_v_i = __pyx_t_5;

        /* "libopenzwave.pyx":2305
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(start, count):
 *                     retuint8[i] = p[0]             # <<<<<<<<<<<<<<
 *                     data.add(retuint8[i])
 *                     p += 1
 */
        (__pyx_v_retuint8[__pyx_v_i]) = (__pyx_v_p[0]);

        /* "libopenzwave.pyx":2306
 *                 for i in range(start, count):
 *                     retuint8[i] = p[0]
 *                     data.add(retuint8[i])             # <<<<<<<<<<<<<<
 *                     p += 1
 *                 retval = tuple(data)
 */
        __pyx_t_4 = PyObject_GetAttr(((PyObject *)__pyx_v_data), __pyx_n_s__add); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2306; __pyx_clineno = __LINE__; goto __pyx_L8;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_6 = PyInt_FromLong((__pyx_v_retuint8[__pyx_v_i])); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2306; __pyx_clineno = __LINE__; goto __pyx_L8;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2306; __pyx_clineno = __LINE__; goto __pyx_L8;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_7));
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_6 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2306; __pyx_clineno = __LINE__; goto __pyx_L8;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "libopenzwave.pyx":2307
 *                     retuint8[i] = p[0]
 *                     data.add(retuint8[i])
 *                     p += 1             # <<<<<<<<<<<<<<
 *                 retval = tuple(data)
 *             finally:
 */
        __pyx_v_p = (__pyx_v_p + 1);
      }

      /* "libopenzwave.pyx":2308
 *                     data.add(retuint8[i])
 *                     p += 1
 *                 retval = tuple(data)             # <<<<<<<<<<<<<<
 *             finally:
 *                 # Free memory
 */
      if (unlikely(__pyx_v_data == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2308; __pyx_clineno = __LINE__; goto __pyx_L8;} 
      }
      __pyx_t_6 = ((PyObject *)PyList_AsTuple(__pyx_v_data)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2308; __pyx_clineno = __LINE__; goto __pyx_L8;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_6));
      __Pyx_DECREF(__pyx_v_retval);
      __pyx_v_retval = ((PyObject *)__pyx_t_6);
      __pyx_t_6 = 0;
    }

    /* "libopenzwave.pyx":2311
 *             finally:
 *                 # Free memory
 *                 free(dbuf)             # <<<<<<<<<<<<<<
 *                 pass
 *         return retval
 */
    /*finally:*/ {
      int __pyx_why;
      PyObject *__pyx_exc_type, *__pyx_exc_value, *__pyx_exc_tb;
      int __pyx_exc_lineno;
      __pyx_exc_type = 0; __pyx_exc_value = 0; __pyx_exc_tb = 0; __pyx_exc_lineno = 0;
      __pyx_why = 0; goto __pyx_L9;
      __pyx_L8: {
        __pyx_why = 4;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_ErrFetch(&__pyx_exc_type, &__pyx_exc_value, &__pyx_exc_tb);
        __pyx_exc_lineno = __pyx_lineno;
        goto __pyx_L9;
      }
      __pyx_L9:;
      free(__pyx_v_dbuf);
      switch (__pyx_why) {
        case 4: {
          __Pyx_ErrRestore(__pyx_exc_type, __pyx_exc_value, __pyx_exc_tb);
          __pyx_lineno = __pyx_exc_lineno;
          __pyx_exc_type = 0;
          __pyx_exc_value = 0;
          __pyx_exc_tb = 0;
          goto __pyx_L1_error;
        }
      }
    }
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "libopenzwave.pyx":2313
 *                 free(dbuf)
 *                 pass
 *         return retval             # <<<<<<<<<<<<<<
 * 
 *     def getMaxAssociations(self, homeid, nodeid, groupidx):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_retval);
  __pyx_r = __pyx_v_retval;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("libopenzwave.PyManager.getAssociations");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_retval);
  __Pyx_DECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2315
 *         return retval
 * 
 *     def getMaxAssociations(self, homeid, nodeid, groupidx):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getMaxAssociations:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_88getMaxAssociations(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_88getMaxAssociations[] = "\n.. _getMaxAssociations:\n\nGets the maximum number of associations for a group.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node whose associations we are interested in.\n:type nodeId: int\n:param groupIdx: One-based index of the group (because Z-Wave product manuals use one-based group numbering).\n:type groupIdx: int\n:returns: int -- The maximum number of nodes that can be associated into the group.\n:see: getNumGroups, addAssociation, removeAssociation, getAssociations\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_88getMaxAssociations(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_groupidx = 0;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  __pyx_t_6mylibc_uint8 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__groupidx,0};
  __Pyx_RefNannySetupContext("getMaxAssociations");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getMaxAssociations", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2315; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__groupidx);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getMaxAssociations", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2315; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getMaxAssociations") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2315; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_groupidx = values[2];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_groupidx = PyTuple_GET_ITEM(__pyx_args, 2);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getMaxAssociations", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2315; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getMaxAssociations");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":2330
 * :see: getNumGroups, addAssociation, removeAssociation, getAssociations
 *         '''
 *         return self.manager.GetMaxAssociations(homeid, nodeid, groupidx)             # <<<<<<<<<<<<<<
 * 
 *     def getGroupLabel(self, homeid, nodeid, groupidx):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_groupidx); if (unlikely((__pyx_t_3 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = PyInt_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetMaxAssociations(__pyx_t_1, __pyx_t_2, __pyx_t_3)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libopenzwave.PyManager.getMaxAssociations");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2332
 *         return self.manager.GetMaxAssociations(homeid, nodeid, groupidx)
 * 
 *     def getGroupLabel(self, homeid, nodeid, groupidx):             # <<<<<<<<<<<<<<
 *         '''
 * Returns a label for the particular group of a node.
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_89getGroupLabel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_89getGroupLabel[] = "\nReturns a label for the particular group of a node.\n\n.. _getGroupLabel:\n\nThis label is populated by the device specific configuration files.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node whose associations are to be changed.\n:type nodeId: int\n:param groupIdx: One-based index of the group (because Z-Wave product manuals use one-based group numbering).\n:type groupIdx: int\n:see: getNumGroups_, getAssociations_, getMaxAssociations_, addAssociation_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_89getGroupLabel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_groupidx = 0;
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  __pyx_t_6mylibc_uint8 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__groupidx,0};
  __Pyx_RefNannySetupContext("getGroupLabel");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getGroupLabel", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2332; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__groupidx);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("getGroupLabel", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2332; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getGroupLabel") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2332; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_groupidx = values[2];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_groupidx = PyTuple_GET_ITEM(__pyx_args, 2);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getGroupLabel", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2332; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getGroupLabel");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":2348
 * :see: getNumGroups_, getAssociations_, getMaxAssociations_, addAssociation_
 *         '''
 *         cdef string c_string = self.manager.GetGroupLabel(homeid, nodeid, groupidx)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_groupidx); if (unlikely((__pyx_t_3 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetGroupLabel(__pyx_t_1, __pyx_t_2, __pyx_t_3);

  /* "libopenzwave.pyx":2349
 *         '''
 *         cdef string c_string = self.manager.GetGroupLabel(homeid, nodeid, groupidx)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def addAssociation(self, homeid, nodeid, groupidx, targetnodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __pyx_r = ((PyObject *)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libopenzwave.PyManager.getGroupLabel");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2351
 *         return c_string.c_str()
 * 
 *     def addAssociation(self, homeid, nodeid, groupidx, targetnodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _addAssociation:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_90addAssociation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_90addAssociation[] = "\n.. _addAssociation:\n\nAdds a node to an association group.\n\nDue to the possibility of a device being asleep, the command is assumed to\nsuceeed, and the association data held in this class is updated directly.  This\nwill be reverted by a future Association message from the device if the Z-Wave\nmessage actually failed to get through.  Notification callbacks will be sent in\nboth cases.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node whose associations are to be changed.\n:type nodeId: int\n:param groupIdx: One-based index of the group (because Z-Wave product manuals use one-based group numbering).\n:type groupIdx: int\n:param targetNodeId: Identifier for the node that will be added to the association group.\n:type targetNodeId: int\n:see: getNumGroups, getAssociations, getMaxAssociations, removeAssociation\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_90addAssociation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_groupidx = 0;
  PyObject *__pyx_v_targetnodeid = 0;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  __pyx_t_6mylibc_uint8 __pyx_t_3;
  __pyx_t_6mylibc_uint8 __pyx_t_4;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__groupidx,&__pyx_n_s__targetnodeid,0};
  __Pyx_RefNannySetupContext("addAssociation");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("addAssociation", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2351; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__groupidx);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("addAssociation", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2351; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__targetnodeid);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("addAssociation", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2351; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "addAssociation") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2351; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_groupidx = values[2];
    __pyx_v_targetnodeid = values[3];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_groupidx = PyTuple_GET_ITEM(__pyx_args, 2);
    __pyx_v_targetnodeid = PyTuple_GET_ITEM(__pyx_args, 3);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addAssociation", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2351; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.addAssociation");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":2373
 * :see: getNumGroups, getAssociations, getMaxAssociations, removeAssociation
 *         '''
 *         self.manager.AddAssociation(homeid, nodeid, groupidx, targetnodeid)             # <<<<<<<<<<<<<<
 * 
 *     def removeAssociation(self, homeid, nodeid, groupidx, targetnodeid):
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_groupidx); if (unlikely((__pyx_t_3 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_targetnodeid); if (unlikely((__pyx_t_4 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->AddAssociation(__pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.addAssociation");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2375
 *         self.manager.AddAssociation(homeid, nodeid, groupidx, targetnodeid)
 * 
 *     def removeAssociation(self, homeid, nodeid, groupidx, targetnodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _removeAssociation:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_91removeAssociation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_91removeAssociation[] = "\n.. _removeAssociation:\n\nRemoves a node from an association group.\n\nDue to the possibility of a device being asleep, the command is assumed to\nsucceed, and the association data held in this class is updated directly.  This\nwill be reverted by a future Association message from the device if the Z-Wave\nmessage actually failed to get through.   Notification callbacks will be sent\nin both cases.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node whose associations are to be changed.\n:type nodeId: int\n:param groupIdx: One-based index of the group (because Z-Wave product manuals use one-based group numbering).\n:type groupIdx: int\n:param targetNodeId: Identifier for the node that will be removed from the association group.\n:type targetNodeId: int\n:see: getNumGroups, getAssociations, getMaxAssociations, addAssociation\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_91removeAssociation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_groupidx = 0;
  PyObject *__pyx_v_targetnodeid = 0;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __pyx_t_6mylibc_uint8 __pyx_t_2;
  __pyx_t_6mylibc_uint8 __pyx_t_3;
  __pyx_t_6mylibc_uint8 __pyx_t_4;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__homeid,&__pyx_n_s__nodeid,&__pyx_n_s__groupidx,&__pyx_n_s__targetnodeid,0};
  __Pyx_RefNannySetupContext("removeAssociation");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__homeid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__nodeid);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("removeAssociation", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2375; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__groupidx);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("removeAssociation", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2375; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__targetnodeid);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("removeAssociation", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2375; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "removeAssociation") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2375; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_groupidx = values[2];
    __pyx_v_targetnodeid = values[3];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_homeid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_nodeid = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_groupidx = PyTuple_GET_ITEM(__pyx_args, 2);
    __pyx_v_targetnodeid = PyTuple_GET_ITEM(__pyx_args, 3);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("removeAssociation", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2375; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.removeAssociation");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":2397
 * :see: getNumGroups, getAssociations, getMaxAssociations, addAssociation
 *         '''
 *         self.manager.AddAssociation(homeid, nodeid, groupidx, targetnodeid)             # <<<<<<<<<<<<<<
 * #
 * # -----------------------------------------------------------------------------
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_groupidx); if (unlikely((__pyx_t_3 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_targetnodeid); if (unlikely((__pyx_t_4 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->AddAssociation(__pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.removeAssociation");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2404
 * # For notification of changes to the Z-Wave network or device values and associations.
 * #
 *     def addWatcher(self, pythonfunc):             # <<<<<<<<<<<<<<
 *         '''
 * .. _addWatcher:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_92addWatcher(PyObject *__pyx_v_self, PyObject *__pyx_v_pythonfunc); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_92addWatcher[] = "\n.. _addWatcher:\n\nAdd a notification watcher.\n\nIn OpenZWave, all feedback from the Z-Wave network is sent to the application\nvia callbacks.  This method allows the application to add a notification\ncallback handler, known as a \"watcher\" to OpenZWave.  An application needs only\nadd a single watcher - all notifications will be reported to it.\n\n:param pythonfunc: Watcher pointer to a function that will be called by the notification system.\n:type pythonfunc: callback\n:see: removeWatcher_, notification_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_92addWatcher(PyObject *__pyx_v_self, PyObject *__pyx_v_pythonfunc) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("addWatcher");

  /* "libopenzwave.pyx":2419
 * :see: removeWatcher_, notification_
 *         '''
 *         self._watcherCallback = pythonfunc # need to keep a reference to this             # <<<<<<<<<<<<<<
 *         if not self.manager.AddWatcher(callback, <void*>pythonfunc):
 *             raise ValueError("call to AddWatcher failed")
 */
  __Pyx_INCREF(__pyx_v_pythonfunc);
  __Pyx_GIVEREF(__pyx_v_pythonfunc);
  __Pyx_GOTREF(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->_watcherCallback);
  __Pyx_DECREF(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->_watcherCallback);
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->_watcherCallback = __pyx_v_pythonfunc;

  /* "libopenzwave.pyx":2420
 *         '''
 *         self._watcherCallback = pythonfunc # need to keep a reference to this
 *         if not self.manager.AddWatcher(callback, <void*>pythonfunc):             # <<<<<<<<<<<<<<
 *             raise ValueError("call to AddWatcher failed")
 * #
 */
  __pyx_t_1 = (!((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->AddWatcher(__pyx_f_12libopenzwave_callback, ((void *)__pyx_v_pythonfunc)));
  if (__pyx_t_1) {

    /* "libopenzwave.pyx":2421
 *         self._watcherCallback = pythonfunc # need to keep a reference to this
 *         if not self.manager.AddWatcher(callback, <void*>pythonfunc):
 *             raise ValueError("call to AddWatcher failed")             # <<<<<<<<<<<<<<
 * #
 * # -----------------------------------------------------------------------------
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_16), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.addWatcher");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2428
 * # Commands for Z-Wave network management using the PC Controller.
 * #
 *     def resetController(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _resetController:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_93resetController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_93resetController[] = "\n.. _resetController:\n\nHard Reset a PC Z-Wave Controller.\n\nResets a controller and erases its network configuration settings.  The\ncontroller becomes a primary controller ready to add devices to a new network.\n\n:param homeId: The Home ID of the Z-Wave controller to be reset.\n:type homeId: int\n:see: softResetController_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_93resetController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __Pyx_RefNannySetupContext("resetController");

  /* "libopenzwave.pyx":2441
 * :see: softResetController_
 *         '''
 *         self.manager.ResetController(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def softResetController(self, homeid):
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->ResetController(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.resetController");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2443
 *         self.manager.ResetController(homeid)
 * 
 *     def softResetController(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _softResetController:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_94softResetController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_94softResetController[] = "\n.. _softResetController:\n\nSoft Reset a PC Z-Wave Controller.\n\nResets a controller without erasing its network configuration settings.\n\n:param homeId: The Home ID of the Z-Wave controller to be reset.\n:type homeId: int\n:see: resetController_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_94softResetController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  __Pyx_RefNannySetupContext("softResetController");

  /* "libopenzwave.pyx":2455
 * :see: resetController_
 *         '''
 *         self.manager.SoftReset(homeid)             # <<<<<<<<<<<<<<
 * 
 * #        #bool BeginControllerCommand(uint32 homeid, Driver::ControllerCommand _command, Driver::pfnControllerCallback_t _callback = NULL, void* _context = NULL, bool _highPower = false, uint8 _nodeId = 0xff )
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SoftReset(__pyx_t_1);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.softResetController");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2459
 * #        #bool BeginControllerCommand(uint32 homeid, Driver::ControllerCommand _command, Driver::pfnControllerCallback_t _callback = NULL, void* _context = NULL, bool _highPower = false, uint8 _nodeId = 0xff )
 * 
 *     def cancelControllerCommand(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _cancelControllerCommand:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_95cancelControllerCommand(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_95cancelControllerCommand[] = "\n.. _cancelControllerCommand:\n\nCancels any in-progress command running on a controller.\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:returns: bool -- True if a command was running and was cancelled.\n:see: beginControllerCommand_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_95cancelControllerCommand(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("cancelControllerCommand");

  /* "libopenzwave.pyx":2470
 * :see: beginControllerCommand_
 *         '''
 *         return self.manager.CancelControllerCommand(homeid)             # <<<<<<<<<<<<<<
 * 
 * #-----------------------------------------------------------------------------
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedInt(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->CancelControllerCommand(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.cancelControllerCommand");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2476
 * #-----------------------------------------------------------------------------
 * 
 *     def getNumScenes(self):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNumScenes:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_96getNumScenes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_96getNumScenes[] = "\n.. _getNumScenes:\n\nGets the number of scenes that have been defined\n\n:returns: int -- The number of scenes.\n:see: getAllScenes_, sceneExists_, createScene_, removeScene_, activateScene_, getSceneLabel_, setSceneLabel_ removeSceneValue_, addSceneValue_, setSceneValue_, sceneGetValues_, SceneGetValueAsBool_, sceneGetValueAsByte_, sceneGetValueAsFloat_, sceneGetValueAsInt_, sceneGetValueAsShort_, sceneGetValueAsString_\n       ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_96getNumScenes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getNumScenes");

  /* "libopenzwave.pyx":2491
 * sceneGetValueAsString_
 *        '''
 *         return self.manager.GetNumScenes()             # <<<<<<<<<<<<<<
 * 
 *     def getAllScenes(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNumScenes()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNumScenes");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2493
 *         return self.manager.GetNumScenes()
 * 
 *     def getAllScenes(self):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getAllScenes:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_97getAllScenes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_97getAllScenes[] = "\n.. _getAllScenes:\n\nGets a list of all the SceneIds\n\n:returns: list() -- A list() containing neighboring scene IDs\n:see: getNumScenes_, sceneExists_, createScene_, removeScene_, activateScene_, getSceneLabel_, setSceneLabel_ removeSceneValue_, addSceneValue_, setSceneValue_, sceneGetValues_, SceneGetValueAsBool_, sceneGetValueAsByte_, sceneGetValueAsFloat_, sceneGetValueAsInt_, sceneGetValueAsShort_, sceneGetValueAsString_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_97getAllScenes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_v_retval;
  __pyx_t_6mylibc_uint32 __pyx_v_size;
  __pyx_t_6mylibc_uint8 **__pyx_v_dbuf;
  __pyx_t_6mylibc_uint32 __pyx_v_count;
  __pyx_t_6mylibc_uint8 *__pyx_v_retuint8;
  __pyx_t_6mylibc_uint8 *__pyx_v_p;
  __pyx_t_6mylibc_uint32 __pyx_v_start;
  PyObject *__pyx_v_data;
  __pyx_t_6mylibc_uint32 __pyx_v_i;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __pyx_t_6mylibc_uint32 __pyx_t_2;
  __pyx_t_6mylibc_uint32 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("getAllScenes");
  __pyx_v_retval = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_data = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);

  /* "libopenzwave.pyx":2508
 * sceneGetValueAsString_
 *         '''
 *         retval = None             # <<<<<<<<<<<<<<
 *         cdef uint32 size = self.manager.GetNumScenes()
 *         # Allocate memory
 */
  __Pyx_INCREF(Py_None);
  __Pyx_DECREF(__pyx_v_retval);
  __pyx_v_retval = Py_None;

  /* "libopenzwave.pyx":2509
 *         '''
 *         retval = None
 *         cdef uint32 size = self.manager.GetNumScenes()             # <<<<<<<<<<<<<<
 *         # Allocate memory
 *         cdef uint8** dbuf = <uint8**>malloc(sizeof(uint8)*size)
 */
  __pyx_v_size = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetNumScenes();

  /* "libopenzwave.pyx":2511
 *         cdef uint32 size = self.manager.GetNumScenes()
 *         # Allocate memory
 *         cdef uint8** dbuf = <uint8**>malloc(sizeof(uint8)*size)             # <<<<<<<<<<<<<<
 *         # return value is pointer to uint8[]
 *         cdef uint32 count = self.manager.GetAllScenes(dbuf)
 */
  __pyx_v_dbuf = ((__pyx_t_6mylibc_uint8 **)malloc(((sizeof(__pyx_t_6mylibc_uint8)) * __pyx_v_size)));

  /* "libopenzwave.pyx":2513
 *         cdef uint8** dbuf = <uint8**>malloc(sizeof(uint8)*size)
 *         # return value is pointer to uint8[]
 *         cdef uint32 count = self.manager.GetAllScenes(dbuf)             # <<<<<<<<<<<<<<
 *         cdef uint8* retuint8 = <uint8*>malloc(sizeof(uint8)*count)
 *         cdef uint8* p
 */
  __pyx_v_count = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetAllScenes(__pyx_v_dbuf);

  /* "libopenzwave.pyx":2514
 *         # return value is pointer to uint8[]
 *         cdef uint32 count = self.manager.GetAllScenes(dbuf)
 *         cdef uint8* retuint8 = <uint8*>malloc(sizeof(uint8)*count)             # <<<<<<<<<<<<<<
 *         cdef uint8* p
 *         cdef uint32 start = 0
 */
  __pyx_v_retuint8 = ((__pyx_t_6mylibc_uint8 *)malloc(((sizeof(__pyx_t_6mylibc_uint8)) * __pyx_v_count)));

  /* "libopenzwave.pyx":2516
 *         cdef uint8* retuint8 = <uint8*>malloc(sizeof(uint8)*count)
 *         cdef uint8* p
 *         cdef uint32 start = 0             # <<<<<<<<<<<<<<
 *         if count:
 *             try:
 */
  __pyx_v_start = 0;

  /* "libopenzwave.pyx":2517
 *         cdef uint8* p
 *         cdef uint32 start = 0
 *         if count:             # <<<<<<<<<<<<<<
 *             try:
 *                 data = list()
 */
  if (__pyx_v_count) {

    /* "libopenzwave.pyx":2518
 *         cdef uint32 start = 0
 *         if count:
 *             try:             # <<<<<<<<<<<<<<
 *                 data = list()
 *                 p = dbuf[0] # p is now pointing at first element of array
 */
    /*try:*/ {

      /* "libopenzwave.pyx":2519
 *         if count:
 *             try:
 *                 data = list()             # <<<<<<<<<<<<<<
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(start, count):
 */
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2519; __pyx_clineno = __LINE__; goto __pyx_L7;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
      __Pyx_DECREF(((PyObject *)__pyx_v_data));
      __pyx_v_data = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "libopenzwave.pyx":2520
 *             try:
 *                 data = list()
 *                 p = dbuf[0] # p is now pointing at first element of array             # <<<<<<<<<<<<<<
 *                 for i in range(start, count):
 *                     retuint8[i] = p[0]
 */
      __pyx_v_p = (__pyx_v_dbuf[0]);

      /* "libopenzwave.pyx":2521
 *                 data = list()
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(start, count):             # <<<<<<<<<<<<<<
 *                     retuint8[i] = p[0]
 *                     data.add(retuint8[i])
 */
      __pyx_t_2 = __pyx_v_count;
      for (__pyx_t_3 = __pyx_v_start; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
        __pyx_v_i = __pyx_t_3;

        /* "libopenzwave.pyx":2522
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(start, count):
 *                     retuint8[i] = p[0]             # <<<<<<<<<<<<<<
 *                     data.add(retuint8[i])
 *                     p += 1
 */
        (__pyx_v_retuint8[__pyx_v_i]) = (__pyx_v_p[0]);

        /* "libopenzwave.pyx":2523
 *                 for i in range(start, count):
 *                     retuint8[i] = p[0]
 *                     data.add(retuint8[i])             # <<<<<<<<<<<<<<
 *                     p += 1
 *                 retval = data
 */
        __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_data), __pyx_n_s__add); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2523; __pyx_clineno = __LINE__; goto __pyx_L7;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_4 = PyInt_FromLong((__pyx_v_retuint8[__pyx_v_i])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2523; __pyx_clineno = __LINE__; goto __pyx_L7;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2523; __pyx_clineno = __LINE__; goto __pyx_L7;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_5));
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2523; __pyx_clineno = __LINE__; goto __pyx_L7;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "libopenzwave.pyx":2524
 *                     retuint8[i] = p[0]
 *                     data.add(retuint8[i])
 *                     p += 1             # <<<<<<<<<<<<<<
 *                 retval = data
 *             finally:
 */
        __pyx_v_p = (__pyx_v_p + 1);
      }

      /* "libopenzwave.pyx":2525
 *                     data.add(retuint8[i])
 *                     p += 1
 *                 retval = data             # <<<<<<<<<<<<<<
 *             finally:
 *                 # Free memory
 */
      __Pyx_INCREF(((PyObject *)__pyx_v_data));
      __Pyx_DECREF(__pyx_v_retval);
      __pyx_v_retval = ((PyObject *)__pyx_v_data);
    }

    /* "libopenzwave.pyx":2528
 *             finally:
 *                 # Free memory
 *                 free(dbuf)             # <<<<<<<<<<<<<<
 *                 pass
 *         return retval
 */
    /*finally:*/ {
      int __pyx_why;
      PyObject *__pyx_exc_type, *__pyx_exc_value, *__pyx_exc_tb;
      int __pyx_exc_lineno;
      __pyx_exc_type = 0; __pyx_exc_value = 0; __pyx_exc_tb = 0; __pyx_exc_lineno = 0;
      __pyx_why = 0; goto __pyx_L8;
      __pyx_L7: {
        __pyx_why = 4;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_ErrFetch(&__pyx_exc_type, &__pyx_exc_value, &__pyx_exc_tb);
        __pyx_exc_lineno = __pyx_lineno;
        goto __pyx_L8;
      }
      __pyx_L8:;
      free(__pyx_v_dbuf);
      switch (__pyx_why) {
        case 4: {
          __Pyx_ErrRestore(__pyx_exc_type, __pyx_exc_value, __pyx_exc_tb);
          __pyx_lineno = __pyx_exc_lineno;
          __pyx_exc_type = 0;
          __pyx_exc_value = 0;
          __pyx_exc_tb = 0;
          goto __pyx_L1_error;
        }
      }
    }
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "libopenzwave.pyx":2530
 *                 free(dbuf)
 *                 pass
 *         return retval             # <<<<<<<<<<<<<<
 * 
 *     def createScene(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_retval);
  __pyx_r = __pyx_v_retval;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("libopenzwave.PyManager.getAllScenes");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_retval);
  __Pyx_DECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2532
 *         return retval
 * 
 *     def createScene(self):             # <<<<<<<<<<<<<<
 *         '''
 * .. _createScene:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_98createScene(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_98createScene[] = "\n.. _createScene:\n\nCreate a new Scene passing in Scene ID\n\n:returns: int -- Scene ID used to reference the scene. 0 is failure result.\n:see: getNumScenes_, getAllScenes_, sceneExists_, removeScene_, activateScene_, getSceneLabel_, setSceneLabel_ removeSceneValue_, addSceneValue_, setSceneValue_, sceneGetValues_, SceneGetValueAsBool_, sceneGetValueAsByte_, sceneGetValueAsFloat_, sceneGetValueAsInt_, sceneGetValueAsShort_, sceneGetValueAsString_\n       ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_98createScene(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("createScene");

  /* "libopenzwave.pyx":2547
 * sceneGetValueAsString_
 *        '''
 *         return self.manager.CreateScene()             # <<<<<<<<<<<<<<
 * 
 *     def removeScene(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->CreateScene()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2547; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.createScene");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2549
 *         return self.manager.CreateScene()
 * 
 *     def removeScene(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _removeScene:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_99removeScene(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_99removeScene[] = "\n.. _removeScene:\n\nRemove an existing Scene.\n\n:param sceneId: The unique Scene ID to be removed.\n:type sceneId: int\n:returns: bool -- True if scene was removed.\n:see: getNumScenes_, getAllScenes_, sceneExists_, createScene_, activateScene_, getSceneLabel_, setSceneLabel_ removeSceneValue_, addSceneValue_, setSceneValue_, sceneGetValues_, SceneGetValueAsBool_, sceneGetValueAsByte_, sceneGetValueAsFloat_, sceneGetValueAsInt_, sceneGetValueAsShort_, sceneGetValueAsString_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_99removeScene(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint8 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("removeScene");

  /* "libopenzwave.pyx":2566
 * sceneGetValueAsString_
 *         '''
 *         return self.manager.RemoveScene(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def addSceneValue(self, uint8 sceneid, id, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->RemoveScene(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.removeScene");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2568
 *         return self.manager.RemoveScene(homeid)
 * 
 *     def addSceneValue(self, uint8 sceneid, id, value):             # <<<<<<<<<<<<<<
 *         '''
 * .. _addSceneValue:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_100addSceneValue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_100addSceneValue[] = "\n.. _addSceneValue:\n\nAdd a ValueID of value to an existing scene.\n\nActually I don't know how to use it :)\n\n:param sceneId: The ID of a scene.\n:type id: int\n:param valueId: The ID of a value.\n:type valueId: int\n:param value: The value to set\n:type value: bool, int, float, string\n:returns: int -- An integer representing the result of the operation\n    0 : The C method fails\n    1 : The C method succeed\n    2 : Can't find id in the map\n:see: getNumScenes_, getAllScenes_, sceneExists_, createScene_, removeScene_, activateScene_, getSceneLabel_, setSceneLabel_ removeSceneValue_, setSceneValue_, sceneGetValues_, SceneGetValueAsBool_, sceneGetValueAsByte_, sceneGetValueAsFloat_, sceneGetValueAsInt_, sceneGetValueAsShort_, sceneGetValueAsString_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_100addSceneValue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_6mylibc_uint8 __pyx_v_sceneid;
  PyObject *__pyx_v_id = 0;
  PyObject *__pyx_v_value = 0;
  float __pyx_v_type_float;
  bool __pyx_v_type_bool;
  __pyx_t_6mylibc_uint8 __pyx_v_type_byte;
  __pyx_t_6mylibc_int32 __pyx_v_type_int;
  __pyx_t_6mylibc_int16 __pyx_v_type_short;
  std::string __pyx_v_type_string;
  long __pyx_v_ret;
  PyObject *__pyx_v_datatype;
  bool __pyx_v_cret;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  bool __pyx_t_6;
  long __pyx_t_7;
  __pyx_t_6mylibc_uint8 __pyx_t_8;
  float __pyx_t_9;
  __pyx_t_6mylibc_int32 __pyx_t_10;
  __pyx_t_6mylibc_int16 __pyx_t_11;
  char *__pyx_t_12;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__sceneid,&__pyx_n_s__id,&__pyx_n_s__value,0};
  __Pyx_RefNannySetupContext("addSceneValue");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sceneid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__id);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("addSceneValue", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2568; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("addSceneValue", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2568; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "addSceneValue") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2568; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_sceneid = __Pyx_PyInt_AsUnsignedChar(values[0]); if (unlikely((__pyx_v_sceneid == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2568; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_id = values[1];
    __pyx_v_value = values[2];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_sceneid = __Pyx_PyInt_AsUnsignedChar(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_sceneid == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2568; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_id = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_value = PyTuple_GET_ITEM(__pyx_args, 2);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addSceneValue", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2568; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.addSceneValue");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_datatype = Py_None; __Pyx_INCREF(Py_None);

  /* "libopenzwave.pyx":2600
 *         cdef int16 type_short
 *         cdef string type_string
 *         ret = 2             # <<<<<<<<<<<<<<
 *         if values_map.find(id) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 */
  __pyx_v_ret = 2;

  /* "libopenzwave.pyx":2601
 *         cdef string type_string
 *         ret = 2
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 *             if datatype == "Bool":
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2602
 *         ret = 2
 *         if values_map.find(id) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(id).GetType()]             # <<<<<<<<<<<<<<
 *             if datatype == "Bool":
 *                 type_bool = value
 */
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__PyValueTypes); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2602; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2602; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = PyInt_FromLong(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1).GetType()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2602; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_GetItem(__pyx_t_3, __pyx_t_4); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2602; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_v_datatype);
    __pyx_v_datatype = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "libopenzwave.pyx":2603
 *         if values_map.find(id) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 *             if datatype == "Bool":             # <<<<<<<<<<<<<<
 *                 type_bool = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_bool)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Bool), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2603; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2603; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":2604
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 *             if datatype == "Bool":
 *                 type_bool = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_6 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2604; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_bool = __pyx_t_6;

      /* "libopenzwave.pyx":2605
 *             if datatype == "Bool":
 *                 type_bool = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_bool)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Byte":
 */
      __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2605; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->AddSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_bool);

      /* "libopenzwave.pyx":2606
 *                 type_bool = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Byte":
 *                 type_byte = value
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "libopenzwave.pyx":2607
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Byte":             # <<<<<<<<<<<<<<
 *                 type_byte = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_byte)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Byte), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":2608
 *                 ret = 1 if cret else 0
 *             elif datatype == "Byte":
 *                 type_byte = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_byte)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_8 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_value); if (unlikely((__pyx_t_8 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_byte = __pyx_t_8;

      /* "libopenzwave.pyx":2609
 *             elif datatype == "Byte":
 *                 type_byte = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_byte)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Decimal":
 */
      __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->AddSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_byte);

      /* "libopenzwave.pyx":2610
 *                 type_byte = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_byte)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Decimal":
 *                 type_float = value
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "libopenzwave.pyx":2611
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_byte)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Decimal":             # <<<<<<<<<<<<<<
 *                 type_float = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_float)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Decimal), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":2612
 *                 ret = 1 if cret else 0
 *             elif datatype == "Decimal":
 *                 type_float = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_float)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_float = __pyx_t_9;

      /* "libopenzwave.pyx":2613
 *             elif datatype == "Decimal":
 *                 type_float = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_float)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Int":
 */
      __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->AddSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_float);

      /* "libopenzwave.pyx":2614
 *                 type_float = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_float)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Int":
 *                 type_int = value
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "libopenzwave.pyx":2615
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_float)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Int":             # <<<<<<<<<<<<<<
 *                 type_int = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_int)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Int), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":2616
 *                 ret = 1 if cret else 0
 *             elif datatype == "Int":
 *                 type_int = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_int)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_10 = __Pyx_PyInt_AsInt(__pyx_v_value); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_int = __pyx_t_10;

      /* "libopenzwave.pyx":2617
 *             elif datatype == "Int":
 *                 type_int = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_int)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Short":
 */
      __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->AddSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_int);

      /* "libopenzwave.pyx":2618
 *                 type_int = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_int)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Short":
 *                 type_short = value
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "libopenzwave.pyx":2619
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_int)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Short":             # <<<<<<<<<<<<<<
 *                 type_short = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_short)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Short), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2619; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2619; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":2620
 *                 ret = 1 if cret else 0
 *             elif datatype == "Short":
 *                 type_short = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_short)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_11 = __Pyx_PyInt_AsShort(__pyx_v_value); if (unlikely((__pyx_t_11 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2620; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_short = __pyx_t_11;

      /* "libopenzwave.pyx":2621
 *             elif datatype == "Short":
 *                 type_short = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_short)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "String":
 */
      __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2621; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->AddSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_short);

      /* "libopenzwave.pyx":2622
 *                 type_short = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_short)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "String":
 *                 type_string = string(value)
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "libopenzwave.pyx":2623
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_short)
 *                 ret = 1 if cret else 0
 *             elif datatype == "String":             # <<<<<<<<<<<<<<
 *                 type_string = string(value)
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_string)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__String), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2623; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2623; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":2624
 *                 ret = 1 if cret else 0
 *             elif datatype == "String":
 *                 type_string = string(value)             # <<<<<<<<<<<<<<
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_string)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_12 = PyBytes_AsString(__pyx_v_value); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2624; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_string = std::string(__pyx_t_12);

      /* "libopenzwave.pyx":2625
 *             elif datatype == "String":
 *                 type_string = string(value)
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_string)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *         return ret
 */
      __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->AddSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_string);

      /* "libopenzwave.pyx":2626
 *                 type_string = string(value)
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_string)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }
    __pyx_L7:;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "libopenzwave.pyx":2627
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_string)
 *                 ret = 1 if cret else 0
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def setSceneValue(self, uint8 sceneid, id, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = PyInt_FromLong(__pyx_v_ret); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("libopenzwave.PyManager.addSceneValue");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_datatype);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2629
 *         return ret
 * 
 *     def setSceneValue(self, uint8 sceneid, id, value):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setSceneValue:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_101setSceneValue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_101setSceneValue[] = "\n.. _setSceneValue:\n\nSet a value to an existing scene's ValueID.\n\n:param sceneId: The ID of a scene.\n:type id: int\n:param valueId: The ID of a value.\n:type valueId: int\n:param value: The value to set\n:type value: bool, int, float, string\n:returns: int -- An integer representing the result of the operation\n    0 : The C method fails\n    1 : The C method succeed\n    2 : Can't find id in the map\n:see: getNumScenes_, getAllScenes_, sceneExists_, createScene_, removeScene_, activateScene_, getSceneLabel_, setSceneLabel_ removeSceneValue_, addSceneValue_, sceneGetValues_, SceneGetValueAsBool_, sceneGetValueAsByte_, sceneGetValueAsFloat_, sceneGetValueAsInt_, sceneGetValueAsShort_, sceneGetValueAsString_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_101setSceneValue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_6mylibc_uint8 __pyx_v_sceneid;
  PyObject *__pyx_v_id = 0;
  PyObject *__pyx_v_value = 0;
  float __pyx_v_type_float;
  bool __pyx_v_type_bool;
  __pyx_t_6mylibc_uint8 __pyx_v_type_byte;
  __pyx_t_6mylibc_int32 __pyx_v_type_int;
  __pyx_t_6mylibc_int16 __pyx_v_type_short;
  std::string __pyx_v_type_string;
  long __pyx_v_ret;
  PyObject *__pyx_v_datatype;
  bool __pyx_v_cret;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint64 __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  bool __pyx_t_6;
  long __pyx_t_7;
  __pyx_t_6mylibc_uint8 __pyx_t_8;
  float __pyx_t_9;
  __pyx_t_6mylibc_int32 __pyx_t_10;
  __pyx_t_6mylibc_int16 __pyx_t_11;
  char *__pyx_t_12;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__sceneid,&__pyx_n_s__id,&__pyx_n_s__value,0};
  __Pyx_RefNannySetupContext("setSceneValue");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sceneid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__id);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setSceneValue", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2629; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setSceneValue", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2629; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setSceneValue") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2629; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_sceneid = __Pyx_PyInt_AsUnsignedChar(values[0]); if (unlikely((__pyx_v_sceneid == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2629; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_id = values[1];
    __pyx_v_value = values[2];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_sceneid = __Pyx_PyInt_AsUnsignedChar(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_sceneid == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2629; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_id = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_value = PyTuple_GET_ITEM(__pyx_args, 2);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setSceneValue", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2629; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setSceneValue");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_datatype = Py_None; __Pyx_INCREF(Py_None);

  /* "libopenzwave.pyx":2659
 *         cdef int16 type_short
 *         cdef string type_string
 *         ret = 2             # <<<<<<<<<<<<<<
 *         if values_map.find(id) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 */
  __pyx_v_ret = 2;

  /* "libopenzwave.pyx":2660
 *         cdef string type_string
 *         ret = 2
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 *             if datatype == "Bool":
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2660; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end());
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2661
 *         ret = 2
 *         if values_map.find(id) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(id).GetType()]             # <<<<<<<<<<<<<<
 *             if datatype == "Bool":
 *                 type_bool = value
 */
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__PyValueTypes); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = PyInt_FromLong(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1).GetType()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_GetItem(__pyx_t_3, __pyx_t_4); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_v_datatype);
    __pyx_v_datatype = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "libopenzwave.pyx":2662
 *         if values_map.find(id) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 *             if datatype == "Bool":             # <<<<<<<<<<<<<<
 *                 type_bool = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_bool)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Bool), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":2663
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 *             if datatype == "Bool":
 *                 type_bool = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_6 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_bool = __pyx_t_6;

      /* "libopenzwave.pyx":2664
 *             if datatype == "Bool":
 *                 type_bool = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_bool)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Byte":
 */
      __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_bool);

      /* "libopenzwave.pyx":2665
 *                 type_bool = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Byte":
 *                 type_byte = value
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "libopenzwave.pyx":2666
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Byte":             # <<<<<<<<<<<<<<
 *                 type_byte = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_byte)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Byte), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":2667
 *                 ret = 1 if cret else 0
 *             elif datatype == "Byte":
 *                 type_byte = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_byte)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_8 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_value); if (unlikely((__pyx_t_8 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_byte = __pyx_t_8;

      /* "libopenzwave.pyx":2668
 *             elif datatype == "Byte":
 *                 type_byte = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_byte)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Decimal":
 */
      __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2668; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_byte);

      /* "libopenzwave.pyx":2669
 *                 type_byte = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_byte)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Decimal":
 *                 type_float = value
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "libopenzwave.pyx":2670
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_byte)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Decimal":             # <<<<<<<<<<<<<<
 *                 type_float = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_float)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Decimal), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":2671
 *                 ret = 1 if cret else 0
 *             elif datatype == "Decimal":
 *                 type_float = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_float)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_float = __pyx_t_9;

      /* "libopenzwave.pyx":2672
 *             elif datatype == "Decimal":
 *                 type_float = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_float)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Int":
 */
      __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2672; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_float);

      /* "libopenzwave.pyx":2673
 *                 type_float = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_float)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Int":
 *                 type_int = value
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "libopenzwave.pyx":2674
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_float)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Int":             # <<<<<<<<<<<<<<
 *                 type_int = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_int)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Int), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2674; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2674; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":2675
 *                 ret = 1 if cret else 0
 *             elif datatype == "Int":
 *                 type_int = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_int)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_10 = __Pyx_PyInt_AsInt(__pyx_v_value); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_int = __pyx_t_10;

      /* "libopenzwave.pyx":2676
 *             elif datatype == "Int":
 *                 type_int = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_int)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Short":
 */
      __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_int);

      /* "libopenzwave.pyx":2677
 *                 type_int = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_int)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Short":
 *                 type_short = value
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "libopenzwave.pyx":2678
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_int)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Short":             # <<<<<<<<<<<<<<
 *                 type_short = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_short)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__Short), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":2679
 *                 ret = 1 if cret else 0
 *             elif datatype == "Short":
 *                 type_short = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_short)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_11 = __Pyx_PyInt_AsShort(__pyx_v_value); if (unlikely((__pyx_t_11 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_short = __pyx_t_11;

      /* "libopenzwave.pyx":2680
 *             elif datatype == "Short":
 *                 type_short = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_short)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "String":
 */
      __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_short);

      /* "libopenzwave.pyx":2681
 *                 type_short = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_short)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "String":
 *                 type_string = string(value)
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }

    /* "libopenzwave.pyx":2682
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_short)
 *                 ret = 1 if cret else 0
 *             elif datatype == "String":             # <<<<<<<<<<<<<<
 *                 type_string = string(value)
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_string)
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_datatype, ((PyObject *)__pyx_n_s__String), Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2682; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2682; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":2683
 *                 ret = 1 if cret else 0
 *             elif datatype == "String":
 *                 type_string = string(value)             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_string)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_12 = PyBytes_AsString(__pyx_v_value); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_string = std::string(__pyx_t_12);

      /* "libopenzwave.pyx":2684
 *             elif datatype == "String":
 *                 type_string = string(value)
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_string)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *         return ret
 */
      __pyx_t_1 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_string);

      /* "libopenzwave.pyx":2685
 *                 type_string = string(value)
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_string)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
      if (__pyx_v_cret) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L7;
    }
    __pyx_L7:;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "libopenzwave.pyx":2686
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_string)
 *                 ret = 1 if cret else 0
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def getSceneLabel(self, sceneid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = PyInt_FromLong(__pyx_v_ret); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("libopenzwave.PyManager.setSceneValue");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_datatype);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2688
 *         return ret
 * 
 *     def getSceneLabel(self, sceneid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getSceneLabel:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_102getSceneLabel(PyObject *__pyx_v_self, PyObject *__pyx_v_sceneid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_102getSceneLabel[] = "\n.. _getSceneLabel:\n\nReturns a label for the particular scene.\n\n:param sceneId: The ID of a scene.\n:type sceneId: int\n:param value: The value to set\n:type value: int\n:returns: str -- The label string.\n:see: getNumScenes_, getAllScenes_, sceneExists_, createScene_, removeScene_, activateScene_, setSceneLabel_ removeSceneValue_, addSceneValue_, setSceneValue_, sceneGetValues_, SceneGetValueAsBool_, sceneGetValueAsByte_, sceneGetValueAsFloat_, sceneGetValueAsInt_, sceneGetValueAsShort_, sceneGetValueAsString_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_102getSceneLabel(PyObject *__pyx_v_self, PyObject *__pyx_v_sceneid) {
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint8 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getSceneLabel");

  /* "libopenzwave.pyx":2707
 * sceneGetValueAsString_
 *         '''
 *         cdef string c_string = self.manager.GetSceneLabel(sceneid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_sceneid); if (unlikely((__pyx_t_1 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->GetSceneLabel(__pyx_t_1);

  /* "libopenzwave.pyx":2708
 *         '''
 *         cdef string c_string = self.manager.GetSceneLabel(sceneid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def setSceneLabel(self, sceneid, char *label):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2708; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.getSceneLabel");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2710
 *         return c_string.c_str()
 * 
 *     def setSceneLabel(self, sceneid, char *label):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setSceneLabel:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_103setSceneLabel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_103setSceneLabel[] = "\n.. _setSceneLabel:\n\nSets a label for the particular scene.\n\n:param sceneId: The ID of the scene.\n:type sceneId: int\n:param value: The new value of the label.\n:type value: int\n:see: getNumScenes_, getAllScenes_, sceneExists_, createScene_, removeScene_, activateScene_, getSceneLabel_ removeSceneValue_, addSceneValue_, setSceneValue_, sceneGetValues_, SceneGetValueAsBool_, sceneGetValueAsByte_, sceneGetValueAsFloat_, sceneGetValueAsInt_, sceneGetValueAsShort_, sceneGetValueAsString_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_103setSceneLabel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_sceneid = 0;
  char *__pyx_v_label;
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint8 __pyx_t_1;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__sceneid,&__pyx_n_s__label,0};
  __Pyx_RefNannySetupContext("setSceneLabel");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sceneid);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__label);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("setSceneLabel", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2710; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "setSceneLabel") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2710; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_sceneid = values[0];
    __pyx_v_label = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_label) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2710; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_sceneid = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_label = PyBytes_AsString(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((!__pyx_v_label) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2710; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setSceneLabel", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2710; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setSceneLabel");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "libopenzwave.pyx":2728
 * sceneGetValueAsString_
 *         '''
 *         self.manager.SetSceneLabel(sceneid, string(label))             # <<<<<<<<<<<<<<
 * 
 *     def sceneExists(self, sceneid):
 */
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_sceneid); if (unlikely((__pyx_t_1 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2728; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SetSceneLabel(__pyx_t_1, std::string(__pyx_v_label));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setSceneLabel");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2730
 *         self.manager.SetSceneLabel(sceneid, string(label))
 * 
 *     def sceneExists(self, sceneid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _sceneExists:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_104sceneExists(PyObject *__pyx_v_self, PyObject *__pyx_v_sceneid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_104sceneExists[] = "\n.. _sceneExists:\n\nCheck if a Scene ID is defined.\n\n:param sceneId: The ID of the scene to check.\n:type sceneId: int\n:returns: bool -- True if Scene ID exists.\n:see: getNumScenes_, getAllScenes_, createScene_, removeScene_, activateScene_, getSceneLabel_, setSceneLabel_ removeSceneValue_, addSceneValue_, setSceneValue_, sceneGetValues_, SceneGetValueAsBool_, sceneGetValueAsByte_, sceneGetValueAsFloat_, sceneGetValueAsInt_, sceneGetValueAsShort_, sceneGetValueAsString_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_104sceneExists(PyObject *__pyx_v_self, PyObject *__pyx_v_sceneid) {
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint8 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("sceneExists");

  /* "libopenzwave.pyx":2747
 * sceneGetValueAsString_
 *         '''
 *         return self.manager.SceneExists(sceneid)             # <<<<<<<<<<<<<<
 * 
 *     def activateScene(self, sceneid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_sceneid); if (unlikely((__pyx_t_1 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->SceneExists(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.sceneExists");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2749
 *         return self.manager.SceneExists(sceneid)
 * 
 *     def activateScene(self, sceneid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _activateScene:
 */

static PyObject *__pyx_pf_12libopenzwave_9PyManager_105activateScene(PyObject *__pyx_v_self, PyObject *__pyx_v_sceneid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_105activateScene[] = "\n.. _activateScene:\n\nActivate given scene to perform all its actions.\n\n:param sceneId: The ID of the scene to activate.\n:type sceneId: int\n:returns: bool -- True if it is successful.\n:see: getNumScenes_, getAllScenes_, sceneExists_, createScene_, removeScene_, getSceneLabel_, setSceneLabel_ removeSceneValue_, addSceneValue_, setSceneValue_, sceneGetValues_, SceneGetValueAsBool_, sceneGetValueAsByte_, sceneGetValueAsFloat_, sceneGetValueAsInt_, sceneGetValueAsShort_, sceneGetValueAsString_\n        ";
static PyObject *__pyx_pf_12libopenzwave_9PyManager_105activateScene(PyObject *__pyx_v_self, PyObject *__pyx_v_sceneid) {
  PyObject *__pyx_r = NULL;
  __pyx_t_6mylibc_uint8 __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("activateScene");

  /* "libopenzwave.pyx":2766
 * sceneGetValueAsString_
 *         '''
 *         return self.manager.ActivateScene(sceneid)             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AsUnsignedChar(__pyx_v_sceneid); if (unlikely((__pyx_t_1 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self)->manager->ActivateScene(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.activateScene");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_12libopenzwave_PyOptions(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_12libopenzwave_PyOptions(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_12libopenzwave_PyOptions[] = {
  {__Pyx_NAMESTR("create"), (PyCFunction)__pyx_pf_12libopenzwave_9PyOptions_create, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("lock"), (PyCFunction)__pyx_pf_12libopenzwave_9PyOptions_1lock, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_PyOptions = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_PyOptions = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_PyOptions = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_PyOptions = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_12libopenzwave_PyOptions = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("libopenzwave.PyOptions"), /*tp_name*/
  sizeof(struct __pyx_obj_12libopenzwave_PyOptions), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_12libopenzwave_PyOptions, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_PyOptions, /*tp_as_number*/
  &__pyx_tp_as_sequence_PyOptions, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_PyOptions, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_PyOptions, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_12libopenzwave_PyOptions, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_12libopenzwave_PyOptions, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_12libopenzwave_PyManager(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_12libopenzwave_PyManager *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_12libopenzwave_PyManager *)o);
  p->_watcherCallback = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_12libopenzwave_PyManager(PyObject *o) {
  struct __pyx_obj_12libopenzwave_PyManager *p = (struct __pyx_obj_12libopenzwave_PyManager *)o;
  Py_XDECREF(p->_watcherCallback);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_12libopenzwave_PyManager(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_12libopenzwave_PyManager *p = (struct __pyx_obj_12libopenzwave_PyManager *)o;
  if (p->_watcherCallback) {
    e = (*v)(p->_watcherCallback, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_12libopenzwave_PyManager(PyObject *o) {
  struct __pyx_obj_12libopenzwave_PyManager *p = (struct __pyx_obj_12libopenzwave_PyManager *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->_watcherCallback);
  p->_watcherCallback = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_12libopenzwave_PyManager[] = {
  {__Pyx_NAMESTR("create"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_create, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_create)},
  {__Pyx_NAMESTR("writeConfig"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_1writeConfig, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_1writeConfig)},
  {__Pyx_NAMESTR("addDriver"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_2addDriver, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_2addDriver)},
  {__Pyx_NAMESTR("removeDriver"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_3removeDriver, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_3removeDriver)},
  {__Pyx_NAMESTR("getControllerNodeId"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_4getControllerNodeId, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_4getControllerNodeId)},
  {__Pyx_NAMESTR("isPrimaryController"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_5isPrimaryController, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_5isPrimaryController)},
  {__Pyx_NAMESTR("isStaticUpdateController"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_6isStaticUpdateController, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_6isStaticUpdateController)},
  {__Pyx_NAMESTR("isBridgeController"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_7isBridgeController, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_7isBridgeController)},
  {__Pyx_NAMESTR("getLibraryVersion"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_8getLibraryVersion, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_8getLibraryVersion)},
  {__Pyx_NAMESTR("getLibraryConfigPath"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_9getLibraryConfigPath, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_9getLibraryConfigPath)},
  {__Pyx_NAMESTR("getPythonLibraryVersion"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_10getPythonLibraryVersion, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_10getPythonLibraryVersion)},
  {__Pyx_NAMESTR("getLibraryTypeName"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_11getLibraryTypeName, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_11getLibraryTypeName)},
  {__Pyx_NAMESTR("getSendQueueCount"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_12getSendQueueCount, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_12getSendQueueCount)},
  {__Pyx_NAMESTR("logDriverStatistics"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_13logDriverStatistics, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_13logDriverStatistics)},
  {__Pyx_NAMESTR("getDriverStatistics"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_14getDriverStatistics, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_14getDriverStatistics)},
  {__Pyx_NAMESTR("getPollInterval"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_15getPollInterval, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_15getPollInterval)},
  {__Pyx_NAMESTR("setPollInterval"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_16setPollInterval, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_16setPollInterval)},
  {__Pyx_NAMESTR("enablePoll"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_17enablePoll, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_17enablePoll)},
  {__Pyx_NAMESTR("disablePoll"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_18disablePoll, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_18disablePoll)},
  {__Pyx_NAMESTR("isPolled"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_19isPolled, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_19isPolled)},
  {__Pyx_NAMESTR("setPollIntensity"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_20setPollIntensity, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_20setPollIntensity)},
  {__Pyx_NAMESTR("requestNodeDynamic"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_21requestNodeDynamic, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_21requestNodeDynamic)},
  {__Pyx_NAMESTR("refreshNodeInfo"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_22refreshNodeInfo, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_22refreshNodeInfo)},
  {__Pyx_NAMESTR("requestNodeState"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_23requestNodeState, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_23requestNodeState)},
  {__Pyx_NAMESTR("isNodeBeamingDevice"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_24isNodeBeamingDevice, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_24isNodeBeamingDevice)},
  {__Pyx_NAMESTR("isNodeListeningDevice"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_25isNodeListeningDevice, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_25isNodeListeningDevice)},
  {__Pyx_NAMESTR("isNodeFrequentListeningDevice"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_26isNodeFrequentListeningDevice, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_26isNodeFrequentListeningDevice)},
  {__Pyx_NAMESTR("isNodeSecurityDevice"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_27isNodeSecurityDevice, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_27isNodeSecurityDevice)},
  {__Pyx_NAMESTR("isNodeRoutingDevice"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_28isNodeRoutingDevice, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_28isNodeRoutingDevice)},
  {__Pyx_NAMESTR("getNodeMaxBaudRate"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_29getNodeMaxBaudRate, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_29getNodeMaxBaudRate)},
  {__Pyx_NAMESTR("getNodeVersion"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_30getNodeVersion, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_30getNodeVersion)},
  {__Pyx_NAMESTR("getNodeSecurity"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_31getNodeSecurity, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_31getNodeSecurity)},
  {__Pyx_NAMESTR("getNodeBasic"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_32getNodeBasic, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_32getNodeBasic)},
  {__Pyx_NAMESTR("getNodeGeneric"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_33getNodeGeneric, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_33getNodeGeneric)},
  {__Pyx_NAMESTR("getNodeSpecific"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_34getNodeSpecific, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_34getNodeSpecific)},
  {__Pyx_NAMESTR("getNodeType"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_35getNodeType, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_35getNodeType)},
  {__Pyx_NAMESTR("getNodeNeighborsOld"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_36getNodeNeighborsOld, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_36getNodeNeighborsOld)},
  {__Pyx_NAMESTR("getNodeNeighbors"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_37getNodeNeighbors, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_37getNodeNeighbors)},
  {__Pyx_NAMESTR("getNodeManufacturerName"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_38getNodeManufacturerName, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_38getNodeManufacturerName)},
  {__Pyx_NAMESTR("getNodeProductName"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_39getNodeProductName, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_39getNodeProductName)},
  {__Pyx_NAMESTR("getNodeName"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_40getNodeName, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_40getNodeName)},
  {__Pyx_NAMESTR("getNodeLocation"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_41getNodeLocation, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_41getNodeLocation)},
  {__Pyx_NAMESTR("getNodeManufacturerId"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_42getNodeManufacturerId, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_42getNodeManufacturerId)},
  {__Pyx_NAMESTR("getNodeProductType"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_43getNodeProductType, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_43getNodeProductType)},
  {__Pyx_NAMESTR("getNodeProductId"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_44getNodeProductId, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_44getNodeProductId)},
  {__Pyx_NAMESTR("setNodeManufacturerName"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_45setNodeManufacturerName, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_45setNodeManufacturerName)},
  {__Pyx_NAMESTR("setNodeProductName"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_46setNodeProductName, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_46setNodeProductName)},
  {__Pyx_NAMESTR("setNodeName"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_47setNodeName, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_47setNodeName)},
  {__Pyx_NAMESTR("setNodeLocation"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_48setNodeLocation, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_48setNodeLocation)},
  {__Pyx_NAMESTR("setNodeOn"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_49setNodeOn, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_49setNodeOn)},
  {__Pyx_NAMESTR("setNodeOff"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_50setNodeOff, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_50setNodeOff)},
  {__Pyx_NAMESTR("setNodeLevel"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_51setNodeLevel, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_51setNodeLevel)},
  {__Pyx_NAMESTR("isNodeInfoReceived"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_52isNodeInfoReceived, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_52isNodeInfoReceived)},
  {__Pyx_NAMESTR("getNodeClassInformation"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_53getNodeClassInformation, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_53getNodeClassInformation)},
  {__Pyx_NAMESTR("setValue"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_54setValue, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_54setValue)},
  {__Pyx_NAMESTR("refreshValue"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_55refreshValue, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_55refreshValue)},
  {__Pyx_NAMESTR("getValueLabel"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_56getValueLabel, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_56getValueLabel)},
  {__Pyx_NAMESTR("setValueLabel"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_57setValueLabel, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_57setValueLabel)},
  {__Pyx_NAMESTR("getValueUnits"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_58getValueUnits, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_58getValueUnits)},
  {__Pyx_NAMESTR("setValueUnits"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_59setValueUnits, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_59setValueUnits)},
  {__Pyx_NAMESTR("getValueHelp"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_60getValueHelp, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_60getValueHelp)},
  {__Pyx_NAMESTR("setValueHelp"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_61setValueHelp, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_61setValueHelp)},
  {__Pyx_NAMESTR("getValueMin"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_62getValueMin, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_62getValueMin)},
  {__Pyx_NAMESTR("getValueMax"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_63getValueMax, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_63getValueMax)},
  {__Pyx_NAMESTR("isValueReadOnly"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_64isValueReadOnly, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_64isValueReadOnly)},
  {__Pyx_NAMESTR("isValueWriteOnly"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_65isValueWriteOnly, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_65isValueWriteOnly)},
  {__Pyx_NAMESTR("isValueSet"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_66isValueSet, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_66isValueSet)},
  {__Pyx_NAMESTR("getValue"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_67getValue, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_67getValue)},
  {__Pyx_NAMESTR("getValueAsBool"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_68getValueAsBool, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_68getValueAsBool)},
  {__Pyx_NAMESTR("getValueAsByte"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_69getValueAsByte, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_69getValueAsByte)},
  {__Pyx_NAMESTR("getValueAsFloat"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_70getValueAsFloat, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_70getValueAsFloat)},
  {__Pyx_NAMESTR("getValueAsShort"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_71getValueAsShort, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_71getValueAsShort)},
  {__Pyx_NAMESTR("getValueAsInt"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_72getValueAsInt, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_72getValueAsInt)},
  {__Pyx_NAMESTR("getValueAsString"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_73getValueAsString, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_73getValueAsString)},
  {__Pyx_NAMESTR("pressButton"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_74pressButton, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_74pressButton)},
  {__Pyx_NAMESTR("releaseButton"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_75releaseButton, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_75releaseButton)},
  {__Pyx_NAMESTR("setSwitchPoint"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_76setSwitchPoint, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_76setSwitchPoint)},
  {__Pyx_NAMESTR("removeSwitchPoint"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_77removeSwitchPoint, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_77removeSwitchPoint)},
  {__Pyx_NAMESTR("clearSwitchPoints"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_78clearSwitchPoints, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_78clearSwitchPoints)},
  {__Pyx_NAMESTR("getSwitchPoint"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_79getSwitchPoint, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_79getSwitchPoint)},
  {__Pyx_NAMESTR("getNumSwitchPoints"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_80getNumSwitchPoints, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_80getNumSwitchPoints)},
  {__Pyx_NAMESTR("switchAllOn"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_81switchAllOn, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_81switchAllOn)},
  {__Pyx_NAMESTR("switchAllOff"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_82switchAllOff, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_82switchAllOff)},
  {__Pyx_NAMESTR("setConfigParam"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_83setConfigParam, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_83setConfigParam)},
  {__Pyx_NAMESTR("requestConfigParam"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_84requestConfigParam, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_84requestConfigParam)},
  {__Pyx_NAMESTR("requestAllConfigParams"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_85requestAllConfigParams, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_85requestAllConfigParams)},
  {__Pyx_NAMESTR("getNumGroups"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_86getNumGroups, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_86getNumGroups)},
  {__Pyx_NAMESTR("getAssociations"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_87getAssociations, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_87getAssociations)},
  {__Pyx_NAMESTR("getMaxAssociations"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_88getMaxAssociations, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_88getMaxAssociations)},
  {__Pyx_NAMESTR("getGroupLabel"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_89getGroupLabel, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_89getGroupLabel)},
  {__Pyx_NAMESTR("addAssociation"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_90addAssociation, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_90addAssociation)},
  {__Pyx_NAMESTR("removeAssociation"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_91removeAssociation, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_91removeAssociation)},
  {__Pyx_NAMESTR("addWatcher"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_92addWatcher, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_92addWatcher)},
  {__Pyx_NAMESTR("resetController"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_93resetController, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_93resetController)},
  {__Pyx_NAMESTR("softResetController"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_94softResetController, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_94softResetController)},
  {__Pyx_NAMESTR("cancelControllerCommand"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_95cancelControllerCommand, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_95cancelControllerCommand)},
  {__Pyx_NAMESTR("getNumScenes"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_96getNumScenes, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_96getNumScenes)},
  {__Pyx_NAMESTR("getAllScenes"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_97getAllScenes, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_97getAllScenes)},
  {__Pyx_NAMESTR("createScene"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_98createScene, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_98createScene)},
  {__Pyx_NAMESTR("removeScene"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_99removeScene, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_99removeScene)},
  {__Pyx_NAMESTR("addSceneValue"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_100addSceneValue, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_100addSceneValue)},
  {__Pyx_NAMESTR("setSceneValue"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_101setSceneValue, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_101setSceneValue)},
  {__Pyx_NAMESTR("getSceneLabel"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_102getSceneLabel, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_102getSceneLabel)},
  {__Pyx_NAMESTR("setSceneLabel"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_103setSceneLabel, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_103setSceneLabel)},
  {__Pyx_NAMESTR("sceneExists"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_104sceneExists, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_104sceneExists)},
  {__Pyx_NAMESTR("activateScene"), (PyCFunction)__pyx_pf_12libopenzwave_9PyManager_105activateScene, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_105activateScene)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_PyManager = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_PyManager = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_PyManager = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_PyManager = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_12libopenzwave_PyManager = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("libopenzwave.PyManager"), /*tp_name*/
  sizeof(struct __pyx_obj_12libopenzwave_PyManager), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_12libopenzwave_PyManager, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_PyManager, /*tp_as_number*/
  &__pyx_tp_as_sequence_PyManager, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_PyManager, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_PyManager, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\nThe main public interface to OpenZWave.\n\nA singleton class providing the main public interface to OpenZWave.  The\nManager class exposes all the functionality required to add Z-Wave support to\nan application.  It handles the sending and receiving of Z-Wave messages as\nwell as the configuration of a Z-Wave network and its devices, freeing the\nlibrary user from the burden of learning the low-level details of the Z-Wave\nprotocol.\n\nAll Z-Wave functionality is accessed via the Manager class.  While this does\nnot make for the most efficient code structure, it does enable the library to\nhandle potentially complex and hard-to-debug issues such as multi-threading and\nobject lifespans behind the scenes. Application development is therefore\nsimplified and less prone to bugs.\n\nThere can be only one instance of the Manager class, and all applications will\nstart by calling Manager::Create static method to create that instance.  From\nthen on, a call to the Manager::Get static method will return the pointer to\nthe Manager object.  On application exit, Manager::Destroy should be called to\nallow OpenZWave to clean up and delete any other objects it has created.\n\nOnce the Manager has been created, a call should be made to Manager::AddWatcher\nto install a notification callback handler.  This handler will receive\nnotifications of Z-Wave network changes and updates to device values, and is an\nessential element of OpenZWave.\n\nNext, a call should be made to Manager::AddDriver for each Z-Wave controller\nattached to the PC.  Each Driver will handle the sending and receiving of\nmessages for all the devices in its controller's Z-Wave network.  The Driver\nwill read any previously saved configuration and then query the Z-Wave\ncontroller for any missing information.  Once that process is complete, a\nDriverReady notification callback will be sent containing the Home ID of the\ncontroller, which is required by most of the other Manager class methods.\n\nAfter the DriverReady notification is sent, the Driver will poll each node on\nthe network to update information about each node.  After all \"awake\" nodes\nhave been polled, an \"AllAwakeNodesQueried\" notification is sent.  This is when\na client application can expect all of the node information (both static\ninformation, like the physical device's capabilities, session information (like\n[associations and/or names] and dynamic information (like temperature or on/off\nstate) to be available.  Finally, after all nodes (whether listening or\nsleeping) have been polled, an \"AllNodesQueried\" notification is sent.\n    "), /*tp_doc*/
  __pyx_tp_traverse_12libopenzwave_PyManager, /*tp_traverse*/
  __pyx_tp_clear_12libopenzwave_PyManager, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_12libopenzwave_PyManager, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_12libopenzwave_PyManager, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {__Pyx_NAMESTR("driverData"), (PyCFunction)__pyx_pf_12libopenzwave_driverData, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("libopenzwave"),
    __Pyx_DOCSTR(__pyx_k_18), /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 1},
  {&__pyx_n_s_10, __pyx_k_10, sizeof(__pyx_k_10), 0, 0, 1, 1},
  {&__pyx_kp_s_101, __pyx_k_101, sizeof(__pyx_k_101), 0, 0, 1, 0},
  {&__pyx_kp_s_104, __pyx_k_104, sizeof(__pyx_k_104), 0, 0, 1, 0},
  {&__pyx_kp_s_107, __pyx_k_107, sizeof(__pyx_k_107), 0, 0, 1, 0},
  {&__pyx_n_s_11, __pyx_k_11, sizeof(__pyx_k_11), 0, 0, 1, 1},
  {&__pyx_kp_s_110, __pyx_k_110, sizeof(__pyx_k_110), 0, 0, 1, 0},
  {&__pyx_kp_s_113, __pyx_k_113, sizeof(__pyx_k_113), 0, 0, 1, 0},
  {&__pyx_kp_s_116, __pyx_k_116, sizeof(__pyx_k_116), 0, 0, 1, 0},
  {&__pyx_kp_s_119, __pyx_k_119, sizeof(__pyx_k_119), 0, 0, 1, 0},
  {&__pyx_n_s_12, __pyx_k_12, sizeof(__pyx_k_12), 0, 0, 1, 1},
  {&__pyx_kp_s_122, __pyx_k_122, sizeof(__pyx_k_122), 0, 0, 1, 0},
  {&__pyx_kp_s_125, __pyx_k_125, sizeof(__pyx_k_125), 0, 0, 1, 0},
  {&__pyx_kp_s_128, __pyx_k_128, sizeof(__pyx_k_128), 0, 0, 1, 0},
  {&__pyx_n_s_13, __pyx_k_13, sizeof(__pyx_k_13), 0, 0, 1, 1},
  {&__pyx_kp_s_131, __pyx_k_131, sizeof(__pyx_k_131), 0, 0, 1, 0},
  {&__pyx_kp_s_134, __pyx_k_134, sizeof(__pyx_k_134), 0, 0, 1, 0},
  {&__pyx_kp_s_137, __pyx_k_137, sizeof(__pyx_k_137), 0, 0, 1, 0},
  {&__pyx_n_s_139, __pyx_k_139, sizeof(__pyx_k_139), 0, 0, 1, 1},
  {&__pyx_n_s_14, __pyx_k_14, sizeof(__pyx_k_14), 0, 0, 1, 1},
  {&__pyx_n_s_140, __pyx_k_140, sizeof(__pyx_k_140), 0, 0, 1, 1},
  {&__pyx_n_s_141, __pyx_k_141, sizeof(__pyx_k_141), 0, 0, 1, 1},
  {&__pyx_n_s_142, __pyx_k_142, sizeof(__pyx_k_142), 0, 0, 1, 1},
  {&__pyx_n_s_143, __pyx_k_143, sizeof(__pyx_k_143), 0, 0, 1, 1},
  {&__pyx_n_s_144, __pyx_k_144, sizeof(__pyx_k_144), 0, 0, 1, 1},
  {&__pyx_n_s_145, __pyx_k_145, sizeof(__pyx_k_145), 0, 0, 1, 1},
  {&__pyx_n_s_146, __pyx_k_146, sizeof(__pyx_k_146), 0, 0, 1, 1},
  {&__pyx_n_s_147, __pyx_k_147, sizeof(__pyx_k_147), 0, 0, 1, 1},
  {&__pyx_n_s_148, __pyx_k_148, sizeof(__pyx_k_148), 0, 0, 1, 1},
  {&__pyx_n_s_149, __pyx_k_149, sizeof(__pyx_k_149), 0, 0, 1, 1},
  {&__pyx_kp_s_15, __pyx_k_15, sizeof(__pyx_k_15), 0, 0, 1, 0},
  {&__pyx_n_s_150, __pyx_k_150, sizeof(__pyx_k_150), 0, 0, 1, 1},
  {&__pyx_n_s_151, __pyx_k_151, sizeof(__pyx_k_151), 0, 0, 1, 1},
  {&__pyx_n_s_152, __pyx_k_152, sizeof(__pyx_k_152), 0, 0, 1, 1},
  {&__pyx_n_s_153, __pyx_k_153, sizeof(__pyx_k_153), 0, 0, 1, 1},
  {&__pyx_n_s_154, __pyx_k_154, sizeof(__pyx_k_154), 0, 0, 1, 1},
  {&__pyx_n_s_155, __pyx_k_155, sizeof(__pyx_k_155), 0, 0, 1, 1},
  {&__pyx_n_s_156, __pyx_k_156, sizeof(__pyx_k_156), 0, 0, 1, 1},
  {&__pyx_n_s_157, __pyx_k_157, sizeof(__pyx_k_157), 0, 0, 1, 1},
  {&__pyx_n_s_158, __pyx_k_158, sizeof(__pyx_k_158), 0, 0, 1, 1},
  {&__pyx_n_s_159, __pyx_k_159, sizeof(__pyx_k_159), 0, 0, 1, 1},
  {&__pyx_n_s_160, __pyx_k_160, sizeof(__pyx_k_160), 0, 0, 1, 1},
  {&__pyx_n_s_161, __pyx_k_161, sizeof(__pyx_k_161), 0, 0, 1, 1},
  {&__pyx_n_s_162, __pyx_k_162, sizeof(__pyx_k_162), 0, 0, 1, 1},
  {&__pyx_n_s_163, __pyx_k_163, sizeof(__pyx_k_163), 0, 0, 1, 1},
  {&__pyx_n_s_164, __pyx_k_164, sizeof(__pyx_k_164), 0, 0, 1, 1},
  {&__pyx_n_s_165, __pyx_k_165, sizeof(__pyx_k_165), 0, 0, 1, 1},
  {&__pyx_n_s_166, __pyx_k_166, sizeof(__pyx_k_166), 0, 0, 1, 1},
  {&__pyx_n_s_167, __pyx_k_167, sizeof(__pyx_k_167), 0, 0, 1, 1},
  {&__pyx_n_s_168, __pyx_k_168, sizeof(__pyx_k_168), 0, 0, 1, 1},
  {&__pyx_n_s_169, __pyx_k_169, sizeof(__pyx_k_169), 0, 0, 1, 1},
  {&__pyx_n_s_17, __pyx_k_17, sizeof(__pyx_k_17), 0, 0, 1, 1},
  {&__pyx_n_s_170, __pyx_k_170, sizeof(__pyx_k_170), 0, 0, 1, 1},
  {&__pyx_n_s_171, __pyx_k_171, sizeof(__pyx_k_171), 0, 0, 1, 1},
  {&__pyx_n_s_172, __pyx_k_172, sizeof(__pyx_k_172), 0, 0, 1, 1},
  {&__pyx_n_s_173, __pyx_k_173, sizeof(__pyx_k_173), 0, 0, 1, 1},
  {&__pyx_n_s_174, __pyx_k_174, sizeof(__pyx_k_174), 0, 0, 1, 1},
  {&__pyx_n_s_175, __pyx_k_175, sizeof(__pyx_k_175), 0, 0, 1, 1},
  {&__pyx_n_s_176, __pyx_k_176, sizeof(__pyx_k_176), 0, 0, 1, 1},
  {&__pyx_n_s_177, __pyx_k_177, sizeof(__pyx_k_177), 0, 0, 1, 1},
  {&__pyx_n_s_178, __pyx_k_178, sizeof(__pyx_k_178), 0, 0, 1, 1},
  {&__pyx_n_s_179, __pyx_k_179, sizeof(__pyx_k_179), 0, 0, 1, 1},
  {&__pyx_n_s_180, __pyx_k_180, sizeof(__pyx_k_180), 0, 0, 1, 1},
  {&__pyx_n_s_181, __pyx_k_181, sizeof(__pyx_k_181), 0, 0, 1, 1},
  {&__pyx_n_s_182, __pyx_k_182, sizeof(__pyx_k_182), 0, 0, 1, 1},
  {&__pyx_n_s_183, __pyx_k_183, sizeof(__pyx_k_183), 0, 0, 1, 1},
  {&__pyx_n_s_184, __pyx_k_184, sizeof(__pyx_k_184), 0, 0, 1, 1},
  {&__pyx_n_s_185, __pyx_k_185, sizeof(__pyx_k_185), 0, 0, 1, 1},
  {&__pyx_n_s_186, __pyx_k_186, sizeof(__pyx_k_186), 0, 0, 1, 1},
  {&__pyx_n_s_187, __pyx_k_187, sizeof(__pyx_k_187), 0, 0, 1, 1},
  {&__pyx_n_s_188, __pyx_k_188, sizeof(__pyx_k_188), 0, 0, 1, 1},
  {&__pyx_n_s_189, __pyx_k_189, sizeof(__pyx_k_189), 0, 0, 1, 1},
  {&__pyx_kp_s_19, __pyx_k_19, sizeof(__pyx_k_19), 0, 0, 1, 0},
  {&__pyx_n_s_190, __pyx_k_190, sizeof(__pyx_k_190), 0, 0, 1, 1},
  {&__pyx_n_s_191, __pyx_k_191, sizeof(__pyx_k_191), 0, 0, 1, 1},
  {&__pyx_n_s_192, __pyx_k_192, sizeof(__pyx_k_192), 0, 0, 1, 1},
  {&__pyx_n_s_193, __pyx_k_193, sizeof(__pyx_k_193), 0, 0, 1, 1},
  {&__pyx_n_s_194, __pyx_k_194, sizeof(__pyx_k_194), 0, 0, 1, 1},
  {&__pyx_n_s_195, __pyx_k_195, sizeof(__pyx_k_195), 0, 0, 1, 1},
  {&__pyx_n_s_196, __pyx_k_196, sizeof(__pyx_k_196), 0, 0, 1, 1},
  {&__pyx_n_s_197, __pyx_k_197, sizeof(__pyx_k_197), 0, 0, 1, 1},
  {&__pyx_n_s_198, __pyx_k_198, sizeof(__pyx_k_198), 0, 0, 1, 1},
  {&__pyx_n_s_199, __pyx_k_199, sizeof(__pyx_k_199), 0, 0, 1, 1},
  {&__pyx_kp_s_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 0, 1, 0},
  {&__pyx_kp_s_20, __pyx_k_20, sizeof(__pyx_k_20), 0, 0, 1, 0},
  {&__pyx_n_s_200, __pyx_k_200, sizeof(__pyx_k_200), 0, 0, 1, 1},
  {&__pyx_n_s_201, __pyx_k_201, sizeof(__pyx_k_201), 0, 0, 1, 1},
  {&__pyx_n_s_202, __pyx_k_202, sizeof(__pyx_k_202), 0, 0, 1, 1},
  {&__pyx_n_s_203, __pyx_k_203, sizeof(__pyx_k_203), 0, 0, 1, 1},
  {&__pyx_n_s_204, __pyx_k_204, sizeof(__pyx_k_204), 0, 0, 1, 1},
  {&__pyx_n_s_205, __pyx_k_205, sizeof(__pyx_k_205), 0, 0, 1, 1},
  {&__pyx_n_s_206, __pyx_k_206, sizeof(__pyx_k_206), 0, 0, 1, 1},
  {&__pyx_n_s_207, __pyx_k_207, sizeof(__pyx_k_207), 0, 0, 1, 1},
  {&__pyx_n_s_208, __pyx_k_208, sizeof(__pyx_k_208), 0, 0, 1, 1},
  {&__pyx_n_s_209, __pyx_k_209, sizeof(__pyx_k_209), 0, 0, 1, 1},
  {&__pyx_n_s_210, __pyx_k_210, sizeof(__pyx_k_210), 0, 0, 1, 1},
  {&__pyx_n_s_211, __pyx_k_211, sizeof(__pyx_k_211), 0, 0, 1, 1},
  {&__pyx_n_s_212, __pyx_k_212, sizeof(__pyx_k_212), 0, 0, 1, 1},
  {&__pyx_n_s_213, __pyx_k_213, sizeof(__pyx_k_213), 0, 0, 1, 1},
  {&__pyx_n_s_214, __pyx_k_214, sizeof(__pyx_k_214), 0, 0, 1, 1},
  {&__pyx_kp_s_215, __pyx_k_215, sizeof(__pyx_k_215), 0, 0, 1, 0},
  {&__pyx_kp_s_216, __pyx_k_216, sizeof(__pyx_k_216), 0, 0, 1, 0},
  {&__pyx_kp_s_217, __pyx_k_217, sizeof(__pyx_k_217), 0, 0, 1, 0},
  {&__pyx_kp_s_218, __pyx_k_218, sizeof(__pyx_k_218), 0, 0, 1, 0},
  {&__pyx_kp_s_219, __pyx_k_219, sizeof(__pyx_k_219), 0, 0, 1, 0},
  {&__pyx_kp_s_22, __pyx_k_22, sizeof(__pyx_k_22), 0, 0, 1, 0},
  {&__pyx_kp_s_220, __pyx_k_220, sizeof(__pyx_k_220), 0, 0, 1, 0},
  {&__pyx_kp_s_221, __pyx_k_221, sizeof(__pyx_k_221), 0, 0, 1, 0},
  {&__pyx_kp_s_222, __pyx_k_222, sizeof(__pyx_k_222), 0, 0, 1, 0},
  {&__pyx_kp_s_223, __pyx_k_223, sizeof(__pyx_k_223), 0, 0, 1, 0},
  {&__pyx_kp_s_224, __pyx_k_224, sizeof(__pyx_k_224), 0, 0, 1, 0},
  {&__pyx_kp_s_225, __pyx_k_225, sizeof(__pyx_k_225), 0, 0, 1, 0},
  {&__pyx_kp_s_226, __pyx_k_226, sizeof(__pyx_k_226), 0, 0, 1, 0},
  {&__pyx_kp_s_227, __pyx_k_227, sizeof(__pyx_k_227), 0, 0, 1, 0},
  {&__pyx_kp_s_228, __pyx_k_228, sizeof(__pyx_k_228), 0, 0, 1, 0},
  {&__pyx_kp_s_229, __pyx_k_229, sizeof(__pyx_k_229), 0, 0, 1, 0},
  {&__pyx_kp_s_230, __pyx_k_230, sizeof(__pyx_k_230), 0, 0, 1, 0},
  {&__pyx_kp_s_231, __pyx_k_231, sizeof(__pyx_k_231), 0, 0, 1, 0},
  {&__pyx_kp_s_232, __pyx_k_232, sizeof(__pyx_k_232), 0, 0, 1, 0},
  {&__pyx_kp_s_25, __pyx_k_25, sizeof(__pyx_k_25), 0, 0, 1, 0},
  {&__pyx_kp_s_28, __pyx_k_28, sizeof(__pyx_k_28), 0, 0, 1, 0},
  {&__pyx_n_s_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 1, 1},
  {&__pyx_kp_s_31, __pyx_k_31, sizeof(__pyx_k_31), 0, 0, 1, 0},
  {&__pyx_kp_s_34, __pyx_k_34, sizeof(__pyx_k_34), 0, 0, 1, 0},
  {&__pyx_kp_s_37, __pyx_k_37, sizeof(__pyx_k_37), 0, 0, 1, 0},
  {&__pyx_kp_s_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 0, 1, 0},
  {&__pyx_kp_s_40, __pyx_k_40, sizeof(__pyx_k_40), 0, 0, 1, 0},
  {&__pyx_kp_s_43, __pyx_k_43, sizeof(__pyx_k_43), 0, 0, 1, 0},
  {&__pyx_kp_s_46, __pyx_k_46, sizeof(__pyx_k_46), 0, 0, 1, 0},
  {&__pyx_kp_s_49, __pyx_k_49, sizeof(__pyx_k_49), 0, 0, 1, 0},
  {&__pyx_n_s_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 0, 1, 1},
  {&__pyx_kp_s_52, __pyx_k_52, sizeof(__pyx_k_52), 0, 0, 1, 0},
  {&__pyx_kp_s_55, __pyx_k_55, sizeof(__pyx_k_55), 0, 0, 1, 0},
  {&__pyx_kp_s_58, __pyx_k_58, sizeof(__pyx_k_58), 0, 0, 1, 0},
  {&__pyx_n_s_6, __pyx_k_6, sizeof(__pyx_k_6), 0, 0, 1, 1},
  {&__pyx_kp_s_61, __pyx_k_61, sizeof(__pyx_k_61), 0, 0, 1, 0},
  {&__pyx_kp_s_64, __pyx_k_64, sizeof(__pyx_k_64), 0, 0, 1, 0},
  {&__pyx_kp_s_67, __pyx_k_67, sizeof(__pyx_k_67), 0, 0, 1, 0},
  {&__pyx_n_s_7, __pyx_k_7, sizeof(__pyx_k_7), 0, 0, 1, 1},
  {&__pyx_kp_s_70, __pyx_k_70, sizeof(__pyx_k_70), 0, 0, 1, 0},
  {&__pyx_kp_s_73, __pyx_k_73, sizeof(__pyx_k_73), 0, 0, 1, 0},
  {&__pyx_kp_s_76, __pyx_k_76, sizeof(__pyx_k_76), 0, 0, 1, 0},
  {&__pyx_kp_s_79, __pyx_k_79, sizeof(__pyx_k_79), 0, 0, 1, 0},
  {&__pyx_n_s_8, __pyx_k_8, sizeof(__pyx_k_8), 0, 0, 1, 1},
  {&__pyx_kp_s_82, __pyx_k_82, sizeof(__pyx_k_82), 0, 0, 1, 0},
  {&__pyx_n_s_84, __pyx_k_84, sizeof(__pyx_k_84), 0, 0, 1, 1},
  {&__pyx_kp_s_86, __pyx_k_86, sizeof(__pyx_k_86), 0, 0, 1, 0},
  {&__pyx_kp_s_89, __pyx_k_89, sizeof(__pyx_k_89), 0, 0, 1, 0},
  {&__pyx_n_s_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 0, 1, 1},
  {&__pyx_kp_s_92, __pyx_k_92, sizeof(__pyx_k_92), 0, 0, 1, 0},
  {&__pyx_kp_s_95, __pyx_k_95, sizeof(__pyx_k_95), 0, 0, 1, 0},
  {&__pyx_kp_s_98, __pyx_k_98, sizeof(__pyx_k_98), 0, 0, 1, 0},
  {&__pyx_n_s__ActivateScene, __pyx_k__ActivateScene, sizeof(__pyx_k__ActivateScene), 0, 0, 1, 1},
  {&__pyx_n_s__AddAssociation, __pyx_k__AddAssociation, sizeof(__pyx_k__AddAssociation), 0, 0, 1, 1},
  {&__pyx_n_s__AddDriver, __pyx_k__AddDriver, sizeof(__pyx_k__AddDriver), 0, 0, 1, 1},
  {&__pyx_n_s__AddSceneValue, __pyx_k__AddSceneValue, sizeof(__pyx_k__AddSceneValue), 0, 0, 1, 1},
  {&__pyx_n_s__AddWatcher, __pyx_k__AddWatcher, sizeof(__pyx_k__AddWatcher), 0, 0, 1, 1},
  {&__pyx_n_s__AllNodesQueried, __pyx_k__AllNodesQueried, sizeof(__pyx_k__AllNodesQueried), 0, 0, 1, 1},
  {&__pyx_n_s__AwakeNodesQueried, __pyx_k__AwakeNodesQueried, sizeof(__pyx_k__AwakeNodesQueried), 0, 0, 1, 1},
  {&__pyx_n_s__Basic, __pyx_k__Basic, sizeof(__pyx_k__Basic), 0, 0, 1, 1},
  {&__pyx_n_s__Bool, __pyx_k__Bool, sizeof(__pyx_k__Bool), 0, 0, 1, 1},
  {&__pyx_n_s__Button, __pyx_k__Button, sizeof(__pyx_k__Button), 0, 0, 1, 1},
  {&__pyx_n_s__ButtonOff, __pyx_k__ButtonOff, sizeof(__pyx_k__ButtonOff), 0, 0, 1, 1},
  {&__pyx_n_s__ButtonOn, __pyx_k__ButtonOn, sizeof(__pyx_k__ButtonOn), 0, 0, 1, 1},
  {&__pyx_n_s__Byte, __pyx_k__Byte, sizeof(__pyx_k__Byte), 0, 0, 1, 1},
  {&__pyx_n_s__CALLBACK_DESC, __pyx_k__CALLBACK_DESC, sizeof(__pyx_k__CALLBACK_DESC), 0, 0, 1, 1},
  {&__pyx_n_s__COMMAND_CLASS_ALARM, __pyx_k__COMMAND_CLASS_ALARM, sizeof(__pyx_k__COMMAND_CLASS_ALARM), 0, 0, 1, 1},
  {&__pyx_n_s__COMMAND_CLASS_BASIC, __pyx_k__COMMAND_CLASS_BASIC, sizeof(__pyx_k__COMMAND_CLASS_BASIC), 0, 0, 1, 1},
  {&__pyx_n_s__COMMAND_CLASS_CLOCK, __pyx_k__COMMAND_CLASS_CLOCK, sizeof(__pyx_k__COMMAND_CLASS_CLOCK), 0, 0, 1, 1},
  {&__pyx_n_s__COMMAND_CLASS_DESC, __pyx_k__COMMAND_CLASS_DESC, sizeof(__pyx_k__COMMAND_CLASS_DESC), 0, 0, 1, 1},
  {&__pyx_n_s__COMMAND_CLASS_HAIL, __pyx_k__COMMAND_CLASS_HAIL, sizeof(__pyx_k__COMMAND_CLASS_HAIL), 0, 0, 1, 1},
  {&__pyx_n_s__COMMAND_CLASS_LOCK, __pyx_k__COMMAND_CLASS_LOCK, sizeof(__pyx_k__COMMAND_CLASS_LOCK), 0, 0, 1, 1},
  {&__pyx_n_s__COMMAND_CLASS_MARK, __pyx_k__COMMAND_CLASS_MARK, sizeof(__pyx_k__COMMAND_CLASS_MARK), 0, 0, 1, 1},
  {&__pyx_n_s__COMMAND_CLASS_METER, __pyx_k__COMMAND_CLASS_METER, sizeof(__pyx_k__COMMAND_CLASS_METER), 0, 0, 1, 1},
  {&__pyx_n_s__COMMAND_CLASS_TIME, __pyx_k__COMMAND_CLASS_TIME, sizeof(__pyx_k__COMMAND_CLASS_TIME), 0, 0, 1, 1},
  {&__pyx_n_s__ClearSwitchPoints, __pyx_k__ClearSwitchPoints, sizeof(__pyx_k__ClearSwitchPoints), 0, 0, 1, 1},
  {&__pyx_n_s__Config, __pyx_k__Config, sizeof(__pyx_k__Config), 0, 0, 1, 1},
  {&__pyx_n_s__CreateButton, __pyx_k__CreateButton, sizeof(__pyx_k__CreateButton), 0, 0, 1, 1},
  {&__pyx_n_s__CreateScene, __pyx_k__CreateScene, sizeof(__pyx_k__CreateScene), 0, 0, 1, 1},
  {&__pyx_n_s__Decimal, __pyx_k__Decimal, sizeof(__pyx_k__Decimal), 0, 0, 1, 1},
  {&__pyx_n_s__DeleteButton, __pyx_k__DeleteButton, sizeof(__pyx_k__DeleteButton), 0, 0, 1, 1},
  {&__pyx_n_s__DisablePoll, __pyx_k__DisablePoll, sizeof(__pyx_k__DisablePoll), 0, 0, 1, 1},
  {&__pyx_n_s__DriverFailed, __pyx_k__DriverFailed, sizeof(__pyx_k__DriverFailed), 0, 0, 1, 1},
  {&__pyx_n_s__DriverReady, __pyx_k__DriverReady, sizeof(__pyx_k__DriverReady), 0, 0, 1, 1},
  {&__pyx_n_s__EnablePoll, __pyx_k__EnablePoll, sizeof(__pyx_k__EnablePoll), 0, 0, 1, 1},
  {&__pyx_n_s__EnumWithDoc, __pyx_k__EnumWithDoc, sizeof(__pyx_k__EnumWithDoc), 0, 0, 1, 1},
  {&__pyx_n_s__Error, __pyx_k__Error, sizeof(__pyx_k__Error), 0, 0, 1, 1},
  {&__pyx_n_s__GetAllScenes, __pyx_k__GetAllScenes, sizeof(__pyx_k__GetAllScenes), 0, 0, 1, 1},
  {&__pyx_n_s__GetAssociations, __pyx_k__GetAssociations, sizeof(__pyx_k__GetAssociations), 0, 0, 1, 1},
  {&__pyx_n_s__GetCommandClassId, __pyx_k__GetCommandClassId, sizeof(__pyx_k__GetCommandClassId), 0, 0, 1, 1},
  {&__pyx_n_s__GetControllerNodeId, __pyx_k__GetControllerNodeId, sizeof(__pyx_k__GetControllerNodeId), 0, 0, 1, 1},
  {&__pyx_n_s__GetDriverStatistics, __pyx_k__GetDriverStatistics, sizeof(__pyx_k__GetDriverStatistics), 0, 0, 1, 1},
  {&__pyx_n_s__GetEvent, __pyx_k__GetEvent, sizeof(__pyx_k__GetEvent), 0, 0, 1, 1},
  {&__pyx_n_s__GetGenre, __pyx_k__GetGenre, sizeof(__pyx_k__GetGenre), 0, 0, 1, 1},
  {&__pyx_n_s__GetGroupIdx, __pyx_k__GetGroupIdx, sizeof(__pyx_k__GetGroupIdx), 0, 0, 1, 1},
  {&__pyx_n_s__GetGroupLabel, __pyx_k__GetGroupLabel, sizeof(__pyx_k__GetGroupLabel), 0, 0, 1, 1},
  {&__pyx_n_s__GetHomeId, __pyx_k__GetHomeId, sizeof(__pyx_k__GetHomeId), 0, 0, 1, 1},
  {&__pyx_n_s__GetId, __pyx_k__GetId, sizeof(__pyx_k__GetId), 0, 0, 1, 1},
  {&__pyx_n_s__GetIndex, __pyx_k__GetIndex, sizeof(__pyx_k__GetIndex), 0, 0, 1, 1},
  {&__pyx_n_s__GetInstance, __pyx_k__GetInstance, sizeof(__pyx_k__GetInstance), 0, 0, 1, 1},
  {&__pyx_n_s__GetLibraryTypeName, __pyx_k__GetLibraryTypeName, sizeof(__pyx_k__GetLibraryTypeName), 0, 0, 1, 1},
  {&__pyx_n_s__GetLibraryVersion, __pyx_k__GetLibraryVersion, sizeof(__pyx_k__GetLibraryVersion), 0, 0, 1, 1},
  {&__pyx_n_s__GetMaxAssociations, __pyx_k__GetMaxAssociations, sizeof(__pyx_k__GetMaxAssociations), 0, 0, 1, 1},
  {&__pyx_n_s__GetNodeBasic, __pyx_k__GetNodeBasic, sizeof(__pyx_k__GetNodeBasic), 0, 0, 1, 1},
  {&__pyx_n_s__GetNodeGeneric, __pyx_k__GetNodeGeneric, sizeof(__pyx_k__GetNodeGeneric), 0, 0, 1, 1},
  {&__pyx_n_s__GetNodeId, __pyx_k__GetNodeId, sizeof(__pyx_k__GetNodeId), 0, 0, 1, 1},
  {&__pyx_n_s__GetNodeLocation, __pyx_k__GetNodeLocation, sizeof(__pyx_k__GetNodeLocation), 0, 0, 1, 1},
  {&__pyx_n_s__GetNodeMaxBaudRate, __pyx_k__GetNodeMaxBaudRate, sizeof(__pyx_k__GetNodeMaxBaudRate), 0, 0, 1, 1},
  {&__pyx_n_s__GetNodeName, __pyx_k__GetNodeName, sizeof(__pyx_k__GetNodeName), 0, 0, 1, 1},
  {&__pyx_n_s__GetNodeNeighbors, __pyx_k__GetNodeNeighbors, sizeof(__pyx_k__GetNodeNeighbors), 0, 0, 1, 1},
  {&__pyx_n_s__GetNodeProductId, __pyx_k__GetNodeProductId, sizeof(__pyx_k__GetNodeProductId), 0, 0, 1, 1},
  {&__pyx_n_s__GetNodeProductName, __pyx_k__GetNodeProductName, sizeof(__pyx_k__GetNodeProductName), 0, 0, 1, 1},
  {&__pyx_n_s__GetNodeProductType, __pyx_k__GetNodeProductType, sizeof(__pyx_k__GetNodeProductType), 0, 0, 1, 1},
  {&__pyx_n_s__GetNodeSecurity, __pyx_k__GetNodeSecurity, sizeof(__pyx_k__GetNodeSecurity), 0, 0, 1, 1},
  {&__pyx_n_s__GetNodeSpecific, __pyx_k__GetNodeSpecific, sizeof(__pyx_k__GetNodeSpecific), 0, 0, 1, 1},
  {&__pyx_n_s__GetNodeType, __pyx_k__GetNodeType, sizeof(__pyx_k__GetNodeType), 0, 0, 1, 1},
  {&__pyx_n_s__GetNodeVersion, __pyx_k__GetNodeVersion, sizeof(__pyx_k__GetNodeVersion), 0, 0, 1, 1},
  {&__pyx_n_s__GetNumGroups, __pyx_k__GetNumGroups, sizeof(__pyx_k__GetNumGroups), 0, 0, 1, 1},
  {&__pyx_n_s__GetNumScenes, __pyx_k__GetNumScenes, sizeof(__pyx_k__GetNumScenes), 0, 0, 1, 1},
  {&__pyx_n_s__GetNumSwitchPoints, __pyx_k__GetNumSwitchPoints, sizeof(__pyx_k__GetNumSwitchPoints), 0, 0, 1, 1},
  {&__pyx_n_s__GetPollInterval, __pyx_k__GetPollInterval, sizeof(__pyx_k__GetPollInterval), 0, 0, 1, 1},
  {&__pyx_n_s__GetSceneLabel, __pyx_k__GetSceneLabel, sizeof(__pyx_k__GetSceneLabel), 0, 0, 1, 1},
  {&__pyx_n_s__GetSendQueueCount, __pyx_k__GetSendQueueCount, sizeof(__pyx_k__GetSendQueueCount), 0, 0, 1, 1},
  {&__pyx_n_s__GetSwitchPoint, __pyx_k__GetSwitchPoint, sizeof(__pyx_k__GetSwitchPoint), 0, 0, 1, 1},
  {&__pyx_n_s__GetType, __pyx_k__GetType, sizeof(__pyx_k__GetType), 0, 0, 1, 1},
  {&__pyx_n_s__GetValueAsBool, __pyx_k__GetValueAsBool, sizeof(__pyx_k__GetValueAsBool), 0, 0, 1, 1},
  {&__pyx_n_s__GetValueAsByte, __pyx_k__GetValueAsByte, sizeof(__pyx_k__GetValueAsByte), 0, 0, 1, 1},
  {&__pyx_n_s__GetValueAsFloat, __pyx_k__GetValueAsFloat, sizeof(__pyx_k__GetValueAsFloat), 0, 0, 1, 1},
  {&__pyx_n_s__GetValueAsInt, __pyx_k__GetValueAsInt, sizeof(__pyx_k__GetValueAsInt), 0, 0, 1, 1},
  {&__pyx_n_s__GetValueAsShort, __pyx_k__GetValueAsShort, sizeof(__pyx_k__GetValueAsShort), 0, 0, 1, 1},
  {&__pyx_n_s__GetValueAsString, __pyx_k__GetValueAsString, sizeof(__pyx_k__GetValueAsString), 0, 0, 1, 1},
  {&__pyx_n_s__GetValueHelp, __pyx_k__GetValueHelp, sizeof(__pyx_k__GetValueHelp), 0, 0, 1, 1},
  {&__pyx_n_s__GetValueID, __pyx_k__GetValueID, sizeof(__pyx_k__GetValueID), 0, 0, 1, 1},
  {&__pyx_n_s__GetValueLabel, __pyx_k__GetValueLabel, sizeof(__pyx_k__GetValueLabel), 0, 0, 1, 1},
  {&__pyx_n_s__GetValueMax, __pyx_k__GetValueMax, sizeof(__pyx_k__GetValueMax), 0, 0, 1, 1},
  {&__pyx_n_s__GetValueMin, __pyx_k__GetValueMin, sizeof(__pyx_k__GetValueMin), 0, 0, 1, 1},
  {&__pyx_n_s__GetValueUnits, __pyx_k__GetValueUnits, sizeof(__pyx_k__GetValueUnits), 0, 0, 1, 1},
  {&__pyx_n_s__Group, __pyx_k__Group, sizeof(__pyx_k__Group), 0, 0, 1, 1},
  {&__pyx_n_s__Int, __pyx_k__Int, sizeof(__pyx_k__Int), 0, 0, 1, 1},
  {&__pyx_n_s__IsBridgeController, __pyx_k__IsBridgeController, sizeof(__pyx_k__IsBridgeController), 0, 0, 1, 1},
  {&__pyx_n_s__IsNodeBeamingDevice, __pyx_k__IsNodeBeamingDevice, sizeof(__pyx_k__IsNodeBeamingDevice), 0, 0, 1, 1},
  {&__pyx_n_s__IsNodeInfoReceived, __pyx_k__IsNodeInfoReceived, sizeof(__pyx_k__IsNodeInfoReceived), 0, 0, 1, 1},
  {&__pyx_n_s__IsNodeRoutingDevice, __pyx_k__IsNodeRoutingDevice, sizeof(__pyx_k__IsNodeRoutingDevice), 0, 0, 1, 1},
  {&__pyx_n_s__IsPrimaryController, __pyx_k__IsPrimaryController, sizeof(__pyx_k__IsPrimaryController), 0, 0, 1, 1},
  {&__pyx_n_s__IsValueReadOnly, __pyx_k__IsValueReadOnly, sizeof(__pyx_k__IsValueReadOnly), 0, 0, 1, 1},
  {&__pyx_n_s__IsValueSet, __pyx_k__IsValueSet, sizeof(__pyx_k__IsValueSet), 0, 0, 1, 1},
  {&__pyx_n_s__IsValueWriteOnly, __pyx_k__IsValueWriteOnly, sizeof(__pyx_k__IsValueWriteOnly), 0, 0, 1, 1},
  {&__pyx_n_s__List, __pyx_k__List, sizeof(__pyx_k__List), 0, 0, 1, 1},
  {&__pyx_n_s__Lock, __pyx_k__Lock, sizeof(__pyx_k__Lock), 0, 0, 1, 1},
  {&__pyx_n_s__LogDriverStatistics, __pyx_k__LogDriverStatistics, sizeof(__pyx_k__LogDriverStatistics), 0, 0, 1, 1},
  {&__pyx_n_s__MsgComplete, __pyx_k__MsgComplete, sizeof(__pyx_k__MsgComplete), 0, 0, 1, 1},
  {&__pyx_n_s__NodeAdded, __pyx_k__NodeAdded, sizeof(__pyx_k__NodeAdded), 0, 0, 1, 1},
  {&__pyx_n_s__NodeEvent, __pyx_k__NodeEvent, sizeof(__pyx_k__NodeEvent), 0, 0, 1, 1},
  {&__pyx_n_s__NodeNaming, __pyx_k__NodeNaming, sizeof(__pyx_k__NodeNaming), 0, 0, 1, 1},
  {&__pyx_n_s__NodeNew, __pyx_k__NodeNew, sizeof(__pyx_k__NodeNew), 0, 0, 1, 1},
  {&__pyx_n_s__NodeProtocolInfo, __pyx_k__NodeProtocolInfo, sizeof(__pyx_k__NodeProtocolInfo), 0, 0, 1, 1},
  {&__pyx_n_s__NodeQueriesComplete, __pyx_k__NodeQueriesComplete, sizeof(__pyx_k__NodeQueriesComplete), 0, 0, 1, 1},
  {&__pyx_n_s__NodeRemoved, __pyx_k__NodeRemoved, sizeof(__pyx_k__NodeRemoved), 0, 0, 1, 1},
  {&__pyx_n_s__PYLIBRARY, __pyx_k__PYLIBRARY, sizeof(__pyx_k__PYLIBRARY), 0, 0, 1, 1},
  {&__pyx_n_s__PollingDisabled, __pyx_k__PollingDisabled, sizeof(__pyx_k__PollingDisabled), 0, 0, 1, 1},
  {&__pyx_n_s__PollingEnabled, __pyx_k__PollingEnabled, sizeof(__pyx_k__PollingEnabled), 0, 0, 1, 1},
  {&__pyx_n_s__PressButton, __pyx_k__PressButton, sizeof(__pyx_k__PressButton), 0, 0, 1, 1},
  {&__pyx_n_s__PyGenres, __pyx_k__PyGenres, sizeof(__pyx_k__PyGenres), 0, 0, 1, 1},
  {&__pyx_n_s__PyNotifications, __pyx_k__PyNotifications, sizeof(__pyx_k__PyNotifications), 0, 0, 1, 1},
  {&__pyx_n_s__PyValueTypes, __pyx_k__PyValueTypes, sizeof(__pyx_k__PyValueTypes), 0, 0, 1, 1},
  {&__pyx_n_s__RefreshNodeInfo, __pyx_k__RefreshNodeInfo, sizeof(__pyx_k__RefreshNodeInfo), 0, 0, 1, 1},
  {&__pyx_n_s__RefreshValue, __pyx_k__RefreshValue, sizeof(__pyx_k__RefreshValue), 0, 0, 1, 1},
  {&__pyx_n_s__ReleaseButton, __pyx_k__ReleaseButton, sizeof(__pyx_k__ReleaseButton), 0, 0, 1, 1},
  {&__pyx_n_s__RemoveDriver, __pyx_k__RemoveDriver, sizeof(__pyx_k__RemoveDriver), 0, 0, 1, 1},
  {&__pyx_n_s__RemoveScene, __pyx_k__RemoveScene, sizeof(__pyx_k__RemoveScene), 0, 0, 1, 1},
  {&__pyx_n_s__RemoveSwitchPoint, __pyx_k__RemoveSwitchPoint, sizeof(__pyx_k__RemoveSwitchPoint), 0, 0, 1, 1},
  {&__pyx_n_s__RequestConfigParam, __pyx_k__RequestConfigParam, sizeof(__pyx_k__RequestConfigParam), 0, 0, 1, 1},
  {&__pyx_n_s__RequestNodeDynamic, __pyx_k__RequestNodeDynamic, sizeof(__pyx_k__RequestNodeDynamic), 0, 0, 1, 1},
  {&__pyx_n_s__RequestNodeState, __pyx_k__RequestNodeState, sizeof(__pyx_k__RequestNodeState), 0, 0, 1, 1},
  {&__pyx_n_s__ResetController, __pyx_k__ResetController, sizeof(__pyx_k__ResetController), 0, 0, 1, 1},
  {&__pyx_n_s__SceneExists, __pyx_k__SceneExists, sizeof(__pyx_k__SceneExists), 0, 0, 1, 1},
  {&__pyx_n_s__Schedule, __pyx_k__Schedule, sizeof(__pyx_k__Schedule), 0, 0, 1, 1},
  {&__pyx_n_s__SetConfigParam, __pyx_k__SetConfigParam, sizeof(__pyx_k__SetConfigParam), 0, 0, 1, 1},
  {&__pyx_n_s__SetNodeLevel, __pyx_k__SetNodeLevel, sizeof(__pyx_k__SetNodeLevel), 0, 0, 1, 1},
  {&__pyx_n_s__SetNodeLocation, __pyx_k__SetNodeLocation, sizeof(__pyx_k__SetNodeLocation), 0, 0, 1, 1},
  {&__pyx_n_s__SetNodeName, __pyx_k__SetNodeName, sizeof(__pyx_k__SetNodeName), 0, 0, 1, 1},
  {&__pyx_n_s__SetNodeOff, __pyx_k__SetNodeOff, sizeof(__pyx_k__SetNodeOff), 0, 0, 1, 1},
  {&__pyx_n_s__SetNodeOn, __pyx_k__SetNodeOn, sizeof(__pyx_k__SetNodeOn), 0, 0, 1, 1},
  {&__pyx_n_s__SetNodeProductName, __pyx_k__SetNodeProductName, sizeof(__pyx_k__SetNodeProductName), 0, 0, 1, 1},
  {&__pyx_n_s__SetPollIntensity, __pyx_k__SetPollIntensity, sizeof(__pyx_k__SetPollIntensity), 0, 0, 1, 1},
  {&__pyx_n_s__SetPollInterval, __pyx_k__SetPollInterval, sizeof(__pyx_k__SetPollInterval), 0, 0, 1, 1},
  {&__pyx_n_s__SetSceneLabel, __pyx_k__SetSceneLabel, sizeof(__pyx_k__SetSceneLabel), 0, 0, 1, 1},
  {&__pyx_n_s__SetSceneValue, __pyx_k__SetSceneValue, sizeof(__pyx_k__SetSceneValue), 0, 0, 1, 1},
  {&__pyx_n_s__SetSwitchPoint, __pyx_k__SetSwitchPoint, sizeof(__pyx_k__SetSwitchPoint), 0, 0, 1, 1},
  {&__pyx_n_s__SetValue, __pyx_k__SetValue, sizeof(__pyx_k__SetValue), 0, 0, 1, 1},
  {&__pyx_n_s__SetValueHelp, __pyx_k__SetValueHelp, sizeof(__pyx_k__SetValueHelp), 0, 0, 1, 1},
  {&__pyx_n_s__SetValueLabel, __pyx_k__SetValueLabel, sizeof(__pyx_k__SetValueLabel), 0, 0, 1, 1},
  {&__pyx_n_s__SetValueUnits, __pyx_k__SetValueUnits, sizeof(__pyx_k__SetValueUnits), 0, 0, 1, 1},
  {&__pyx_n_s__Short, __pyx_k__Short, sizeof(__pyx_k__Short), 0, 0, 1, 1},
  {&__pyx_n_s__SoftReset, __pyx_k__SoftReset, sizeof(__pyx_k__SoftReset), 0, 0, 1, 1},
  {&__pyx_n_s__String, __pyx_k__String, sizeof(__pyx_k__String), 0, 0, 1, 1},
  {&__pyx_n_s__SwitchAllOff, __pyx_k__SwitchAllOff, sizeof(__pyx_k__SwitchAllOff), 0, 0, 1, 1},
  {&__pyx_n_s__SwitchAllOn, __pyx_k__SwitchAllOn, sizeof(__pyx_k__SwitchAllOn), 0, 0, 1, 1},
  {&__pyx_n_s__System, __pyx_k__System, sizeof(__pyx_k__System), 0, 0, 1, 1},
  {&__pyx_n_s__User, __pyx_k__User, sizeof(__pyx_k__User), 0, 0, 1, 1},
  {&__pyx_n_s__ValueAdded, __pyx_k__ValueAdded, sizeof(__pyx_k__ValueAdded), 0, 0, 1, 1},
  {&__pyx_n_s__ValueChanged, __pyx_k__ValueChanged, sizeof(__pyx_k__ValueChanged), 0, 0, 1, 1},
  {&__pyx_n_s__ValueError, __pyx_k__ValueError, sizeof(__pyx_k__ValueError), 0, 0, 1, 1},
  {&__pyx_n_s__ValueRefreshed, __pyx_k__ValueRefreshed, sizeof(__pyx_k__ValueRefreshed), 0, 0, 1, 1},
  {&__pyx_n_s__ValueRemoved, __pyx_k__ValueRemoved, sizeof(__pyx_k__ValueRemoved), 0, 0, 1, 1},
  {&__pyx_n_s__WriteConfig, __pyx_k__WriteConfig, sizeof(__pyx_k__WriteConfig), 0, 0, 1, 1},
  {&__pyx_n_s____doc__, __pyx_k____doc__, sizeof(__pyx_k____doc__), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s___watcherCallback, __pyx_k___watcherCallback, sizeof(__pyx_k___watcherCallback), 0, 0, 1, 1},
  {&__pyx_n_s__a, __pyx_k__a, sizeof(__pyx_k__a), 0, 0, 1, 1},
  {&__pyx_n_s__add, __pyx_k__add, sizeof(__pyx_k__add), 0, 0, 1, 1},
  {&__pyx_n_s__at, __pyx_k__at, sizeof(__pyx_k__at), 0, 0, 1, 1},
  {&__pyx_n_s__b, __pyx_k__b, sizeof(__pyx_k__b), 0, 0, 1, 1},
  {&__pyx_n_s__c, __pyx_k__c, sizeof(__pyx_k__c), 0, 0, 1, 1},
  {&__pyx_n_s__c_str, __pyx_k__c_str, sizeof(__pyx_k__c_str), 0, 0, 1, 1},
  {&__pyx_n_s__className, __pyx_k__className, sizeof(__pyx_k__className), 0, 0, 1, 1},
  {&__pyx_n_s__classVersion, __pyx_k__classVersion, sizeof(__pyx_k__classVersion), 0, 0, 1, 1},
  {&__pyx_n_s__commandClass, __pyx_k__commandClass, sizeof(__pyx_k__commandClass), 0, 0, 1, 1},
  {&__pyx_n_s__commandClassId, __pyx_k__commandClassId, sizeof(__pyx_k__commandClassId), 0, 0, 1, 1},
  {&__pyx_n_s__doc, __pyx_k__doc, sizeof(__pyx_k__doc), 0, 0, 1, 1},
  {&__pyx_n_s__end, __pyx_k__end, sizeof(__pyx_k__end), 0, 0, 1, 1},
  {&__pyx_n_s__event, __pyx_k__event, sizeof(__pyx_k__event), 0, 0, 1, 1},
  {&__pyx_n_s__exists, __pyx_k__exists, sizeof(__pyx_k__exists), 0, 0, 1, 1},
  {&__pyx_n_s__find, __pyx_k__find, sizeof(__pyx_k__find), 0, 0, 1, 1},
  {&__pyx_n_s__genre, __pyx_k__genre, sizeof(__pyx_k__genre), 0, 0, 1, 1},
  {&__pyx_n_s__groupIdx, __pyx_k__groupIdx, sizeof(__pyx_k__groupIdx), 0, 0, 1, 1},
  {&__pyx_n_s__groupidx, __pyx_k__groupidx, sizeof(__pyx_k__groupidx), 0, 0, 1, 1},
  {&__pyx_n_s__help, __pyx_k__help, sizeof(__pyx_k__help), 0, 0, 1, 1},
  {&__pyx_n_s__homeId, __pyx_k__homeId, sizeof(__pyx_k__homeId), 0, 0, 1, 1},
  {&__pyx_n_s__homeid, __pyx_k__homeid, sizeof(__pyx_k__homeid), 0, 0, 1, 1},
  {&__pyx_n_s__hours, __pyx_k__hours, sizeof(__pyx_k__hours), 0, 0, 1, 1},
  {&__pyx_n_s__id, __pyx_k__id, sizeof(__pyx_k__id), 0, 0, 1, 1},
  {&__pyx_n_s__idx, __pyx_k__idx, sizeof(__pyx_k__idx), 0, 0, 1, 1},
  {&__pyx_n_s__index, __pyx_k__index, sizeof(__pyx_k__index), 0, 0, 1, 1},
  {&__pyx_n_s__insert, __pyx_k__insert, sizeof(__pyx_k__insert), 0, 0, 1, 1},
  {&__pyx_n_s__instance, __pyx_k__instance, sizeof(__pyx_k__instance), 0, 0, 1, 1},
  {&__pyx_n_s__intensity, __pyx_k__intensity, sizeof(__pyx_k__intensity), 0, 0, 1, 1},
  {&__pyx_n_s__isPolled, __pyx_k__isPolled, sizeof(__pyx_k__isPolled), 0, 0, 1, 1},
  {&__pyx_n_s__join, __pyx_k__join, sizeof(__pyx_k__join), 0, 0, 1, 1},
  {&__pyx_n_s__label, __pyx_k__label, sizeof(__pyx_k__label), 0, 0, 1, 1},
  {&__pyx_n_s__level, __pyx_k__level, sizeof(__pyx_k__level), 0, 0, 1, 1},
  {&__pyx_n_s__libopenzwave, __pyx_k__libopenzwave, sizeof(__pyx_k__libopenzwave), 0, 0, 1, 1},
  {&__pyx_n_s__location, __pyx_k__location, sizeof(__pyx_k__location), 0, 0, 1, 1},
  {&__pyx_n_s__manager, __pyx_k__manager, sizeof(__pyx_k__manager), 0, 0, 1, 1},
  {&__pyx_n_s__manufacturerName, __pyx_k__manufacturerName, sizeof(__pyx_k__manufacturerName), 0, 0, 1, 1},
  {&__pyx_n_s__milliseconds, __pyx_k__milliseconds, sizeof(__pyx_k__milliseconds), 0, 0, 1, 1},
  {&__pyx_n_s__minutes, __pyx_k__minutes, sizeof(__pyx_k__minutes), 0, 0, 1, 1},
  {&__pyx_n_s__name, __pyx_k__name, sizeof(__pyx_k__name), 0, 0, 1, 1},
  {&__pyx_n_s__nodeId, __pyx_k__nodeId, sizeof(__pyx_k__nodeId), 0, 0, 1, 1},
  {&__pyx_n_s__nodeid, __pyx_k__nodeid, sizeof(__pyx_k__nodeid), 0, 0, 1, 1},
  {&__pyx_n_s__notificationType, __pyx_k__notificationType, sizeof(__pyx_k__notificationType), 0, 0, 1, 1},
  {&__pyx_n_s__options, __pyx_k__options, sizeof(__pyx_k__options), 0, 0, 1, 1},
  {&__pyx_n_s__os, __pyx_k__os, sizeof(__pyx_k__os), 0, 0, 1, 1},
  {&__pyx_n_s__param, __pyx_k__param, sizeof(__pyx_k__param), 0, 0, 1, 1},
  {&__pyx_n_s__path, __pyx_k__path, sizeof(__pyx_k__path), 0, 0, 1, 1},
  {&__pyx_n_s__productName, __pyx_k__productName, sizeof(__pyx_k__productName), 0, 0, 1, 1},
  {&__pyx_n_s__range, __pyx_k__range, sizeof(__pyx_k__range), 0, 0, 1, 1},
  {&__pyx_n_s__readOnly, __pyx_k__readOnly, sizeof(__pyx_k__readOnly), 0, 0, 1, 1},
  {&__pyx_n_s__riverReset, __pyx_k__riverReset, sizeof(__pyx_k__riverReset), 0, 0, 1, 1},
  {&__pyx_n_s__s_ACKCnt, __pyx_k__s_ACKCnt, sizeof(__pyx_k__s_ACKCnt), 0, 0, 1, 1},
  {&__pyx_n_s__s_ACKWaiting, __pyx_k__s_ACKWaiting, sizeof(__pyx_k__s_ACKWaiting), 0, 0, 1, 1},
  {&__pyx_n_s__s_CANCnt, __pyx_k__s_CANCnt, sizeof(__pyx_k__s_CANCnt), 0, 0, 1, 1},
  {&__pyx_n_s__s_NAKCnt, __pyx_k__s_NAKCnt, sizeof(__pyx_k__s_NAKCnt), 0, 0, 1, 1},
  {&__pyx_n_s__s_OOFCnt, __pyx_k__s_OOFCnt, sizeof(__pyx_k__s_OOFCnt), 0, 0, 1, 1},
  {&__pyx_n_s__s_SOFCnt, __pyx_k__s_SOFCnt, sizeof(__pyx_k__s_SOFCnt), 0, 0, 1, 1},
  {&__pyx_n_s__s_badChecksum, __pyx_k__s_badChecksum, sizeof(__pyx_k__s_badChecksum), 0, 0, 1, 1},
  {&__pyx_n_s__s_controllerReadCnt, __pyx_k__s_controllerReadCnt, sizeof(__pyx_k__s_controllerReadCnt), 0, 0, 1, 1},
  {&__pyx_n_s__s_dropped, __pyx_k__s_dropped, sizeof(__pyx_k__s_dropped), 0, 0, 1, 1},
  {&__pyx_n_s__s_readAborts, __pyx_k__s_readAborts, sizeof(__pyx_k__s_readAborts), 0, 0, 1, 1},
  {&__pyx_n_s__s_readCnt, __pyx_k__s_readCnt, sizeof(__pyx_k__s_readCnt), 0, 0, 1, 1},
  {&__pyx_n_s__s_retries, __pyx_k__s_retries, sizeof(__pyx_k__s_retries), 0, 0, 1, 1},
  {&__pyx_n_s__s_writeCnt, __pyx_k__s_writeCnt, sizeof(__pyx_k__s_writeCnt), 0, 0, 1, 1},
  {&__pyx_n_s__sceneid, __pyx_k__sceneid, sizeof(__pyx_k__sceneid), 0, 0, 1, 1},
  {&__pyx_n_s__self, __pyx_k__self, sizeof(__pyx_k__self), 0, 0, 1, 1},
  {&__pyx_n_s__setDoc, __pyx_k__setDoc, sizeof(__pyx_k__setDoc), 0, 0, 1, 1},
  {&__pyx_n_s__setback, __pyx_k__setback, sizeof(__pyx_k__setback), 0, 0, 1, 1},
  {&__pyx_n_s__targetnodeid, __pyx_k__targetnodeid, sizeof(__pyx_k__targetnodeid), 0, 0, 1, 1},
  {&__pyx_n_s__type, __pyx_k__type, sizeof(__pyx_k__type), 0, 0, 1, 1},
  {&__pyx_n_s__unit, __pyx_k__unit, sizeof(__pyx_k__unit), 0, 0, 1, 1},
  {&__pyx_n_s__units, __pyx_k__units, sizeof(__pyx_k__units), 0, 0, 1, 1},
  {&__pyx_n_s__value, __pyx_k__value, sizeof(__pyx_k__value), 0, 0, 1, 1},
  {&__pyx_n_s__valueId, __pyx_k__valueId, sizeof(__pyx_k__valueId), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetName(__pyx_b, __pyx_n_s__range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetName(__pyx_b, __pyx_n_s__ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants");

  /* "libopenzwave.pyx":2421
 *         self._watcherCallback = pythonfunc # need to keep a reference to this
 *         if not self.manager.AddWatcher(callback, <void*>pythonfunc):
 *             raise ValueError("call to AddWatcher failed")             # <<<<<<<<<<<<<<
 * #
 * # -----------------------------------------------------------------------------
 */
  __pyx_k_tuple_16 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_16));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_15));
  PyTuple_SET_ITEM(__pyx_k_tuple_16, 0, ((PyObject *)__pyx_kp_s_15));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_15));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_16));

  /* "libopenzwave.pyx":218
 * 
 * PyNotifications = [
 *     EnumWithDoc('ValueAdded').setDoc("A new node value has been added to OpenZWave's list. These notifications occur after a node has been discovered, and details of its command classes have been received.  Each command class may generate one or more values depending on the complexity of the item being represented."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ValueRemoved').setDoc("A node value has been removed from OpenZWave's list.  This only occurs when a node is removed."),
 *     EnumWithDoc('ValueChanged').setDoc("A node value has been updated from the Z-Wave network and it is different from the previous value."),
 */
  __pyx_k_tuple_21 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_21));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__ValueAdded));
  PyTuple_SET_ITEM(__pyx_k_tuple_21, 0, ((PyObject *)__pyx_n_s__ValueAdded));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__ValueAdded));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_21));
  __pyx_k_tuple_23 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_23));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_22));
  PyTuple_SET_ITEM(__pyx_k_tuple_23, 0, ((PyObject *)__pyx_kp_s_22));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_22));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_23));

  /* "libopenzwave.pyx":219
 * PyNotifications = [
 *     EnumWithDoc('ValueAdded').setDoc("A new node value has been added to OpenZWave's list. These notifications occur after a node has been discovered, and details of its command classes have been received.  Each command class may generate one or more values depending on the complexity of the item being represented."),
 *     EnumWithDoc('ValueRemoved').setDoc("A node value has been removed from OpenZWave's list.  This only occurs when a node is removed."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ValueChanged').setDoc("A node value has been updated from the Z-Wave network and it is different from the previous value."),
 *     EnumWithDoc('ValueRefreshed').setDoc("A node value has been updated from the Z-Wave network."),
 */
  __pyx_k_tuple_24 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_24));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__ValueRemoved));
  PyTuple_SET_ITEM(__pyx_k_tuple_24, 0, ((PyObject *)__pyx_n_s__ValueRemoved));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__ValueRemoved));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_24));
  __pyx_k_tuple_26 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_26));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_25));
  PyTuple_SET_ITEM(__pyx_k_tuple_26, 0, ((PyObject *)__pyx_kp_s_25));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_25));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_26));

  /* "libopenzwave.pyx":220
 *     EnumWithDoc('ValueAdded').setDoc("A new node value has been added to OpenZWave's list. These notifications occur after a node has been discovered, and details of its command classes have been received.  Each command class may generate one or more values depending on the complexity of the item being represented."),
 *     EnumWithDoc('ValueRemoved').setDoc("A node value has been removed from OpenZWave's list.  This only occurs when a node is removed."),
 *     EnumWithDoc('ValueChanged').setDoc("A node value has been updated from the Z-Wave network and it is different from the previous value."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ValueRefreshed').setDoc("A node value has been updated from the Z-Wave network."),
 *     EnumWithDoc('Group').setDoc("The associations for the node have changed. The application should rebuild any group information it holds about the node."),
 */
  __pyx_k_tuple_27 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_27));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__ValueChanged));
  PyTuple_SET_ITEM(__pyx_k_tuple_27, 0, ((PyObject *)__pyx_n_s__ValueChanged));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__ValueChanged));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_27));
  __pyx_k_tuple_29 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_29));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_28));
  PyTuple_SET_ITEM(__pyx_k_tuple_29, 0, ((PyObject *)__pyx_kp_s_28));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_28));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_29));

  /* "libopenzwave.pyx":221
 *     EnumWithDoc('ValueRemoved').setDoc("A node value has been removed from OpenZWave's list.  This only occurs when a node is removed."),
 *     EnumWithDoc('ValueChanged').setDoc("A node value has been updated from the Z-Wave network and it is different from the previous value."),
 *     EnumWithDoc('ValueRefreshed').setDoc("A node value has been updated from the Z-Wave network."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Group').setDoc("The associations for the node have changed. The application should rebuild any group information it holds about the node."),
 *     EnumWithDoc('NodeNew').setDoc("A new node has been found (not already stored in zwcfg*.xml file)."),
 */
  __pyx_k_tuple_30 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_30));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__ValueRefreshed));
  PyTuple_SET_ITEM(__pyx_k_tuple_30, 0, ((PyObject *)__pyx_n_s__ValueRefreshed));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__ValueRefreshed));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_30));
  __pyx_k_tuple_32 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_32));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_31));
  PyTuple_SET_ITEM(__pyx_k_tuple_32, 0, ((PyObject *)__pyx_kp_s_31));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_31));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_32));

  /* "libopenzwave.pyx":222
 *     EnumWithDoc('ValueChanged').setDoc("A node value has been updated from the Z-Wave network and it is different from the previous value."),
 *     EnumWithDoc('ValueRefreshed').setDoc("A node value has been updated from the Z-Wave network."),
 *     EnumWithDoc('Group').setDoc("The associations for the node have changed. The application should rebuild any group information it holds about the node."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeNew').setDoc("A new node has been found (not already stored in zwcfg*.xml file)."),
 *     EnumWithDoc('NodeAdded').setDoc("A new node has been added to OpenZWave's list.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),
 */
  __pyx_k_tuple_33 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_33));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Group));
  PyTuple_SET_ITEM(__pyx_k_tuple_33, 0, ((PyObject *)__pyx_n_s__Group));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Group));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_33));
  __pyx_k_tuple_35 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_35)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_35));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_34));
  PyTuple_SET_ITEM(__pyx_k_tuple_35, 0, ((PyObject *)__pyx_kp_s_34));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_34));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_35));

  /* "libopenzwave.pyx":223
 *     EnumWithDoc('ValueRefreshed').setDoc("A node value has been updated from the Z-Wave network."),
 *     EnumWithDoc('Group').setDoc("The associations for the node have changed. The application should rebuild any group information it holds about the node."),
 *     EnumWithDoc('NodeNew').setDoc("A new node has been found (not already stored in zwcfg*.xml file)."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeAdded').setDoc("A new node has been added to OpenZWave's list.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),
 *     EnumWithDoc('NodeRemoved').setDoc("A node has been removed from OpenZWave's list.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),
 */
  __pyx_k_tuple_36 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_36)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_36));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NodeNew));
  PyTuple_SET_ITEM(__pyx_k_tuple_36, 0, ((PyObject *)__pyx_n_s__NodeNew));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NodeNew));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_36));
  __pyx_k_tuple_38 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_38)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_38));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_37));
  PyTuple_SET_ITEM(__pyx_k_tuple_38, 0, ((PyObject *)__pyx_kp_s_37));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_37));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_38));

  /* "libopenzwave.pyx":224
 *     EnumWithDoc('Group').setDoc("The associations for the node have changed. The application should rebuild any group information it holds about the node."),
 *     EnumWithDoc('NodeNew').setDoc("A new node has been found (not already stored in zwcfg*.xml file)."),
 *     EnumWithDoc('NodeAdded').setDoc("A new node has been added to OpenZWave's list.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeRemoved').setDoc("A node has been removed from OpenZWave's list.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),
 *     EnumWithDoc('NodeProtocolInfo').setDoc("Basic node information has been receievd, such as whether the node is a listening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),
 */
  __pyx_k_tuple_39 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_39)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_39));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NodeAdded));
  PyTuple_SET_ITEM(__pyx_k_tuple_39, 0, ((PyObject *)__pyx_n_s__NodeAdded));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NodeAdded));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_39));
  __pyx_k_tuple_41 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_41)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_41));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_40));
  PyTuple_SET_ITEM(__pyx_k_tuple_41, 0, ((PyObject *)__pyx_kp_s_40));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_40));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_41));

  /* "libopenzwave.pyx":225
 *     EnumWithDoc('NodeNew').setDoc("A new node has been found (not already stored in zwcfg*.xml file)."),
 *     EnumWithDoc('NodeAdded').setDoc("A new node has been added to OpenZWave's list.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),
 *     EnumWithDoc('NodeRemoved').setDoc("A node has been removed from OpenZWave's list.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeProtocolInfo').setDoc("Basic node information has been receievd, such as whether the node is a listening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),
 *     EnumWithDoc('NodeNaming').setDoc("One of the node names has changed (name, manufacturer, product)."),
 */
  __pyx_k_tuple_42 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_42)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_42));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NodeRemoved));
  PyTuple_SET_ITEM(__pyx_k_tuple_42, 0, ((PyObject *)__pyx_n_s__NodeRemoved));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NodeRemoved));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_42));
  __pyx_k_tuple_44 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_44)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_44));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_43));
  PyTuple_SET_ITEM(__pyx_k_tuple_44, 0, ((PyObject *)__pyx_kp_s_43));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_43));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_44));

  /* "libopenzwave.pyx":226
 *     EnumWithDoc('NodeAdded').setDoc("A new node has been added to OpenZWave's list.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),
 *     EnumWithDoc('NodeRemoved').setDoc("A node has been removed from OpenZWave's list.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),
 *     EnumWithDoc('NodeProtocolInfo').setDoc("Basic node information has been receievd, such as whether the node is a listening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeNaming').setDoc("One of the node names has changed (name, manufacturer, product)."),
 *     EnumWithDoc('NodeEvent').setDoc("A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),
 */
  __pyx_k_tuple_45 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_45)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_45));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NodeProtocolInfo));
  PyTuple_SET_ITEM(__pyx_k_tuple_45, 0, ((PyObject *)__pyx_n_s__NodeProtocolInfo));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NodeProtocolInfo));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_45));
  __pyx_k_tuple_47 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_47)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_47));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_46));
  PyTuple_SET_ITEM(__pyx_k_tuple_47, 0, ((PyObject *)__pyx_kp_s_46));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_46));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_47));

  /* "libopenzwave.pyx":227
 *     EnumWithDoc('NodeRemoved').setDoc("A node has been removed from OpenZWave's list.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),
 *     EnumWithDoc('NodeProtocolInfo').setDoc("Basic node information has been receievd, such as whether the node is a listening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),
 *     EnumWithDoc('NodeNaming').setDoc("One of the node names has changed (name, manufacturer, product)."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeEvent').setDoc("A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),
 *     EnumWithDoc('PollingDisabled').setDoc("Polling of a node has been successfully turned off by a call to Manager::DisablePoll."),
 */
  __pyx_k_tuple_48 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_48)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_48));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NodeNaming));
  PyTuple_SET_ITEM(__pyx_k_tuple_48, 0, ((PyObject *)__pyx_n_s__NodeNaming));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NodeNaming));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_48));
  __pyx_k_tuple_50 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_50)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_50));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_49));
  PyTuple_SET_ITEM(__pyx_k_tuple_50, 0, ((PyObject *)__pyx_kp_s_49));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_49));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_50));

  /* "libopenzwave.pyx":228
 *     EnumWithDoc('NodeProtocolInfo').setDoc("Basic node information has been receievd, such as whether the node is a listening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),
 *     EnumWithDoc('NodeNaming').setDoc("One of the node names has changed (name, manufacturer, product)."),
 *     EnumWithDoc('NodeEvent').setDoc("A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('PollingDisabled').setDoc("Polling of a node has been successfully turned off by a call to Manager::DisablePoll."),
 *     EnumWithDoc('PollingEnabled').setDoc("Polling of a node has been successfully turned on by a call to Manager::EnablePoll."),
 */
  __pyx_k_tuple_51 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_51)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_51));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NodeEvent));
  PyTuple_SET_ITEM(__pyx_k_tuple_51, 0, ((PyObject *)__pyx_n_s__NodeEvent));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NodeEvent));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_51));
  __pyx_k_tuple_53 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_53)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_53));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_52));
  PyTuple_SET_ITEM(__pyx_k_tuple_53, 0, ((PyObject *)__pyx_kp_s_52));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_52));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_53));

  /* "libopenzwave.pyx":229
 *     EnumWithDoc('NodeNaming').setDoc("One of the node names has changed (name, manufacturer, product)."),
 *     EnumWithDoc('NodeEvent').setDoc("A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),
 *     EnumWithDoc('PollingDisabled').setDoc("Polling of a node has been successfully turned off by a call to Manager::DisablePoll."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('PollingEnabled').setDoc("Polling of a node has been successfully turned on by a call to Manager::EnablePoll."),
 *     EnumWithDoc('CreateButton').setDoc("Handheld controller button event created."),
 */
  __pyx_k_tuple_54 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_54)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_54));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__PollingDisabled));
  PyTuple_SET_ITEM(__pyx_k_tuple_54, 0, ((PyObject *)__pyx_n_s__PollingDisabled));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__PollingDisabled));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_54));
  __pyx_k_tuple_56 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_56)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_56));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_55));
  PyTuple_SET_ITEM(__pyx_k_tuple_56, 0, ((PyObject *)__pyx_kp_s_55));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_55));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_56));

  /* "libopenzwave.pyx":230
 *     EnumWithDoc('NodeEvent').setDoc("A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),
 *     EnumWithDoc('PollingDisabled').setDoc("Polling of a node has been successfully turned off by a call to Manager::DisablePoll."),
 *     EnumWithDoc('PollingEnabled').setDoc("Polling of a node has been successfully turned on by a call to Manager::EnablePoll."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('CreateButton').setDoc("Handheld controller button event created."),
 *     EnumWithDoc('DeleteButton').setDoc("Handheld controller button event deleted."),
 */
  __pyx_k_tuple_57 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_57)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_57));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__PollingEnabled));
  PyTuple_SET_ITEM(__pyx_k_tuple_57, 0, ((PyObject *)__pyx_n_s__PollingEnabled));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__PollingEnabled));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_57));
  __pyx_k_tuple_59 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_59)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_59));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_58));
  PyTuple_SET_ITEM(__pyx_k_tuple_59, 0, ((PyObject *)__pyx_kp_s_58));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_58));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_59));

  /* "libopenzwave.pyx":231
 *     EnumWithDoc('PollingDisabled').setDoc("Polling of a node has been successfully turned off by a call to Manager::DisablePoll."),
 *     EnumWithDoc('PollingEnabled').setDoc("Polling of a node has been successfully turned on by a call to Manager::EnablePoll."),
 *     EnumWithDoc('CreateButton').setDoc("Handheld controller button event created."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DeleteButton').setDoc("Handheld controller button event deleted."),
 *     EnumWithDoc('ButtonOn').setDoc("Handheld controller button on pressed event."),
 */
  __pyx_k_tuple_60 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_60)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_60));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__CreateButton));
  PyTuple_SET_ITEM(__pyx_k_tuple_60, 0, ((PyObject *)__pyx_n_s__CreateButton));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__CreateButton));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_60));
  __pyx_k_tuple_62 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_62)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_62));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_61));
  PyTuple_SET_ITEM(__pyx_k_tuple_62, 0, ((PyObject *)__pyx_kp_s_61));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_61));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_62));

  /* "libopenzwave.pyx":232
 *     EnumWithDoc('PollingEnabled').setDoc("Polling of a node has been successfully turned on by a call to Manager::EnablePoll."),
 *     EnumWithDoc('CreateButton').setDoc("Handheld controller button event created."),
 *     EnumWithDoc('DeleteButton').setDoc("Handheld controller button event deleted."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ButtonOn').setDoc("Handheld controller button on pressed event."),
 *     EnumWithDoc('ButtonOff').setDoc("Handheld controller button off pressed event."),
 */
  __pyx_k_tuple_63 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_63)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_63));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__DeleteButton));
  PyTuple_SET_ITEM(__pyx_k_tuple_63, 0, ((PyObject *)__pyx_n_s__DeleteButton));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__DeleteButton));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_63));
  __pyx_k_tuple_65 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_65)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_65));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_64));
  PyTuple_SET_ITEM(__pyx_k_tuple_65, 0, ((PyObject *)__pyx_kp_s_64));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_64));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_65));

  /* "libopenzwave.pyx":233
 *     EnumWithDoc('CreateButton').setDoc("Handheld controller button event created."),
 *     EnumWithDoc('DeleteButton').setDoc("Handheld controller button event deleted."),
 *     EnumWithDoc('ButtonOn').setDoc("Handheld controller button on pressed event."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ButtonOff').setDoc("Handheld controller button off pressed event."),
 *     EnumWithDoc('DriverReady').setDoc("A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),
 */
  __pyx_k_tuple_66 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_66)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_66));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__ButtonOn));
  PyTuple_SET_ITEM(__pyx_k_tuple_66, 0, ((PyObject *)__pyx_n_s__ButtonOn));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__ButtonOn));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_66));
  __pyx_k_tuple_68 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_68)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_68));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_67));
  PyTuple_SET_ITEM(__pyx_k_tuple_68, 0, ((PyObject *)__pyx_kp_s_67));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_67));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_68));

  /* "libopenzwave.pyx":234
 *     EnumWithDoc('DeleteButton').setDoc("Handheld controller button event deleted."),
 *     EnumWithDoc('ButtonOn').setDoc("Handheld controller button on pressed event."),
 *     EnumWithDoc('ButtonOff').setDoc("Handheld controller button off pressed event."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DriverReady').setDoc("A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),
 *     EnumWithDoc('DriverFailed').setDoc("Driver failed to load."),
 */
  __pyx_k_tuple_69 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_69)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_69));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__ButtonOff));
  PyTuple_SET_ITEM(__pyx_k_tuple_69, 0, ((PyObject *)__pyx_n_s__ButtonOff));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__ButtonOff));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_69));
  __pyx_k_tuple_71 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_71)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_71));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_70));
  PyTuple_SET_ITEM(__pyx_k_tuple_71, 0, ((PyObject *)__pyx_kp_s_70));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_70));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_71));

  /* "libopenzwave.pyx":235
 *     EnumWithDoc('ButtonOn').setDoc("Handheld controller button on pressed event."),
 *     EnumWithDoc('ButtonOff').setDoc("Handheld controller button off pressed event."),
 *     EnumWithDoc('DriverReady').setDoc("A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DriverFailed').setDoc("Driver failed to load."),
 *     EnumWithDoc('riverReset').setDoc("All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),
 */
  __pyx_k_tuple_72 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_72)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_72));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__DriverReady));
  PyTuple_SET_ITEM(__pyx_k_tuple_72, 0, ((PyObject *)__pyx_n_s__DriverReady));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__DriverReady));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_72));
  __pyx_k_tuple_74 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_74)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_74));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_73));
  PyTuple_SET_ITEM(__pyx_k_tuple_74, 0, ((PyObject *)__pyx_kp_s_73));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_73));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_74));

  /* "libopenzwave.pyx":236
 *     EnumWithDoc('ButtonOff').setDoc("Handheld controller button off pressed event."),
 *     EnumWithDoc('DriverReady').setDoc("A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),
 *     EnumWithDoc('DriverFailed').setDoc("Driver failed to load."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('riverReset').setDoc("All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),
 *     EnumWithDoc('MsgComplete').setDoc("The last message that was sent is now complete."),
 */
  __pyx_k_tuple_75 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_75)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_75));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__DriverFailed));
  PyTuple_SET_ITEM(__pyx_k_tuple_75, 0, ((PyObject *)__pyx_n_s__DriverFailed));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__DriverFailed));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_75));
  __pyx_k_tuple_77 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_77)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_77));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_76));
  PyTuple_SET_ITEM(__pyx_k_tuple_77, 0, ((PyObject *)__pyx_kp_s_76));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_76));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_77));

  /* "libopenzwave.pyx":237
 *     EnumWithDoc('DriverReady').setDoc("A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),
 *     EnumWithDoc('DriverFailed').setDoc("Driver failed to load."),
 *     EnumWithDoc('riverReset').setDoc("All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('MsgComplete').setDoc("The last message that was sent is now complete."),
 *     EnumWithDoc('EssentialNodeQueriesComplete').setDoc("The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages."),
 */
  __pyx_k_tuple_78 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_78)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_78));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__riverReset));
  PyTuple_SET_ITEM(__pyx_k_tuple_78, 0, ((PyObject *)__pyx_n_s__riverReset));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__riverReset));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_78));
  __pyx_k_tuple_80 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_80)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_80));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_79));
  PyTuple_SET_ITEM(__pyx_k_tuple_80, 0, ((PyObject *)__pyx_kp_s_79));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_79));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_80));

  /* "libopenzwave.pyx":238
 *     EnumWithDoc('DriverFailed').setDoc("Driver failed to load."),
 *     EnumWithDoc('riverReset').setDoc("All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),
 *     EnumWithDoc('MsgComplete').setDoc("The last message that was sent is now complete."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('EssentialNodeQueriesComplete').setDoc("The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages."),
 *     EnumWithDoc('NodeQueriesComplete').setDoc("All the initialisation queries on a node have been completed."),
 */
  __pyx_k_tuple_81 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_81)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_81));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__MsgComplete));
  PyTuple_SET_ITEM(__pyx_k_tuple_81, 0, ((PyObject *)__pyx_n_s__MsgComplete));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__MsgComplete));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_81));
  __pyx_k_tuple_83 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_83)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_83));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_82));
  PyTuple_SET_ITEM(__pyx_k_tuple_83, 0, ((PyObject *)__pyx_kp_s_82));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_82));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_83));

  /* "libopenzwave.pyx":239
 *     EnumWithDoc('riverReset').setDoc("All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),
 *     EnumWithDoc('MsgComplete').setDoc("The last message that was sent is now complete."),
 *     EnumWithDoc('EssentialNodeQueriesComplete').setDoc("The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeQueriesComplete').setDoc("All the initialisation queries on a node have been completed."),
 *     EnumWithDoc('AwakeNodesQueried').setDoc("All awake nodes have been queried, so client application can expected complete data for these nodes."),
 */
  __pyx_k_tuple_85 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_85)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_85));
  __Pyx_INCREF(((PyObject *)__pyx_n_s_84));
  PyTuple_SET_ITEM(__pyx_k_tuple_85, 0, ((PyObject *)__pyx_n_s_84));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s_84));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_85));
  __pyx_k_tuple_87 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_87)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_87));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_86));
  PyTuple_SET_ITEM(__pyx_k_tuple_87, 0, ((PyObject *)__pyx_kp_s_86));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_86));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_87));

  /* "libopenzwave.pyx":240
 *     EnumWithDoc('MsgComplete').setDoc("The last message that was sent is now complete."),
 *     EnumWithDoc('EssentialNodeQueriesComplete').setDoc("The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages."),
 *     EnumWithDoc('NodeQueriesComplete').setDoc("All the initialisation queries on a node have been completed."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('AwakeNodesQueried').setDoc("All awake nodes have been queried, so client application can expected complete data for these nodes."),
 *     EnumWithDoc('AllNodesQueried').setDoc("All nodes have been queried, so client application can expected complete data."),
 */
  __pyx_k_tuple_88 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_88)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_88));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__NodeQueriesComplete));
  PyTuple_SET_ITEM(__pyx_k_tuple_88, 0, ((PyObject *)__pyx_n_s__NodeQueriesComplete));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__NodeQueriesComplete));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_88));
  __pyx_k_tuple_90 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_90)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_90));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_89));
  PyTuple_SET_ITEM(__pyx_k_tuple_90, 0, ((PyObject *)__pyx_kp_s_89));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_89));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_90));

  /* "libopenzwave.pyx":241
 *     EnumWithDoc('EssentialNodeQueriesComplete').setDoc("The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages."),
 *     EnumWithDoc('NodeQueriesComplete').setDoc("All the initialisation queries on a node have been completed."),
 *     EnumWithDoc('AwakeNodesQueried').setDoc("All awake nodes have been queried, so client application can expected complete data for these nodes."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('AllNodesQueried').setDoc("All nodes have been queried, so client application can expected complete data."),
 *     EnumWithDoc('Error').setDoc("An error has occured that we need to report."),
 */
  __pyx_k_tuple_91 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_91)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_91));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__AwakeNodesQueried));
  PyTuple_SET_ITEM(__pyx_k_tuple_91, 0, ((PyObject *)__pyx_n_s__AwakeNodesQueried));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__AwakeNodesQueried));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_91));
  __pyx_k_tuple_93 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_93)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_93));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_92));
  PyTuple_SET_ITEM(__pyx_k_tuple_93, 0, ((PyObject *)__pyx_kp_s_92));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_92));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_93));

  /* "libopenzwave.pyx":242
 *     EnumWithDoc('NodeQueriesComplete').setDoc("All the initialisation queries on a node have been completed."),
 *     EnumWithDoc('AwakeNodesQueried').setDoc("All awake nodes have been queried, so client application can expected complete data for these nodes."),
 *     EnumWithDoc('AllNodesQueried').setDoc("All nodes have been queried, so client application can expected complete data."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Error').setDoc("An error has occured that we need to report."),
 *     ]
 */
  __pyx_k_tuple_94 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_94)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_94));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__AllNodesQueried));
  PyTuple_SET_ITEM(__pyx_k_tuple_94, 0, ((PyObject *)__pyx_n_s__AllNodesQueried));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__AllNodesQueried));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_94));
  __pyx_k_tuple_96 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_96)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_96));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_95));
  PyTuple_SET_ITEM(__pyx_k_tuple_96, 0, ((PyObject *)__pyx_kp_s_95));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_95));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_96));

  /* "libopenzwave.pyx":243
 *     EnumWithDoc('AwakeNodesQueried').setDoc("All awake nodes have been queried, so client application can expected complete data for these nodes."),
 *     EnumWithDoc('AllNodesQueried').setDoc("All nodes have been queried, so client application can expected complete data."),
 *     EnumWithDoc('Error').setDoc("An error has occured that we need to report."),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_k_tuple_97 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_97)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_97));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Error));
  PyTuple_SET_ITEM(__pyx_k_tuple_97, 0, ((PyObject *)__pyx_n_s__Error));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Error));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_97));
  __pyx_k_tuple_99 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_99)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_99));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_98));
  PyTuple_SET_ITEM(__pyx_k_tuple_99, 0, ((PyObject *)__pyx_kp_s_98));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_98));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_99));

  /* "libopenzwave.pyx":248
 * 
 * PyGenres = [
 *     EnumWithDoc('Basic').setDoc(  "The 'level' as controlled by basic commands.  Usually duplicated by another command class."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('User').setDoc(   "Basic values an ordinary user would be interested in."),
 *     EnumWithDoc('Config').setDoc( "Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),
 */
  __pyx_k_tuple_100 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_100)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_100));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Basic));
  PyTuple_SET_ITEM(__pyx_k_tuple_100, 0, ((PyObject *)__pyx_n_s__Basic));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Basic));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_100));
  __pyx_k_tuple_102 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_102)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_102));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_101));
  PyTuple_SET_ITEM(__pyx_k_tuple_102, 0, ((PyObject *)__pyx_kp_s_101));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_101));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_102));

  /* "libopenzwave.pyx":249
 * PyGenres = [
 *     EnumWithDoc('Basic').setDoc(  "The 'level' as controlled by basic commands.  Usually duplicated by another command class."),
 *     EnumWithDoc('User').setDoc(   "Basic values an ordinary user would be interested in."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Config').setDoc( "Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),
 *     EnumWithDoc('System').setDoc( "Values of significance only to users who understand the Z-Wave protocol"),
 */
  __pyx_k_tuple_103 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_103)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_103));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__User));
  PyTuple_SET_ITEM(__pyx_k_tuple_103, 0, ((PyObject *)__pyx_n_s__User));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__User));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_103));
  __pyx_k_tuple_105 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_105)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_105));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_104));
  PyTuple_SET_ITEM(__pyx_k_tuple_105, 0, ((PyObject *)__pyx_kp_s_104));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_104));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_105));

  /* "libopenzwave.pyx":250
 *     EnumWithDoc('Basic').setDoc(  "The 'level' as controlled by basic commands.  Usually duplicated by another command class."),
 *     EnumWithDoc('User').setDoc(   "Basic values an ordinary user would be interested in."),
 *     EnumWithDoc('Config').setDoc( "Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('System').setDoc( "Values of significance only to users who understand the Z-Wave protocol"),
 *     ]
 */
  __pyx_k_tuple_106 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_106)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_106));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Config));
  PyTuple_SET_ITEM(__pyx_k_tuple_106, 0, ((PyObject *)__pyx_n_s__Config));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Config));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_106));
  __pyx_k_tuple_108 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_108)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_108));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_107));
  PyTuple_SET_ITEM(__pyx_k_tuple_108, 0, ((PyObject *)__pyx_kp_s_107));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_107));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_108));

  /* "libopenzwave.pyx":251
 *     EnumWithDoc('User').setDoc(   "Basic values an ordinary user would be interested in."),
 *     EnumWithDoc('Config').setDoc( "Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),
 *     EnumWithDoc('System').setDoc( "Values of significance only to users who understand the Z-Wave protocol"),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_k_tuple_109 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_109)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_109));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__System));
  PyTuple_SET_ITEM(__pyx_k_tuple_109, 0, ((PyObject *)__pyx_n_s__System));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__System));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_109));
  __pyx_k_tuple_111 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_111)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_111));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_110));
  PyTuple_SET_ITEM(__pyx_k_tuple_111, 0, ((PyObject *)__pyx_kp_s_110));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_110));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_111));

  /* "libopenzwave.pyx":255
 * 
 * PyValueTypes = [
 *     EnumWithDoc('Bool').setDoc(     "Boolean, true or false"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Byte').setDoc(     "8-bit unsigned value"),
 *     EnumWithDoc('Decimal').setDoc(  "Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 */
  __pyx_k_tuple_112 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_112)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_112));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Bool));
  PyTuple_SET_ITEM(__pyx_k_tuple_112, 0, ((PyObject *)__pyx_n_s__Bool));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Bool));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_112));
  __pyx_k_tuple_114 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_114)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_114));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_113));
  PyTuple_SET_ITEM(__pyx_k_tuple_114, 0, ((PyObject *)__pyx_kp_s_113));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_113));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_114));

  /* "libopenzwave.pyx":256
 * PyValueTypes = [
 *     EnumWithDoc('Bool').setDoc(     "Boolean, true or false"),
 *     EnumWithDoc('Byte').setDoc(     "8-bit unsigned value"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Decimal').setDoc(  "Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 *     EnumWithDoc('Int').setDoc(      "32-bit signed value"),
 */
  __pyx_k_tuple_115 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_115)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_115));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Byte));
  PyTuple_SET_ITEM(__pyx_k_tuple_115, 0, ((PyObject *)__pyx_n_s__Byte));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Byte));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_115));
  __pyx_k_tuple_117 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_117)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_117));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_116));
  PyTuple_SET_ITEM(__pyx_k_tuple_117, 0, ((PyObject *)__pyx_kp_s_116));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_116));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_117));

  /* "libopenzwave.pyx":257
 *     EnumWithDoc('Bool').setDoc(     "Boolean, true or false"),
 *     EnumWithDoc('Byte').setDoc(     "8-bit unsigned value"),
 *     EnumWithDoc('Decimal').setDoc(  "Represents a non-integer value as a string, to avoid floating point accuracy issues."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Int').setDoc(      "32-bit signed value"),
 *     EnumWithDoc('List').setDoc(     "List from which one item can be selected"),
 */
  __pyx_k_tuple_118 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_118)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_118));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Decimal));
  PyTuple_SET_ITEM(__pyx_k_tuple_118, 0, ((PyObject *)__pyx_n_s__Decimal));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Decimal));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_118));
  __pyx_k_tuple_120 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_120)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_120));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_119));
  PyTuple_SET_ITEM(__pyx_k_tuple_120, 0, ((PyObject *)__pyx_kp_s_119));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_119));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_120));

  /* "libopenzwave.pyx":258
 *     EnumWithDoc('Byte').setDoc(     "8-bit unsigned value"),
 *     EnumWithDoc('Decimal').setDoc(  "Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 *     EnumWithDoc('Int').setDoc(      "32-bit signed value"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('List').setDoc(     "List from which one item can be selected"),
 *     EnumWithDoc('Schedule').setDoc( "Complex type used with the Climate Control Schedule command class"),
 */
  __pyx_k_tuple_121 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_121)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_121));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Int));
  PyTuple_SET_ITEM(__pyx_k_tuple_121, 0, ((PyObject *)__pyx_n_s__Int));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Int));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_121));
  __pyx_k_tuple_123 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_123)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_123));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_122));
  PyTuple_SET_ITEM(__pyx_k_tuple_123, 0, ((PyObject *)__pyx_kp_s_122));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_122));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_123));

  /* "libopenzwave.pyx":259
 *     EnumWithDoc('Decimal').setDoc(  "Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 *     EnumWithDoc('Int').setDoc(      "32-bit signed value"),
 *     EnumWithDoc('List').setDoc(     "List from which one item can be selected"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Schedule').setDoc( "Complex type used with the Climate Control Schedule command class"),
 *     EnumWithDoc('Short').setDoc(    "16-bit signed value"),
 */
  __pyx_k_tuple_124 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_124)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_124));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__List));
  PyTuple_SET_ITEM(__pyx_k_tuple_124, 0, ((PyObject *)__pyx_n_s__List));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__List));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_124));
  __pyx_k_tuple_126 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_126)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_126));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_125));
  PyTuple_SET_ITEM(__pyx_k_tuple_126, 0, ((PyObject *)__pyx_kp_s_125));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_125));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_126));

  /* "libopenzwave.pyx":260
 *     EnumWithDoc('Int').setDoc(      "32-bit signed value"),
 *     EnumWithDoc('List').setDoc(     "List from which one item can be selected"),
 *     EnumWithDoc('Schedule').setDoc( "Complex type used with the Climate Control Schedule command class"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Short').setDoc(    "16-bit signed value"),
 *     EnumWithDoc('String').setDoc(   "Text string"),
 */
  __pyx_k_tuple_127 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_127)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_127));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Schedule));
  PyTuple_SET_ITEM(__pyx_k_tuple_127, 0, ((PyObject *)__pyx_n_s__Schedule));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Schedule));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_127));
  __pyx_k_tuple_129 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_129)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_129));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_128));
  PyTuple_SET_ITEM(__pyx_k_tuple_129, 0, ((PyObject *)__pyx_kp_s_128));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_128));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_129));

  /* "libopenzwave.pyx":261
 *     EnumWithDoc('List').setDoc(     "List from which one item can be selected"),
 *     EnumWithDoc('Schedule').setDoc( "Complex type used with the Climate Control Schedule command class"),
 *     EnumWithDoc('Short').setDoc(    "16-bit signed value"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('String').setDoc(   "Text string"),
 *     EnumWithDoc('Button').setDoc(   "A write-only value that is the equivalent of pressing a button to send a command to a device"),
 */
  __pyx_k_tuple_130 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_130)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_130));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Short));
  PyTuple_SET_ITEM(__pyx_k_tuple_130, 0, ((PyObject *)__pyx_n_s__Short));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Short));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_130));
  __pyx_k_tuple_132 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_132)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_132));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_131));
  PyTuple_SET_ITEM(__pyx_k_tuple_132, 0, ((PyObject *)__pyx_kp_s_131));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_131));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_132));

  /* "libopenzwave.pyx":262
 *     EnumWithDoc('Schedule').setDoc( "Complex type used with the Climate Control Schedule command class"),
 *     EnumWithDoc('Short').setDoc(    "16-bit signed value"),
 *     EnumWithDoc('String').setDoc(   "Text string"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Button').setDoc(   "A write-only value that is the equivalent of pressing a button to send a command to a device"),
 *     ]
 */
  __pyx_k_tuple_133 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_133)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_133));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__String));
  PyTuple_SET_ITEM(__pyx_k_tuple_133, 0, ((PyObject *)__pyx_n_s__String));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__String));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_133));
  __pyx_k_tuple_135 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_135)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_135));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_134));
  PyTuple_SET_ITEM(__pyx_k_tuple_135, 0, ((PyObject *)__pyx_kp_s_134));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_134));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_135));

  /* "libopenzwave.pyx":263
 *     EnumWithDoc('Short').setDoc(    "16-bit signed value"),
 *     EnumWithDoc('String').setDoc(   "Text string"),
 *     EnumWithDoc('Button').setDoc(   "A write-only value that is the equivalent of pressing a button to send a command to a device"),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_k_tuple_136 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_136)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_136));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__Button));
  PyTuple_SET_ITEM(__pyx_k_tuple_136, 0, ((PyObject *)__pyx_n_s__Button));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__Button));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_136));
  __pyx_k_tuple_138 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_138)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_138));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_137));
  PyTuple_SET_ITEM(__pyx_k_tuple_138, 0, ((PyObject *)__pyx_kp_s_137));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_137));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_138));

  /* "libopenzwave.pyx":481
 *     '''
 * 
 *     CALLBACK_DESC = ('value added','value removed','value changed','groups changed','new node','node added',             # <<<<<<<<<<<<<<
 *                      'node removed','node protocol info','node naming','node event','polling disabled',
 *                      'polling enabled','driver ready','driver reset','message complete','node queries complete',
 */
  __pyx_k_tuple_233 = PyTuple_New(18); if (unlikely(!__pyx_k_tuple_233)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_233));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_215));
  PyTuple_SET_ITEM(__pyx_k_tuple_233, 0, ((PyObject *)__pyx_kp_s_215));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_215));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_216));
  PyTuple_SET_ITEM(__pyx_k_tuple_233, 1, ((PyObject *)__pyx_kp_s_216));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_216));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_217));
  PyTuple_SET_ITEM(__pyx_k_tuple_233, 2, ((PyObject *)__pyx_kp_s_217));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_217));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_218));
  PyTuple_SET_ITEM(__pyx_k_tuple_233, 3, ((PyObject *)__pyx_kp_s_218));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_218));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_219));
  PyTuple_SET_ITEM(__pyx_k_tuple_233, 4, ((PyObject *)__pyx_kp_s_219));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_219));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_220));
  PyTuple_SET_ITEM(__pyx_k_tuple_233, 5, ((PyObject *)__pyx_kp_s_220));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_220));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_221));
  PyTuple_SET_ITEM(__pyx_k_tuple_233, 6, ((PyObject *)__pyx_kp_s_221));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_221));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_222));
  PyTuple_SET_ITEM(__pyx_k_tuple_233, 7, ((PyObject *)__pyx_kp_s_222));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_222));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_223));
  PyTuple_SET_ITEM(__pyx_k_tuple_233, 8, ((PyObject *)__pyx_kp_s_223));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_223));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_224));
  PyTuple_SET_ITEM(__pyx_k_tuple_233, 9, ((PyObject *)__pyx_kp_s_224));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_224));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_225));
  PyTuple_SET_ITEM(__pyx_k_tuple_233, 10, ((PyObject *)__pyx_kp_s_225));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_225));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_226));
  PyTuple_SET_ITEM(__pyx_k_tuple_233, 11, ((PyObject *)__pyx_kp_s_226));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_226));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_227));
  PyTuple_SET_ITEM(__pyx_k_tuple_233, 12, ((PyObject *)__pyx_kp_s_227));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_227));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_228));
  PyTuple_SET_ITEM(__pyx_k_tuple_233, 13, ((PyObject *)__pyx_kp_s_228));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_228));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_229));
  PyTuple_SET_ITEM(__pyx_k_tuple_233, 14, ((PyObject *)__pyx_kp_s_229));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_229));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_230));
  PyTuple_SET_ITEM(__pyx_k_tuple_233, 15, ((PyObject *)__pyx_kp_s_230));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_230));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_231));
  PyTuple_SET_ITEM(__pyx_k_tuple_233, 16, ((PyObject *)__pyx_kp_s_231));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_231));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_232));
  PyTuple_SET_ITEM(__pyx_k_tuple_233, 17, ((PyObject *)__pyx_kp_s_232));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_232));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_233));
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_32 = PyInt_FromLong(32); if (unlikely(!__pyx_int_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_33 = PyInt_FromLong(33); if (unlikely(!__pyx_int_33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_34 = PyInt_FromLong(34); if (unlikely(!__pyx_int_34)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_35 = PyInt_FromLong(35); if (unlikely(!__pyx_int_35)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_36 = PyInt_FromLong(36); if (unlikely(!__pyx_int_36)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_37 = PyInt_FromLong(37); if (unlikely(!__pyx_int_37)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_38 = PyInt_FromLong(38); if (unlikely(!__pyx_int_38)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_39 = PyInt_FromLong(39); if (unlikely(!__pyx_int_39)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_40 = PyInt_FromLong(40); if (unlikely(!__pyx_int_40)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_41 = PyInt_FromLong(41); if (unlikely(!__pyx_int_41)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_42 = PyInt_FromLong(42); if (unlikely(!__pyx_int_42)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_43 = PyInt_FromLong(43); if (unlikely(!__pyx_int_43)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_44 = PyInt_FromLong(44); if (unlikely(!__pyx_int_44)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_45 = PyInt_FromLong(45); if (unlikely(!__pyx_int_45)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_46 = PyInt_FromLong(46); if (unlikely(!__pyx_int_46)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_47 = PyInt_FromLong(47); if (unlikely(!__pyx_int_47)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_48 = PyInt_FromLong(48); if (unlikely(!__pyx_int_48)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_49 = PyInt_FromLong(49); if (unlikely(!__pyx_int_49)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_50 = PyInt_FromLong(50); if (unlikely(!__pyx_int_50)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_51 = PyInt_FromLong(51); if (unlikely(!__pyx_int_51)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_52 = PyInt_FromLong(52); if (unlikely(!__pyx_int_52)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_53 = PyInt_FromLong(53); if (unlikely(!__pyx_int_53)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_56 = PyInt_FromLong(56); if (unlikely(!__pyx_int_56)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_60 = PyInt_FromLong(60); if (unlikely(!__pyx_int_60)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_61 = PyInt_FromLong(61); if (unlikely(!__pyx_int_61)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_62 = PyInt_FromLong(62); if (unlikely(!__pyx_int_62)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_64 = PyInt_FromLong(64); if (unlikely(!__pyx_int_64)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_66 = PyInt_FromLong(66); if (unlikely(!__pyx_int_66)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_67 = PyInt_FromLong(67); if (unlikely(!__pyx_int_67)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_68 = PyInt_FromLong(68); if (unlikely(!__pyx_int_68)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_69 = PyInt_FromLong(69); if (unlikely(!__pyx_int_69)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_70 = PyInt_FromLong(70); if (unlikely(!__pyx_int_70)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_71 = PyInt_FromLong(71); if (unlikely(!__pyx_int_71)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_76 = PyInt_FromLong(76); if (unlikely(!__pyx_int_76)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_78 = PyInt_FromLong(78); if (unlikely(!__pyx_int_78)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_80 = PyInt_FromLong(80); if (unlikely(!__pyx_int_80)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_81 = PyInt_FromLong(81); if (unlikely(!__pyx_int_81)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_96 = PyInt_FromLong(96); if (unlikely(!__pyx_int_96)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_98 = PyInt_FromLong(98); if (unlikely(!__pyx_int_98)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_99 = PyInt_FromLong(99); if (unlikely(!__pyx_int_99)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_112 = PyInt_FromLong(112); if (unlikely(!__pyx_int_112)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_113 = PyInt_FromLong(113); if (unlikely(!__pyx_int_113)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_114 = PyInt_FromLong(114); if (unlikely(!__pyx_int_114)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_115 = PyInt_FromLong(115); if (unlikely(!__pyx_int_115)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_117 = PyInt_FromLong(117); if (unlikely(!__pyx_int_117)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_118 = PyInt_FromLong(118); if (unlikely(!__pyx_int_118)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_119 = PyInt_FromLong(119); if (unlikely(!__pyx_int_119)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_122 = PyInt_FromLong(122); if (unlikely(!__pyx_int_122)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_123 = PyInt_FromLong(123); if (unlikely(!__pyx_int_123)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_124 = PyInt_FromLong(124); if (unlikely(!__pyx_int_124)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_125 = PyInt_FromLong(125); if (unlikely(!__pyx_int_125)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_128 = PyInt_FromLong(128); if (unlikely(!__pyx_int_128)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_129 = PyInt_FromLong(129); if (unlikely(!__pyx_int_129)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_130 = PyInt_FromLong(130); if (unlikely(!__pyx_int_130)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_132 = PyInt_FromLong(132); if (unlikely(!__pyx_int_132)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_133 = PyInt_FromLong(133); if (unlikely(!__pyx_int_133)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_134 = PyInt_FromLong(134); if (unlikely(!__pyx_int_134)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_135 = PyInt_FromLong(135); if (unlikely(!__pyx_int_135)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_136 = PyInt_FromLong(136); if (unlikely(!__pyx_int_136)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_137 = PyInt_FromLong(137); if (unlikely(!__pyx_int_137)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_138 = PyInt_FromLong(138); if (unlikely(!__pyx_int_138)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_139 = PyInt_FromLong(139); if (unlikely(!__pyx_int_139)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_140 = PyInt_FromLong(140); if (unlikely(!__pyx_int_140)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_141 = PyInt_FromLong(141); if (unlikely(!__pyx_int_141)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_142 = PyInt_FromLong(142); if (unlikely(!__pyx_int_142)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_143 = PyInt_FromLong(143); if (unlikely(!__pyx_int_143)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_144 = PyInt_FromLong(144); if (unlikely(!__pyx_int_144)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_145 = PyInt_FromLong(145); if (unlikely(!__pyx_int_145)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_146 = PyInt_FromLong(146); if (unlikely(!__pyx_int_146)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_147 = PyInt_FromLong(147); if (unlikely(!__pyx_int_147)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_148 = PyInt_FromLong(148); if (unlikely(!__pyx_int_148)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_149 = PyInt_FromLong(149); if (unlikely(!__pyx_int_149)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_150 = PyInt_FromLong(150); if (unlikely(!__pyx_int_150)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_151 = PyInt_FromLong(151); if (unlikely(!__pyx_int_151)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_152 = PyInt_FromLong(152); if (unlikely(!__pyx_int_152)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_153 = PyInt_FromLong(153); if (unlikely(!__pyx_int_153)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_154 = PyInt_FromLong(154); if (unlikely(!__pyx_int_154)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_155 = PyInt_FromLong(155); if (unlikely(!__pyx_int_155)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_156 = PyInt_FromLong(156); if (unlikely(!__pyx_int_156)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_157 = PyInt_FromLong(157); if (unlikely(!__pyx_int_157)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_158 = PyInt_FromLong(158); if (unlikely(!__pyx_int_158)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_239 = PyInt_FromLong(239); if (unlikely(!__pyx_int_239)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_240 = PyInt_FromLong(240); if (unlikely(!__pyx_int_240)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initlibopenzwave(void); /*proto*/
PyMODINIT_FUNC initlibopenzwave(void)
#else
PyMODINIT_FUNC PyInit_libopenzwave(void); /*proto*/
PyMODINIT_FUNC PyInit_libopenzwave(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  PyObject *__pyx_t_26 = NULL;
  PyObject *__pyx_t_27 = NULL;
  #if CYTHON_REFNANNY
  void* __pyx_refnanny = NULL;
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  __pyx_refnanny = __Pyx_RefNanny->SetupContext("PyMODINIT_FUNC PyInit_libopenzwave(void)", __LINE__, __FILE__);
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __pyx_binding_PyCFunctionType_USED
  if (__pyx_binding_PyCFunctionType_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("libopenzwave"), __pyx_methods, __Pyx_DOCSTR(__pyx_k_18), 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_libopenzwave) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_12libopenzwave_PyOptions) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "PyOptions", (PyObject *)&__pyx_type_12libopenzwave_PyOptions) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_12libopenzwave_PyOptions = &__pyx_type_12libopenzwave_PyOptions;
  if (PyType_Ready(&__pyx_type_12libopenzwave_PyManager) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "PyManager", (PyObject *)&__pyx_type_12libopenzwave_PyManager) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_12libopenzwave_PyManager = &__pyx_type_12libopenzwave_PyManager;
  /*--- Type import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "libopenzwave.pyx":39
 * from values cimport ValueGenre, ValueType, ValueID
 * from options cimport Options, Create
 * import os             # <<<<<<<<<<<<<<
 * 
 * PYLIBRARY = "0.2.1"
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__os), 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__os, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":41
 * import os
 * 
 * PYLIBRARY = "0.2.1"             # <<<<<<<<<<<<<<
 * OZWAVE_CONFIG_DIRECTORY = "share/python-openzwave/config"
 * 
 */
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PYLIBRARY, ((PyObject *)__pyx_kp_s_19)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "libopenzwave.pyx":42
 * 
 * PYLIBRARY = "0.2.1"
 * OZWAVE_CONFIG_DIRECTORY = "share/python-openzwave/config"             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "Manager.h" namespace "OpenZWave":
 */
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_3, ((PyObject *)__pyx_kp_s_20)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "libopenzwave.pyx":212
 *         return self.options.Lock()
 * 
 * class EnumWithDoc(str):             # <<<<<<<<<<<<<<
 *     def setDoc(self, doc):
 *         self.__doc__ = doc
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

  /* "libopenzwave.pyx":213
 * 
 * class EnumWithDoc(str):
 *     def setDoc(self, doc):             # <<<<<<<<<<<<<<
 *         self.__doc__ = doc
 *         return self
 */
  __pyx_t_2 = __pyx_binding_PyCFunctionType_NewEx(&__pyx_mdef_12libopenzwave_11EnumWithDoc_setDoc, NULL, __pyx_n_s__libopenzwave); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s__setDoc, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":212
 *         return self.options.Lock()
 * 
 * class EnumWithDoc(str):             # <<<<<<<<<<<<<<
 *     def setDoc(self, doc):
 *         self.__doc__ = doc
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(((PyObject *)((PyObject*)(&PyString_Type))));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)((PyObject*)(&PyString_Type))));
  __Pyx_GIVEREF(((PyObject *)((PyObject*)(&PyString_Type))));
  __pyx_t_3 = __Pyx_CreateClass(((PyObject *)__pyx_t_2), ((PyObject *)__pyx_t_1), __pyx_n_s__EnumWithDoc, __pyx_n_s__libopenzwave); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EnumWithDoc, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":218
 * 
 * PyNotifications = [
 *     EnumWithDoc('ValueAdded').setDoc("A new node value has been added to OpenZWave's list. These notifications occur after a node has been discovered, and details of its command classes have been received.  Each command class may generate one or more values depending on the complexity of the item being represented."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ValueRemoved').setDoc("A node value has been removed from OpenZWave's list.  This only occurs when a node is removed."),
 *     EnumWithDoc('ValueChanged').setDoc("A node value has been updated from the Z-Wave network and it is different from the previous value."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_21), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_23), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":219
 * PyNotifications = [
 *     EnumWithDoc('ValueAdded').setDoc("A new node value has been added to OpenZWave's list. These notifications occur after a node has been discovered, and details of its command classes have been received.  Each command class may generate one or more values depending on the complexity of the item being represented."),
 *     EnumWithDoc('ValueRemoved').setDoc("A node value has been removed from OpenZWave's list.  This only occurs when a node is removed."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ValueChanged').setDoc("A node value has been updated from the Z-Wave network and it is different from the previous value."),
 *     EnumWithDoc('ValueRefreshed').setDoc("A node value has been updated from the Z-Wave network."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_24), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_26), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":220
 *     EnumWithDoc('ValueAdded').setDoc("A new node value has been added to OpenZWave's list. These notifications occur after a node has been discovered, and details of its command classes have been received.  Each command class may generate one or more values depending on the complexity of the item being represented."),
 *     EnumWithDoc('ValueRemoved').setDoc("A node value has been removed from OpenZWave's list.  This only occurs when a node is removed."),
 *     EnumWithDoc('ValueChanged').setDoc("A node value has been updated from the Z-Wave network and it is different from the previous value."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ValueRefreshed').setDoc("A node value has been updated from the Z-Wave network."),
 *     EnumWithDoc('Group').setDoc("The associations for the node have changed. The application should rebuild any group information it holds about the node."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_27), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_29), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":221
 *     EnumWithDoc('ValueRemoved').setDoc("A node value has been removed from OpenZWave's list.  This only occurs when a node is removed."),
 *     EnumWithDoc('ValueChanged').setDoc("A node value has been updated from the Z-Wave network and it is different from the previous value."),
 *     EnumWithDoc('ValueRefreshed').setDoc("A node value has been updated from the Z-Wave network."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Group').setDoc("The associations for the node have changed. The application should rebuild any group information it holds about the node."),
 *     EnumWithDoc('NodeNew').setDoc("A new node has been found (not already stored in zwcfg*.xml file)."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_30), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_32), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":222
 *     EnumWithDoc('ValueChanged').setDoc("A node value has been updated from the Z-Wave network and it is different from the previous value."),
 *     EnumWithDoc('ValueRefreshed').setDoc("A node value has been updated from the Z-Wave network."),
 *     EnumWithDoc('Group').setDoc("The associations for the node have changed. The application should rebuild any group information it holds about the node."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeNew').setDoc("A new node has been found (not already stored in zwcfg*.xml file)."),
 *     EnumWithDoc('NodeAdded').setDoc("A new node has been added to OpenZWave's list.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_33), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_6, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_35), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":223
 *     EnumWithDoc('ValueRefreshed').setDoc("A node value has been updated from the Z-Wave network."),
 *     EnumWithDoc('Group').setDoc("The associations for the node have changed. The application should rebuild any group information it holds about the node."),
 *     EnumWithDoc('NodeNew').setDoc("A new node has been found (not already stored in zwcfg*.xml file)."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeAdded').setDoc("A new node has been added to OpenZWave's list.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),
 *     EnumWithDoc('NodeRemoved').setDoc("A node has been removed from OpenZWave's list.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_36), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_7, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_38), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":224
 *     EnumWithDoc('Group').setDoc("The associations for the node have changed. The application should rebuild any group information it holds about the node."),
 *     EnumWithDoc('NodeNew').setDoc("A new node has been found (not already stored in zwcfg*.xml file)."),
 *     EnumWithDoc('NodeAdded').setDoc("A new node has been added to OpenZWave's list.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeRemoved').setDoc("A node has been removed from OpenZWave's list.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),
 *     EnumWithDoc('NodeProtocolInfo').setDoc("Basic node information has been receievd, such as whether the node is a listening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_39), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_8, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_41), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":225
 *     EnumWithDoc('NodeNew').setDoc("A new node has been found (not already stored in zwcfg*.xml file)."),
 *     EnumWithDoc('NodeAdded').setDoc("A new node has been added to OpenZWave's list.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),
 *     EnumWithDoc('NodeRemoved').setDoc("A node has been removed from OpenZWave's list.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeProtocolInfo').setDoc("Basic node information has been receievd, such as whether the node is a listening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),
 *     EnumWithDoc('NodeNaming').setDoc("One of the node names has changed (name, manufacturer, product)."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_42), NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_9, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_44), NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":226
 *     EnumWithDoc('NodeAdded').setDoc("A new node has been added to OpenZWave's list.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),
 *     EnumWithDoc('NodeRemoved').setDoc("A node has been removed from OpenZWave's list.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),
 *     EnumWithDoc('NodeProtocolInfo').setDoc("Basic node information has been receievd, such as whether the node is a listening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeNaming').setDoc("One of the node names has changed (name, manufacturer, product)."),
 *     EnumWithDoc('NodeEvent').setDoc("A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_45), NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_10, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_47), NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":227
 *     EnumWithDoc('NodeRemoved').setDoc("A node has been removed from OpenZWave's list.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),
 *     EnumWithDoc('NodeProtocolInfo').setDoc("Basic node information has been receievd, such as whether the node is a listening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),
 *     EnumWithDoc('NodeNaming').setDoc("One of the node names has changed (name, manufacturer, product)."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeEvent').setDoc("A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),
 *     EnumWithDoc('PollingDisabled').setDoc("Polling of a node has been successfully turned off by a call to Manager::DisablePoll."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_11 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_48), NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_11, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_50), NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":228
 *     EnumWithDoc('NodeProtocolInfo').setDoc("Basic node information has been receievd, such as whether the node is a listening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),
 *     EnumWithDoc('NodeNaming').setDoc("One of the node names has changed (name, manufacturer, product)."),
 *     EnumWithDoc('NodeEvent').setDoc("A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('PollingDisabled').setDoc("Polling of a node has been successfully turned off by a call to Manager::DisablePoll."),
 *     EnumWithDoc('PollingEnabled').setDoc("Polling of a node has been successfully turned on by a call to Manager::EnablePoll."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_12 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_51), NULL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_12, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_53), NULL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":229
 *     EnumWithDoc('NodeNaming').setDoc("One of the node names has changed (name, manufacturer, product)."),
 *     EnumWithDoc('NodeEvent').setDoc("A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),
 *     EnumWithDoc('PollingDisabled').setDoc("Polling of a node has been successfully turned off by a call to Manager::DisablePoll."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('PollingEnabled').setDoc("Polling of a node has been successfully turned on by a call to Manager::EnablePoll."),
 *     EnumWithDoc('CreateButton').setDoc("Handheld controller button event created."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_13 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_54), NULL); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_13, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_t_13 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_56), NULL); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":230
 *     EnumWithDoc('NodeEvent').setDoc("A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),
 *     EnumWithDoc('PollingDisabled').setDoc("Polling of a node has been successfully turned off by a call to Manager::DisablePoll."),
 *     EnumWithDoc('PollingEnabled').setDoc("Polling of a node has been successfully turned on by a call to Manager::EnablePoll."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('CreateButton').setDoc("Handheld controller button event created."),
 *     EnumWithDoc('DeleteButton').setDoc("Handheld controller button event deleted."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_14 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_57), NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_14, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_14 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_59), NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":231
 *     EnumWithDoc('PollingDisabled').setDoc("Polling of a node has been successfully turned off by a call to Manager::DisablePoll."),
 *     EnumWithDoc('PollingEnabled').setDoc("Polling of a node has been successfully turned on by a call to Manager::EnablePoll."),
 *     EnumWithDoc('CreateButton').setDoc("Handheld controller button event created."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DeleteButton').setDoc("Handheld controller button event deleted."),
 *     EnumWithDoc('ButtonOn').setDoc("Handheld controller button on pressed event."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_15 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_60), NULL); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_15, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_62), NULL); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":232
 *     EnumWithDoc('PollingEnabled').setDoc("Polling of a node has been successfully turned on by a call to Manager::EnablePoll."),
 *     EnumWithDoc('CreateButton').setDoc("Handheld controller button event created."),
 *     EnumWithDoc('DeleteButton').setDoc("Handheld controller button event deleted."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ButtonOn').setDoc("Handheld controller button on pressed event."),
 *     EnumWithDoc('ButtonOff').setDoc("Handheld controller button off pressed event."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_16 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_63), NULL); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_16, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_65), NULL); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":233
 *     EnumWithDoc('CreateButton').setDoc("Handheld controller button event created."),
 *     EnumWithDoc('DeleteButton').setDoc("Handheld controller button event deleted."),
 *     EnumWithDoc('ButtonOn').setDoc("Handheld controller button on pressed event."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ButtonOff').setDoc("Handheld controller button off pressed event."),
 *     EnumWithDoc('DriverReady').setDoc("A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_17 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_66), NULL); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_17, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __pyx_t_17 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_68), NULL); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":234
 *     EnumWithDoc('DeleteButton').setDoc("Handheld controller button event deleted."),
 *     EnumWithDoc('ButtonOn').setDoc("Handheld controller button on pressed event."),
 *     EnumWithDoc('ButtonOff').setDoc("Handheld controller button off pressed event."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DriverReady').setDoc("A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),
 *     EnumWithDoc('DriverFailed').setDoc("Driver failed to load."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_18 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_69), NULL); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_18, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_71), NULL); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":235
 *     EnumWithDoc('ButtonOn').setDoc("Handheld controller button on pressed event."),
 *     EnumWithDoc('ButtonOff').setDoc("Handheld controller button off pressed event."),
 *     EnumWithDoc('DriverReady').setDoc("A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DriverFailed').setDoc("Driver failed to load."),
 *     EnumWithDoc('riverReset').setDoc("All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_19 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_72), NULL); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_19, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __pyx_t_19 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_74), NULL); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":236
 *     EnumWithDoc('ButtonOff').setDoc("Handheld controller button off pressed event."),
 *     EnumWithDoc('DriverReady').setDoc("A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),
 *     EnumWithDoc('DriverFailed').setDoc("Driver failed to load."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('riverReset').setDoc("All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),
 *     EnumWithDoc('MsgComplete').setDoc("The last message that was sent is now complete."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_20 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_75), NULL); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_20, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_77), NULL); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":237
 *     EnumWithDoc('DriverReady').setDoc("A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),
 *     EnumWithDoc('DriverFailed').setDoc("Driver failed to load."),
 *     EnumWithDoc('riverReset').setDoc("All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('MsgComplete').setDoc("The last message that was sent is now complete."),
 *     EnumWithDoc('EssentialNodeQueriesComplete').setDoc("The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_21 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_78), NULL); if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_21, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  __pyx_t_21 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_80), NULL); if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":238
 *     EnumWithDoc('DriverFailed').setDoc("Driver failed to load."),
 *     EnumWithDoc('riverReset').setDoc("All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),
 *     EnumWithDoc('MsgComplete').setDoc("The last message that was sent is now complete."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('EssentialNodeQueriesComplete').setDoc("The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages."),
 *     EnumWithDoc('NodeQueriesComplete').setDoc("All the initialisation queries on a node have been completed."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_22 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_81), NULL); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_22, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
  __pyx_t_22 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_83), NULL); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":239
 *     EnumWithDoc('riverReset').setDoc("All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),
 *     EnumWithDoc('MsgComplete').setDoc("The last message that was sent is now complete."),
 *     EnumWithDoc('EssentialNodeQueriesComplete').setDoc("The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeQueriesComplete').setDoc("All the initialisation queries on a node have been completed."),
 *     EnumWithDoc('AwakeNodesQueried').setDoc("All awake nodes have been queried, so client application can expected complete data for these nodes."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_23 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_85), NULL); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_23, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __pyx_t_23 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_87), NULL); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":240
 *     EnumWithDoc('MsgComplete').setDoc("The last message that was sent is now complete."),
 *     EnumWithDoc('EssentialNodeQueriesComplete').setDoc("The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages."),
 *     EnumWithDoc('NodeQueriesComplete').setDoc("All the initialisation queries on a node have been completed."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('AwakeNodesQueried').setDoc("All awake nodes have been queried, so client application can expected complete data for these nodes."),
 *     EnumWithDoc('AllNodesQueried').setDoc("All nodes have been queried, so client application can expected complete data."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_24 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_88), NULL); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_24, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
  __pyx_t_24 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_90), NULL); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":241
 *     EnumWithDoc('EssentialNodeQueriesComplete').setDoc("The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages."),
 *     EnumWithDoc('NodeQueriesComplete').setDoc("All the initialisation queries on a node have been completed."),
 *     EnumWithDoc('AwakeNodesQueried').setDoc("All awake nodes have been queried, so client application can expected complete data for these nodes."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('AllNodesQueried').setDoc("All nodes have been queried, so client application can expected complete data."),
 *     EnumWithDoc('Error').setDoc("An error has occured that we need to report."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_25 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_91), NULL); if (unlikely(!__pyx_t_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_25, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
  __pyx_t_25 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_93), NULL); if (unlikely(!__pyx_t_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":242
 *     EnumWithDoc('NodeQueriesComplete').setDoc("All the initialisation queries on a node have been completed."),
 *     EnumWithDoc('AwakeNodesQueried').setDoc("All awake nodes have been queried, so client application can expected complete data for these nodes."),
 *     EnumWithDoc('AllNodesQueried').setDoc("All nodes have been queried, so client application can expected complete data."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Error').setDoc("An error has occured that we need to report."),
 *     ]
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_26 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_94), NULL); if (unlikely(!__pyx_t_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_26, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
  __pyx_t_26 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_96), NULL); if (unlikely(!__pyx_t_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":243
 *     EnumWithDoc('AwakeNodesQueried').setDoc("All awake nodes have been queried, so client application can expected complete data for these nodes."),
 *     EnumWithDoc('AllNodesQueried').setDoc("All nodes have been queried, so client application can expected complete data."),
 *     EnumWithDoc('Error').setDoc("An error has occured that we need to report."),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_27 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_97), NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_27, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
  __pyx_t_27 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_99), NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(26); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_11);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_12);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_13);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_14);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_15);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_16);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_17);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_18);
  PyList_SET_ITEM(__pyx_t_1, 17, __pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_19);
  PyList_SET_ITEM(__pyx_t_1, 18, __pyx_t_20);
  __Pyx_GIVEREF(__pyx_t_20);
  PyList_SET_ITEM(__pyx_t_1, 19, __pyx_t_21);
  __Pyx_GIVEREF(__pyx_t_21);
  PyList_SET_ITEM(__pyx_t_1, 20, __pyx_t_22);
  __Pyx_GIVEREF(__pyx_t_22);
  PyList_SET_ITEM(__pyx_t_1, 21, __pyx_t_23);
  __Pyx_GIVEREF(__pyx_t_23);
  PyList_SET_ITEM(__pyx_t_1, 22, __pyx_t_24);
  __Pyx_GIVEREF(__pyx_t_24);
  PyList_SET_ITEM(__pyx_t_1, 23, __pyx_t_25);
  __Pyx_GIVEREF(__pyx_t_25);
  PyList_SET_ITEM(__pyx_t_1, 24, __pyx_t_26);
  __Pyx_GIVEREF(__pyx_t_26);
  PyList_SET_ITEM(__pyx_t_1, 25, __pyx_t_27);
  __Pyx_GIVEREF(__pyx_t_27);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_14 = 0;
  __pyx_t_15 = 0;
  __pyx_t_16 = 0;
  __pyx_t_17 = 0;
  __pyx_t_18 = 0;
  __pyx_t_19 = 0;
  __pyx_t_20 = 0;
  __pyx_t_21 = 0;
  __pyx_t_22 = 0;
  __pyx_t_23 = 0;
  __pyx_t_24 = 0;
  __pyx_t_25 = 0;
  __pyx_t_26 = 0;
  __pyx_t_27 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PyNotifications, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":248
 * 
 * PyGenres = [
 *     EnumWithDoc('Basic').setDoc(  "The 'level' as controlled by basic commands.  Usually duplicated by another command class."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('User').setDoc(   "Basic values an ordinary user would be interested in."),
 *     EnumWithDoc('Config').setDoc( "Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_27 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_100), NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_27, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
  __pyx_t_27 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_102), NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":249
 * PyGenres = [
 *     EnumWithDoc('Basic').setDoc(  "The 'level' as controlled by basic commands.  Usually duplicated by another command class."),
 *     EnumWithDoc('User').setDoc(   "Basic values an ordinary user would be interested in."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Config').setDoc( "Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),
 *     EnumWithDoc('System').setDoc( "Values of significance only to users who understand the Z-Wave protocol"),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_26 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_103), NULL); if (unlikely(!__pyx_t_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_26, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
  __pyx_t_26 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_105), NULL); if (unlikely(!__pyx_t_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":250
 *     EnumWithDoc('Basic').setDoc(  "The 'level' as controlled by basic commands.  Usually duplicated by another command class."),
 *     EnumWithDoc('User').setDoc(   "Basic values an ordinary user would be interested in."),
 *     EnumWithDoc('Config').setDoc( "Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('System').setDoc( "Values of significance only to users who understand the Z-Wave protocol"),
 *     ]
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_25 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_106), NULL); if (unlikely(!__pyx_t_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_25, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
  __pyx_t_25 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_108), NULL); if (unlikely(!__pyx_t_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":251
 *     EnumWithDoc('User').setDoc(   "Basic values an ordinary user would be interested in."),
 *     EnumWithDoc('Config').setDoc( "Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),
 *     EnumWithDoc('System').setDoc( "Values of significance only to users who understand the Z-Wave protocol"),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_24 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_109), NULL); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_24, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
  __pyx_t_24 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_111), NULL); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_27);
  __Pyx_GIVEREF(__pyx_t_27);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_26);
  __Pyx_GIVEREF(__pyx_t_26);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_25);
  __Pyx_GIVEREF(__pyx_t_25);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_24);
  __Pyx_GIVEREF(__pyx_t_24);
  __pyx_t_27 = 0;
  __pyx_t_26 = 0;
  __pyx_t_25 = 0;
  __pyx_t_24 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PyGenres, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":255
 * 
 * PyValueTypes = [
 *     EnumWithDoc('Bool').setDoc(     "Boolean, true or false"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Byte').setDoc(     "8-bit unsigned value"),
 *     EnumWithDoc('Decimal').setDoc(  "Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_24 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_112), NULL); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_24, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
  __pyx_t_24 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_114), NULL); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":256
 * PyValueTypes = [
 *     EnumWithDoc('Bool').setDoc(     "Boolean, true or false"),
 *     EnumWithDoc('Byte').setDoc(     "8-bit unsigned value"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Decimal').setDoc(  "Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 *     EnumWithDoc('Int').setDoc(      "32-bit signed value"),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_25 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_115), NULL); if (unlikely(!__pyx_t_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_25, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
  __pyx_t_25 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_117), NULL); if (unlikely(!__pyx_t_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":257
 *     EnumWithDoc('Bool').setDoc(     "Boolean, true or false"),
 *     EnumWithDoc('Byte').setDoc(     "8-bit unsigned value"),
 *     EnumWithDoc('Decimal').setDoc(  "Represents a non-integer value as a string, to avoid floating point accuracy issues."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Int').setDoc(      "32-bit signed value"),
 *     EnumWithDoc('List').setDoc(     "List from which one item can be selected"),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_26 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_118), NULL); if (unlikely(!__pyx_t_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_26, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
  __pyx_t_26 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_120), NULL); if (unlikely(!__pyx_t_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":258
 *     EnumWithDoc('Byte').setDoc(     "8-bit unsigned value"),
 *     EnumWithDoc('Decimal').setDoc(  "Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 *     EnumWithDoc('Int').setDoc(      "32-bit signed value"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('List').setDoc(     "List from which one item can be selected"),
 *     EnumWithDoc('Schedule').setDoc( "Complex type used with the Climate Control Schedule command class"),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_27 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_121), NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_27, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
  __pyx_t_27 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_123), NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":259
 *     EnumWithDoc('Decimal').setDoc(  "Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 *     EnumWithDoc('Int').setDoc(      "32-bit signed value"),
 *     EnumWithDoc('List').setDoc(     "List from which one item can be selected"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Schedule').setDoc( "Complex type used with the Climate Control Schedule command class"),
 *     EnumWithDoc('Short').setDoc(    "16-bit signed value"),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_23 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_124), NULL); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_23, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __pyx_t_23 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_126), NULL); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":260
 *     EnumWithDoc('Int').setDoc(      "32-bit signed value"),
 *     EnumWithDoc('List').setDoc(     "List from which one item can be selected"),
 *     EnumWithDoc('Schedule').setDoc( "Complex type used with the Climate Control Schedule command class"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Short').setDoc(    "16-bit signed value"),
 *     EnumWithDoc('String').setDoc(   "Text string"),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_22 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_127), NULL); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_22, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
  __pyx_t_22 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_129), NULL); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":261
 *     EnumWithDoc('List').setDoc(     "List from which one item can be selected"),
 *     EnumWithDoc('Schedule').setDoc( "Complex type used with the Climate Control Schedule command class"),
 *     EnumWithDoc('Short').setDoc(    "16-bit signed value"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('String').setDoc(   "Text string"),
 *     EnumWithDoc('Button').setDoc(   "A write-only value that is the equivalent of pressing a button to send a command to a device"),
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_21 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_130), NULL); if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_21, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  __pyx_t_21 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_132), NULL); if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":262
 *     EnumWithDoc('Schedule').setDoc( "Complex type used with the Climate Control Schedule command class"),
 *     EnumWithDoc('Short').setDoc(    "16-bit signed value"),
 *     EnumWithDoc('String').setDoc(   "Text string"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Button').setDoc(   "A write-only value that is the equivalent of pressing a button to send a command to a device"),
 *     ]
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_20 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_133), NULL); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_20, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_135), NULL); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":263
 *     EnumWithDoc('Short').setDoc(    "16-bit signed value"),
 *     EnumWithDoc('String').setDoc(   "Text string"),
 *     EnumWithDoc('Button').setDoc(   "A write-only value that is the equivalent of pressing a button to send a command to a device"),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_19 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_136), NULL); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_19, __pyx_n_s__setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __pyx_t_19 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_138), NULL); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(9); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_24);
  __Pyx_GIVEREF(__pyx_t_24);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_25);
  __Pyx_GIVEREF(__pyx_t_25);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_26);
  __Pyx_GIVEREF(__pyx_t_26);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_27);
  __Pyx_GIVEREF(__pyx_t_27);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_t_23);
  __Pyx_GIVEREF(__pyx_t_23);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_t_22);
  __Pyx_GIVEREF(__pyx_t_22);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_t_21);
  __Pyx_GIVEREF(__pyx_t_21);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_t_20);
  __Pyx_GIVEREF(__pyx_t_20);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_19);
  __pyx_t_24 = 0;
  __pyx_t_25 = 0;
  __pyx_t_26 = 0;
  __pyx_t_27 = 0;
  __pyx_t_23 = 0;
  __pyx_t_22 = 0;
  __pyx_t_21 = 0;
  __pyx_t_20 = 0;
  __pyx_t_19 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PyValueTypes, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":391
 * sleeping) have been polled, an "AllNodesQueried" notification is sent.
 *     '''
 *     COMMAND_CLASS_DESC = {             # <<<<<<<<<<<<<<
 *         0x00: 'COMMAND_CLASS_NO_OPERATION',
 *         0x20: 'COMMAND_CLASS_BASIC',
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_0, ((PyObject *)__pyx_n_s_139)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_32, ((PyObject *)__pyx_n_s__COMMAND_CLASS_BASIC)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_33, ((PyObject *)__pyx_n_s_140)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_34, ((PyObject *)__pyx_n_s_141)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_35, ((PyObject *)__pyx_n_s_142)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_36, ((PyObject *)__pyx_n_s_143)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_37, ((PyObject *)__pyx_n_s_144)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_38, ((PyObject *)__pyx_n_s_145)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_39, ((PyObject *)__pyx_n_s_146)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_40, ((PyObject *)__pyx_n_s_147)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_41, ((PyObject *)__pyx_n_s_148)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_42, ((PyObject *)__pyx_n_s_149)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_43, ((PyObject *)__pyx_n_s_150)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_44, ((PyObject *)__pyx_n_s_151)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_45, ((PyObject *)__pyx_n_s_152)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_46, ((PyObject *)__pyx_n_s_153)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_47, ((PyObject *)__pyx_n_s_154)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_48, ((PyObject *)__pyx_n_s_155)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_49, ((PyObject *)__pyx_n_s_156)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_50, ((PyObject *)__pyx_n_s__COMMAND_CLASS_METER)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_51, ((PyObject *)__pyx_n_s_157)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_52, ((PyObject *)__pyx_n_s_158)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_53, ((PyObject *)__pyx_n_s_159)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_60, ((PyObject *)__pyx_n_s_160)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_61, ((PyObject *)__pyx_n_s_161)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_62, ((PyObject *)__pyx_n_s_162)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_56, ((PyObject *)__pyx_n_s_163)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_64, ((PyObject *)__pyx_n_s_164)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_66, ((PyObject *)__pyx_n_s_165)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_67, ((PyObject *)__pyx_n_s_166)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_68, ((PyObject *)__pyx_n_s_167)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_69, ((PyObject *)__pyx_n_s_168)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_70, ((PyObject *)__pyx_n_s_169)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_71, ((PyObject *)__pyx_n_s_170)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_76, ((PyObject *)__pyx_n_s_171)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_78, ((PyObject *)__pyx_n_s_172)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_80, ((PyObject *)__pyx_n_s_173)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_81, ((PyObject *)__pyx_n_s_174)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_96, ((PyObject *)__pyx_n_s_175)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_98, ((PyObject *)__pyx_n_s_176)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_99, ((PyObject *)__pyx_n_s_177)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_112, ((PyObject *)__pyx_n_s_178)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_113, ((PyObject *)__pyx_n_s__COMMAND_CLASS_ALARM)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_114, ((PyObject *)__pyx_n_s_179)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_115, ((PyObject *)__pyx_n_s_180)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_117, ((PyObject *)__pyx_n_s_181)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_118, ((PyObject *)__pyx_n_s__COMMAND_CLASS_LOCK)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_119, ((PyObject *)__pyx_n_s_182)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_122, ((PyObject *)__pyx_n_s_183)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_123, ((PyObject *)__pyx_n_s_184)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_124, ((PyObject *)__pyx_n_s_185)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_125, ((PyObject *)__pyx_n_s_186)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_128, ((PyObject *)__pyx_n_s_187)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_129, ((PyObject *)__pyx_n_s__COMMAND_CLASS_CLOCK)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_130, ((PyObject *)__pyx_n_s__COMMAND_CLASS_HAIL)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_132, ((PyObject *)__pyx_n_s_188)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_133, ((PyObject *)__pyx_n_s_189)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_134, ((PyObject *)__pyx_n_s_190)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_135, ((PyObject *)__pyx_n_s_191)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_136, ((PyObject *)__pyx_n_s_192)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_137, ((PyObject *)__pyx_n_s_193)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_138, ((PyObject *)__pyx_n_s__COMMAND_CLASS_TIME)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_139, ((PyObject *)__pyx_n_s_194)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_140, ((PyObject *)__pyx_n_s_195)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_141, ((PyObject *)__pyx_n_s_196)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_142, ((PyObject *)__pyx_n_s_197)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_143, ((PyObject *)__pyx_n_s_198)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_144, ((PyObject *)__pyx_n_s_199)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_145, ((PyObject *)__pyx_n_s_200)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_146, ((PyObject *)__pyx_n_s_201)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_147, ((PyObject *)__pyx_n_s_202)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_148, ((PyObject *)__pyx_n_s_203)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_149, ((PyObject *)__pyx_n_s_204)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_150, ((PyObject *)__pyx_n_s_205)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_151, ((PyObject *)__pyx_n_s_206)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_152, ((PyObject *)__pyx_n_s_207)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_153, ((PyObject *)__pyx_n_s_208)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_154, ((PyObject *)__pyx_n_s_209)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_155, ((PyObject *)__pyx_n_s_210)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_156, ((PyObject *)__pyx_n_s_211)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_157, ((PyObject *)__pyx_n_s_212)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_158, ((PyObject *)__pyx_n_s_213)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_239, ((PyObject *)__pyx_n_s__COMMAND_CLASS_MARK)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_240, ((PyObject *)__pyx_n_s_214)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem((PyObject *)__pyx_ptype_12libopenzwave_PyManager->tp_dict, __pyx_n_s__COMMAND_CLASS_DESC, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_12libopenzwave_PyManager);

  /* "libopenzwave.pyx":481
 *     '''
 * 
 *     CALLBACK_DESC = ('value added','value removed','value changed','groups changed','new node','node added',             # <<<<<<<<<<<<<<
 *                      'node removed','node protocol info','node naming','node event','polling disabled',
 *                      'polling enabled','driver ready','driver reset','message complete','node queries complete',
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_12libopenzwave_PyManager->tp_dict, __pyx_n_s__CALLBACK_DESC, ((PyObject *)__pyx_k_tuple_233)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_12libopenzwave_PyManager);

  /* "libopenzwave.pyx":1
 * """             # <<<<<<<<<<<<<<
 * .. module:: libopenzwave
 * 
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_XDECREF(__pyx_t_24);
  __Pyx_XDECREF(__pyx_t_25);
  __Pyx_XDECREF(__pyx_t_26);
  __Pyx_XDECREF(__pyx_t_27);
  if (__pyx_m) {
    __Pyx_AddTraceback("init libopenzwave");
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init libopenzwave");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result)
        PyErr_SetObject(PyExc_NameError, name);
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *number, *more_or_less;

    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    number = (num_expected == 1) ? "" : "s";
    PyErr_Format(PyExc_TypeError,
        #if PY_VERSION_HEX < 0x02050000
            "%s() takes %s %d positional argument%s (%d given)",
        #else
            "%s() takes %s %zd positional argument%s (%zd given)",
        #endif
        func_name, more_or_less, num_expected, number, num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;

    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    /* unexpected keyword found */
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}


static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();

    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;

    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}


#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    Py_XINCREF(type);
    Py_XINCREF(value);
    Py_XINCREF(tb);
    /* First, check the traceback argument, replacing None with NULL. */
    if (tb == Py_None) {
        Py_DECREF(tb);
        tb = 0;
    }
    else if (tb != NULL && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto raise_error;
    }
    /* Next, replace a missing value with None */
    if (value == NULL) {
        value = Py_None;
        Py_INCREF(value);
    }
    #if PY_VERSION_HEX < 0x02050000
    if (!PyClass_Check(type))
    #else
    if (!PyType_Check(type))
    #endif
    {
        /* Raising an instance.  The value should be a dummy. */
        if (value != Py_None) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        /* Normalize to raise <class>, <instance> */
        Py_DECREF(value);
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }

    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}

#else /* Python 3+ */

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;

    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (!PyExceptionClass_Check(type)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }

    PyErr_SetObject(type, value);

    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }

bad:
    return;
}
#endif

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list) {
    PyObject *py_import = 0;
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    py_import = __Pyx_GetAttrString(__pyx_b, "__import__");
    if (!py_import)
        goto bad;
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
bad:
    Py_XDECREF(empty_list);
    Py_XDECREF(py_import);
    Py_XDECREF(empty_dict);
    return module;
}

static PyObject *__Pyx_FindPy2Metaclass(PyObject *bases) {
    PyObject *metaclass;
    /* Default metaclass */
#if PY_MAJOR_VERSION < 3
    if (PyTuple_Check(bases) && PyTuple_GET_SIZE(bases) > 0) {
        PyObject *base = PyTuple_GET_ITEM(bases, 0);
        metaclass = PyObject_GetAttrString(base, "__class__");
        if (!metaclass) {
            PyErr_Clear();
            metaclass = (PyObject*) Py_TYPE(base);
        }
    } else {
        metaclass = (PyObject *) &PyClass_Type;
    }
#else
    if (PyTuple_Check(bases) && PyTuple_GET_SIZE(bases) > 0) {
        PyObject *base = PyTuple_GET_ITEM(bases, 0);
        metaclass = (PyObject*) Py_TYPE(base);
    } else {
        metaclass = (PyObject *) &PyType_Type;
    }
#endif
    Py_INCREF(metaclass);
    return metaclass;
}

static PyObject *__Pyx_CreateClass(PyObject *bases, PyObject *dict, PyObject *name,
                                   PyObject *modname) {
    PyObject *result;
    PyObject *metaclass;

    if (PyDict_SetItemString(dict, "__module__", modname) < 0)
        return NULL;

    /* Python2 __metaclass__ */
    metaclass = PyDict_GetItemString(dict, "__metaclass__");
    if (metaclass) {
        Py_INCREF(metaclass);
    } else {
        metaclass = __Pyx_FindPy2Metaclass(bases);
    }
    result = PyObject_CallFunctionObjArgs(metaclass, name, bases, dict, NULL);
    Py_DECREF(metaclass);
    return result;
}


static PyObject *__pyx_binding_PyCFunctionType_NewEx(PyMethodDef *ml, PyObject *self, PyObject *module) {
	__pyx_binding_PyCFunctionType_object *op = PyObject_GC_New(__pyx_binding_PyCFunctionType_object, __pyx_binding_PyCFunctionType);
    if (op == NULL)
        return NULL;
	op->func.m_ml = ml;
	Py_XINCREF(self);
	op->func.m_self = self;
	Py_XINCREF(module);
	op->func.m_module = module;
	PyObject_GC_Track(op);
	return (PyObject *)op;
}

static void __pyx_binding_PyCFunctionType_dealloc(__pyx_binding_PyCFunctionType_object *m) {
	PyObject_GC_UnTrack(m);
	Py_XDECREF(m->func.m_self);
	Py_XDECREF(m->func.m_module);
    PyObject_GC_Del(m);
}

static PyObject *__pyx_binding_PyCFunctionType_descr_get(PyObject *func, PyObject *obj, PyObject *type) {
	if (obj == Py_None)
		obj = NULL;
	return PyMethod_New(func, obj, type);
}

static int __pyx_binding_PyCFunctionType_init(void) {
    __pyx_binding_PyCFunctionType_type = PyCFunction_Type;
    __pyx_binding_PyCFunctionType_type.tp_name = __Pyx_NAMESTR("cython_binding_builtin_function_or_method");
    __pyx_binding_PyCFunctionType_type.tp_dealloc = (destructor)__pyx_binding_PyCFunctionType_dealloc;
    __pyx_binding_PyCFunctionType_type.tp_descr_get = __pyx_binding_PyCFunctionType_descr_get;
    if (PyType_Ready(&__pyx_binding_PyCFunctionType_type) < 0) {
        return -1;
    }
    __pyx_binding_PyCFunctionType = &__pyx_binding_PyCFunctionType_type;
    return 0;

}

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static void __Pyx_WriteUnraisable(const char *name) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
